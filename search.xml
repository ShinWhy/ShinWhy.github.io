<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>回溯法</title>
      <link href="/2024/12/11/leetcode(%E5%9B%9E%E6%BA%AF%E6%B3%95)/"/>
      <url>/2024/12/11/leetcode(%E5%9B%9E%E6%BA%AF%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://harryqu1229.github.io/">https://harryqu1229.github.io/</a></p><h1 id="回溯法简介"><a href="#回溯法简介" class="headerlink" title="回溯法简介"></a>回溯法简介</h1><p>递归函数<br>纯暴力搜索<br>能解决哪些问题？</p><ul><li>组合</li><li>切割</li><li>子集</li><li>排列</li><li>棋盘<br>模板<br>void backtracking(参数){<br>  if(终止条件){<br>  收集结果;<br>  return;<br>  }<br>  for(集合的元素){<br>  处理节点;<br>  递归函数;<br>  回溯操作; eg.12,13,14<br>  }<br>  return;<br>}</li></ul><h2 id="39-Combination-Sum-组合总和"><a href="#39-Combination-Sum-组合总和" class="headerlink" title="39. Combination Sum(组合总和)"></a>39. Combination Sum(组合总和)</h2>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 回溯法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/11/hello-world/"/>
      <url>/2024/12/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV安装踩坑和体验</title>
      <link href="/2023/11/08/OpenCV/"/>
      <url>/2023/11/08/OpenCV/</url>
      
        <content type="html"><![CDATA[<p>代码报错，有人说这是因为Opencv和C++版本不匹配<br> <code>undefined reference to cv::imread(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int)</code></p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> BuildYourOwnX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
            <tag> BuildYourOwnX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建TelegramBot</title>
      <link href="/2023/11/08/TelegramBot/"/>
      <url>/2023/11/08/TelegramBot/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> BuildYourOwnX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BuildYourOwnX </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现TextEditor</title>
      <link href="/2023/11/08/TextEditor/"/>
      <url>/2023/11/08/TextEditor/</url>
      
        <content type="html"><![CDATA[<h1 id="C-知识点回忆"><a href="#C-知识点回忆" class="headerlink" title="C++知识点回忆"></a>C++知识点回忆</h1><p><a href="https://www.cnblogs.com/downey-blog/p/10470782.html">构造函数</a></p><ol><li><strong>构造函数名</strong>必须和<strong>类名</strong>相同，没有返回值，必须是公有成员，因为私有成员不允许外部访问。且函数不能声明为const.</li><li>默认构造函数</li><li>初始化列表的构造方式</li><li>拷贝构造函数 <strong>注</strong>：成员函数（普通成员函数，构造函数）可以访问同类对象的私有变量，类的封装性是针对类而不是针对类对象，我们定义类中成员访问权限的初衷是保护私有成员不被外部其他对象访问到。外部想要访问私有成员，需要通过公共的函数接口。而在类的内部，任何函数成员都能访问私有成员。</li><li>赋值运算符的重载</li></ol><h2 id="void类型的指针"><a href="#void类型的指针" class="headerlink" title="void类型的指针"></a>void类型的指针</h2><p>指向<code>void</code>类型的指针是一种通用指针类型，它可以指向任何数据类型的地址，因为<code>void</code>类型可以表示任意类型的指针。在C和C++中，<code>void*</code>通常用于实现通用的指针传递和类型转换，因为它可以接受任何类型的指针赋值。<br>使用<code>void*</code>类型的指针时，需要谨慎处理，因为它在没有额外信息的情况下无法直接解引用或操作。通常在接收<code>void*</code>类型的指针后，需要将其转换为特定的类型才能进行实际的操作。<br>在上面提到的代码中，<code>void* v</code>被转换为<code>EditorWindow*</code>类型，这样就可以在函数内部使用它来访问<code>EditorWindow</code>对象的成员和方法。</p><p>fltk-config –compile TextEditor.cpp<br>报错，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g++ -I/d/fltk/fltk/include -I/d/fltk/fltk/include/FL/images -DWIN32 -DUSE_OPENGL32 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -o &#x27;TextEditor&#x27; &#x27;TextEditor.cpp&#x27; -mwindows /d/fltk/fltk/lib/libfltk.a -lole32 -luuid -lcomctl32</span><br><span class="line">TextEditor.cpp:40:47: error: &#x27;new_cb&#x27; was not declared in this scope</span><br><span class="line">         &#123;&quot;&amp;New File&quot;,       0, (Fl_Callback *)new_cb &#125;,</span><br><span class="line">                                               ^~~~~~</span><br></pre></td></tr></table></figure><p>有的是因为函数名没有写对，</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> BuildYourOwnX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> C++ </tag>
            
            <tag> BuildYourOwnX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Mining上课笔记</title>
      <link href="/2023/10/16/DM/"/>
      <url>/2023/10/16/DM/</url>
      
        <content type="html"><![CDATA[<h1 id="Course-Structure"><a href="#Course-Structure" class="headerlink" title="Course Structure"></a>Course Structure</h1><p><img src="/images/DM/outline.JPG" alt="outline"></p><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p><img src="/images/DM/Evaluation.JPG" alt="考试信息"></p><h1 id="学习指导"><a href="#学习指导" class="headerlink" title="学习指导"></a>学习指导</h1><p>![](&#x2F;images&#x2F;DM&#x2F;study guide.JPG)</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>##1. Big Data<br>##2. Machine Learning</p><ul><li>Supervised Learning</li><li>Unsupervised Learning</li><li>Reinforcement Learning</li></ul><p>##3. Data Science</p><h1 id="1-Data-Mining介绍"><a href="#1-Data-Mining介绍" class="headerlink" title="1. Data Mining介绍"></a>1. Data Mining介绍</h1><p>Process of identifying (1)valid, (2)novel, (3)potentially useful, and (4)understandable patterns in data<br>Good: valid, novel(发现一些平时看不出来的), useful(actionable, 能不能利用做些事情), understandable(why)</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ul><li>Descripive: (about what already happened)</li><li>Predictive: (about what might happen)</li><li>Prescriptive: (recommend a course of action)</li></ul><h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><p><img src="/images/DM/outline.JPG" alt="outline"><br>Main step: Selection, Cleaning, Transformation, Mining, Validation, Presentation &amp; Narrative</p><h2 id="Data-preparation-amp-preprocessing"><a href="#Data-preparation-amp-preprocessing" class="headerlink" title="Data preparation &amp; preprocessing"></a>Data preparation &amp; preprocessing</h2><p>80%-90% of overall effort<br>incomplete, noisy(incorrect), inconsistent, duplicate</p><h3 id="Major-Tasks"><a href="#Major-Tasks" class="headerlink" title="Major Tasks"></a>Major Tasks</h3><ol><li>Data cleaning</li><li>Data integration</li><li>Data reduction</li><li>Feature engineer, data transformation, and data discretization</li></ol><h3 id="Missing-value"><a href="#Missing-value" class="headerlink" title="Missing value"></a>Missing value</h3><h3 id="Sampling"><a href="#Sampling" class="headerlink" title="Sampling"></a>Sampling</h3><p>main technique employed for data selection</p><ol><li>Simple random sampling</li><li>Sampling without replacement</li><li>Sampling with replacement(Bootstrap) 1-1&#x2F;n</li><li>Stratified sampling(分层抽样)</li></ol><h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><h3 id="1-Regression"><a href="#1-Regression" class="headerlink" title="1. Regression"></a>1. Regression</h3><ul><li>Linear Regression Model</li><li>KNeighborsRegressor: 它通过找到距离新数据点最近的K个邻居，并使用它们的数值来进行预测。这个算法在回归分析和预测问题中很有用。</li><li>KNIME Regression Tree: 在每个节点上，回归树算法会选择最佳的特征和切分点，使得子节点中的样本尽可能相似，同时实现目标变量的最小方差或最小平方误差。这种算法简单且易于理解，通常在预测连续型变量时表现良好。通过对输入空间进行递归的划分来生成树结构，每个叶子节点都对应着一个具体的预测值</li></ul><h3 id="2-Classification"><a href="#2-Classification" class="headerlink" title="2. Classification"></a>2. Classification</h3><p>用上面提到的方法</p><h3 id="3-Clustering-unsupervised-learning"><a href="#3-Clustering-unsupervised-learning" class="headerlink" title="3. Clustering(unsupervised learning)"></a>3. Clustering(unsupervised learning)</h3><p>K-means</p><h3 id="4-Associtions"><a href="#4-Associtions" class="headerlink" title="4. Associtions"></a>4. Associtions</h3><p>Assocition Rules(Support, Confidence, Lift)<br>支持（Support）、置信度（Confidence）、提升度（Lift）是关联规则分析中常用的指标。支持指标衡量一个规则在数据集中出现的频率，置信度衡量规则的可靠性，而提升度则衡量两个事件之间的相关性程度。这些指标对于了解数据集中项之间的关联程度和规律具有重要作用。</p><h3 id="5-Other-tasks"><a href="#5-Other-tasks" class="headerlink" title="5. Other tasks"></a>5. Other tasks</h3><ul><li>Outlier analysis</li><li>Trend and evolution analysis</li><li>Text Mining, Topic Modeling, Graph Mining, Data Streams</li><li>Sentiment Analysis, Opinion Analysis, etc.</li><li>Other pattern-directed or statistical analysis</li></ul><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p>Pitfalls</p><h1 id="2-Data-Representation"><a href="#2-Data-Representation" class="headerlink" title="2. Data Representation"></a>2. Data Representation</h1><p>Instances, Attributes(variables), and Concept(class)</p><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><ul><li>Numeric Attributes</li><li>Categorical Attributes<br>Hierarchies eg. Spatial regions, taxonomies</li></ul><h2 id="Missing-Values"><a href="#Missing-Values" class="headerlink" title="Missing Values"></a>Missing Values</h2><ol><li>Type</li></ol><ul><li>MNAR</li><li>MAR</li><li>MCAR</li></ul><ol start="2"><li>Handling Missing Values</li></ol><ul><li>Do Not Impute</li><li>Deletion</li><li>List-wise Deletion</li><li>Pairwise Deletion</li><li>Imputation</li><li>Single Imputation(Mean&#x2F;mode substitution, Dummy variable control)</li><li>Model-based Imputation(for MCAR, not for MNAR)</li></ul><h2 id="Inaccurate-Values"><a href="#Inaccurate-Values" class="headerlink" title="Inaccurate Values"></a>Inaccurate Values</h2><h2 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h2><ol><li>Lable Encoder</li><li>One Hot Encodeing</li></ol><h1 id="3-Data-Exploration"><a href="#3-Data-Exploration" class="headerlink" title="3. Data Exploration"></a>3. Data Exploration</h1>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACAV课程笔记</title>
      <link href="/2023/10/16/ACAV/"/>
      <url>/2023/10/16/ACAV/</url>
      
        <content type="html"><![CDATA[<p>recommended: lecture notes and classes<br>written test(2H- 6 or 7 question) open answer question<br><img src="/images/ACAV/tasks.JPG" alt="outline"></p><h2 id="2-Actuator-执行器"><a href="#2-Actuator-执行器" class="headerlink" title="2. Actuator(执行器)"></a>2. Actuator(执行器)</h2><h3 id="I-brake-system"><a href="#I-brake-system" class="headerlink" title="I. brake system"></a>I. brake system</h3><h3 id="II-Steer-actuation-转向驱动"><a href="#II-Steer-actuation-转向驱动" class="headerlink" title="II. Steer-actuation(转向驱动)"></a>II. Steer-actuation(转向驱动)</h3><ul><li>EPS - Electric power steering</li><li>SBW - Steer-by-wire</li><li>Retrofitting</li></ul><h2 id="3-Sensor"><a href="#3-Sensor" class="headerlink" title="3. Sensor"></a>3. Sensor</h2><p>This chapter is dealing with the <strong>Perception(感知感觉)</strong></p><h3 id="I-Vision-Sensors"><a href="#I-Vision-Sensors" class="headerlink" title="I. Vision Sensors"></a>I. Vision Sensors</h3><p>Visual perception</p><ol><li>Introduction to Cameras<br>lens&#x2F;aperture&#x2F;sensor<br>各种分类</li><li>Camera Projective Geometry<br>The Image Plane: I &#x3D; f(xi, yi)<br>Reference Frame: World Reference, Camera Reference<br>Pin hole model: [R|t] roto-translation between world reference and camera reference, R-3*3 matrix, t-3D vector<br>xi&#x2F;f &#x3D; xw&#x2F;zw<br>Two steps:</li></ol><ul><li>Projection from world coordinates to camera coordinates(roto-translation)</li><li>Projection from camera coordinates to image coordinates(xi &#x3D; xc&#x2F;zc*f + cx &#x3D; xi’)(3D -&gt; 2D)</li><li>Camera Calibration(Input and Output)</li><li>Depth Vision(knowing the size of objects we have in the scene)</li><li>Stereo Cameras: Zw &#x3D; fb &#x2F; d</li><li>Correspondence Problem: Correlation Based Algorithm &#x2F; Feature Based Algorithm<ul><li>Appearance Similarity function</li><li>Search Strategy to find location with highest similarity: epipolar constraint</li></ul></li></ul><ol start="3"><li>Model Based Image Processing</li></ol><ul><li>look for specific features(human defined)</li><li>lane detection: lens distortion correction - ROI selection - Bird-Eye View - Image Segmentation</li><li>RANSAC算法</li></ul><ol start="4"><li>Neural Network Image Processing</li><li>Conclusion</li></ol><h2 id="2-Time-of-Flight-Sensors"><a href="#2-Time-of-Flight-Sensors" class="headerlink" title="2. Time of Flight Sensors"></a>2. Time of Flight Sensors</h2><p>随机抽样一致性（Random Sample Consensus，RANSAC）是一种用于拟合模型和估计参数的迭代方法。RANSAC算法的主要目标是从包含离群点（outliers）的数据集中，估计出最佳的模型参数，以便更好地拟合数据。</p><p>RANSAC算法的工作原理如下：</p><ol><li>从数据集中随机选择一小部分样本，并使用这些样本拟合模型。</li><li>根据拟合模型，计算数据集中与模型拟合较好的数据点（内点，inliers）。</li><li>通过内点重新估计模型参数。</li><li>评估新模型的性能，并记录其内点数量。</li><li>重复上述步骤多次，并选择具有最多内点的模型作为最佳模型。</li></ol><p>RANSAC算法的优点在于它能够有效地处理包含离群点的数据集，因为它通过随机抽样和迭代的方式，能够找到对离群点具有鲁棒性的最佳模型。RANSAC广泛应用于计算机视觉、图像处理、计算机图形学等领域，例如在图像配准、特征匹配、三维重建等方面发挥着重要作用。</p><h2 id="4-Localization-amp-State-Estimation-in-an-autonomous-car"><a href="#4-Localization-amp-State-Estimation-in-an-autonomous-car" class="headerlink" title="4. Localization &amp; State Estimation in an autonomous car"></a>4. Localization &amp; State Estimation in an autonomous car</h2>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACAV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACAV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AAPP</title>
      <link href="/2023/09/15/AAPP/"/>
      <url>/2023/09/15/AAPP/</url>
      
        <content type="html"><![CDATA[<p>五点前看完两个视频<br>近期要把并行听完，20号之前，要把ANNDL听完，25号之前，<br>要把DB听完，要把RS，PL，TCS，ACAV，DM听完</p><h1 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h1><p>statement independent or dependent: the order of execution affects the computation outcome<br>true dependence: could not be removed<br>output dependence<br>anti-dependence<br>DOALL loop(foreach loop)<br>loop-carried dependence<br>loop-independent </p><h2 id="5种Parallel-Pattern"><a href="#5种Parallel-Pattern" class="headerlink" title="5种Parallel Pattern"></a>5种Parallel Pattern</h2><ul><li><p>Nesting Pattern</p></li><li><p>Serial&#x2F;Parallel Control Patterns<br>  Serial: Sequence, Selection, Iteration, Recursion<br>  Parallel: Fork-join, Map, Stencil, Reduction, Scan, </p></li><li><p>Serial&#x2F;Parallel Data Management Patterns<br>  Serial: random read and write, stack allocation, heap allocation, object<br>  Parallel: pack, pipeline, geometric decomposition, gather and scatter</p></li><li><p>Other Patterns</p></li><li><p>Programming Model Support for Patterns</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> AAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> AAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANNDL</title>
      <link href="/2023/09/15/ANNDL/"/>
      <url>/2023/09/15/ANNDL/</url>
      
        <content type="html"><![CDATA[<h2 id="2-From-Perceptron-to-Feed-Forward-Neural-Network"><a href="#2-From-Perceptron-to-Feed-Forward-Neural-Network" class="headerlink" title="2. From Perceptron to Feed Forward Neural Network"></a>2. From Perceptron to Feed Forward Neural Network</h2><p>AI &gt; Machine Learning &gt; Deep Learning</p><p>1949: perceptron<br>Hebbian Learning</p><h1 id="Neural-Networks-Training-and-Overfitting"><a href="#Neural-Networks-Training-and-Overfitting" class="headerlink" title="Neural Networks Training and Overfitting"></a>Neural Networks Training and Overfitting</h1><h2 id="1-Neural-Networks-are-Universal-Approximators-Generalization-and-Overfitting"><a href="#1-Neural-Networks-are-Universal-Approximators-Generalization-and-Overfitting" class="headerlink" title="1. Neural Networks are Universal Approximators(Generalization and Overfitting)"></a>1. Neural Networks are Universal Approximators(Generalization and Overfitting)</h2><p>Underfitting the data: 用了过于简单的模型(too high bias to prevent you to fit the data)<br>Overfitting….      : too complex models</p><h2 id="2-怎么解决overfitting问题？"><a href="#2-怎么解决overfitting问题？" class="headerlink" title="2. 怎么解决overfitting问题？"></a>2. 怎么解决overfitting问题？</h2><ul><li>首先detect，test on an independent new test set(split training set(training and validation) &amp; test set), 如果数据太少不够分怎么办？Bootstraping<br>在分类问题中，要preserve class distribution, eg. stratified sampling</li><li>怎么保证test的数据具有普遍性？<br>用cross validation,(Hold Out set, Leave-One-Out Cross-Validation[LOOCV], K-fold Cross_validation)<br>K-fold会得到k个不同的模型，不建议选最好的一个，有偶然性，可以把五个模型平均</li><li>重头戏，怎么解决overfitting<br>Early Stopping: 训练过程中做cross-validation on the hold out set, 当validation set error增加及时停下，实际过程中当看到training set error在10到20个epoch里不再减少时，训练结束。在rensorflow里，设置patience</li></ul><ol start="2"><li>Cross-Validation and Hyperpaarameters Tuning<br>为什么模型过于复杂的时候，训练会被early stopping过早结束？</li></ol><h2 id="3-另一个办法：Weights-Decay-Weights-Regularization"><a href="#3-另一个办法：Weights-Decay-Weights-Regularization" class="headerlink" title="3. 另一个办法：Weights Decay: Weights Regularization"></a>3. 另一个办法：Weights Decay: Weights Regularization</h2><p>Put prior on the weights<br>然后发现error(loss) function里面有一个参数γ，用cross-validation选择合适的γ，这里没有early stopping，不同的γ值得到不同的error function值，自己选一个最小的就行<br>在神经网络训练中，<strong>epoch</strong> 是指将整个训练数据集完整地通过神经网络训练一次的次数。换句话说，一个 epoch 表示神经网络已经看过了整个数据集一次。</p><h2 id="4-另另一个办法：Dropout"><a href="#4-另另一个办法：Dropout" class="headerlink" title="4. 另另一个办法：Dropout"></a>4. 另另一个办法：Dropout</h2><p>随即关掉一些神经元来强制学习一些独立的特征，阻止一些单元依赖另一些</p><p>2023年10月16号</p><h1 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h1><p>有哪些方法？利弊？</p><ul><li>slinding window</li><li>Region Proposal</li><li>R-CNN</li><li>Fast R-CNN</li><li>Faster R-CNN<br>loU:越大越好</li></ul><h1 id="Autoencoders-and-Generative-Adversarial-Network"><a href="#Autoencoders-and-Generative-Adversarial-Network" class="headerlink" title="Autoencoders and Generative Adversarial Network"></a>Autoencoders and Generative Adversarial Network</h1><p>什么是hidden Markov models?</p><h1 id="Recurrent-Neural-Networks"><a href="#Recurrent-Neural-Networks" class="headerlink" title="Recurrent Neural Networks"></a>Recurrent Neural Networks</h1><p>backpropagation through time</p><p>存在Vanishing Gradient的问题，可以用一些特殊的activation function来解决，比如relu<br>RNN和LSTM有什么区别？</p><p>Gated Recurrent Unit(GRU) 简化版的LSTM</p><p>Bidirectional LSTM Networks(必须是full input sequence)<br>Specify the initial state</p><p>Sequence to sequence learning examples:</p><ul><li>Image Captioning</li><li>Sentiment Classification&#x2F;Analysis</li><li>Language Translation</li></ul>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ANNDL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ANNDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PL</title>
      <link href="/2023/09/15/PL/"/>
      <url>/2023/09/15/PL/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/PL/Concept.JPG" alt="概念思维导图"><br>Static scoping rules（静态作用域规则）是指在编程语言中，变量的作用域是在程序编译时就已经确定好的，而不是在程序运行时才确定。这意味着，如果一个变量被定义在某个函数内部，它的作用域只限于该函数内部，而不会影响到其他函数。这样可以避免变量名冲突和不必要的内存消耗，提高程序的可读性和可维护性。</p><p>Static vs Dynamic scoping</p><p>为什么去掉apply以后不能正常运行？</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> PL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> PL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow</title>
      <link href="/2023/09/15/Tensorflow/"/>
      <url>/2023/09/15/Tensorflow/</url>
      
        <content type="html"><![CDATA[<h2 id="Tensorflow找不到GPU：tensorflow-2-11-0版本开始，在windows上不再支持GPU"><a href="#Tensorflow找不到GPU：tensorflow-2-11-0版本开始，在windows上不再支持GPU" class="headerlink" title="Tensorflow找不到GPU：tensorflow 2.11.0版本开始，在windows上不再支持GPU"></a>Tensorflow找不到GPU：tensorflow 2.11.0版本开始，在windows上不再支持GPU</h2><p><a href="https://blog.csdn.net/bragen/article/details/129131278"></a></p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ANNDL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ANNDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统</title>
      <link href="/2023/09/12/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/09/12/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="今天把机器学习模型算法看完"><a href="#今天把机器学习模型算法看完" class="headerlink" title="今天把机器学习模型算法看完"></a>今天把机器学习模型算法看完</h1><h1 id="机器学习数学基础"><a href="#机器学习数学基础" class="headerlink" title="机器学习数学基础"></a>机器学习数学基础</h1><p>线性代数：矩阵<br>微积分：导数，偏导数，方向导数，梯度(Gradient): 函数在变量空间的某一点处，沿着哪一个方向有最大的变化率。凹函数和凸函数<br>概率论和统计： 样本均值，样本方差，标准差，概率分布{均匀分布，正态分布(高斯分布)，指数分布}，条件概率公式，全概率公式，贝叶斯公式</p><h1 id="机器学习入门"><a href="#机器学习入门" class="headerlink" title="机器学习入门"></a>机器学习入门</h1><p>有监督学习：提供数据并提供数据对应结果的机器学习过程（分类(离散数值)&#x2F;回归(连续数值)）<br>无监督学习：<br>强化学习：通过与环境交互并延迟返回进而改进行为的学习过程。<br>![机器学习](&#x2F;images&#x2F;Recommender Systems&#x2F;Machine Learning.jpg)<br><img src="/images/Resources/MyBatis%E4%B8%8B%E8%BD%BD.png"></p>]]></content>
      
      
      <categories>
          
          <category> Polimi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big data </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周报3</title>
      <link href="/2023/09/08/weekly3/"/>
      <url>/2023/09/08/weekly3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/txr152111/article/details/119861857"><span style="color:red;font-size:15px;font-family:黑体;"><b>弄懂main函数中的argc和argv</b></span></a><br><a href="https://blog.csdn.net/txr152111/article/details/119861857">https://blog.csdn.net/txr152111/article/details/119861857</a></p><p><span style="color:red;font-size:15px;font-family:黑体;"><b>已解决：VsCode C++ 连接mysql数据库出现undefined reference to 的问题</b></span>](<a href="https://www.cnblogs.com/shou-xt/p/16201340.html">https://www.cnblogs.com/shou-xt/p/16201340.html</a>)<br><a href="https://www.cnblogs.com/shou-xt/p/16201340.html">https://www.cnblogs.com/shou-xt/p/16201340.html</a></p><p><span style="color:red;font-size:15px;font-family:黑体;"><b>C++ 关于编译出现”undefined reference to <code>std::cout</code>“的问题</b></span>](<a href="https://blog.csdn.net/m0_57894994/article/details/126258157">https://blog.csdn.net/m0_57894994/article/details/126258157</a>)<br><a href="https://blog.csdn.net/m0_57894994/article/details/126258157">https://blog.csdn.net/m0_57894994/article/details/126258157</a></p><p><span style="color:red;font-size:15px;font-family:黑体;"><b>CMakeLists.txt的超傻瓜手把手教程（附实例源码）</b></span>](<a href="https://blog.csdn.net/qq_38410730/article/details/102477162">https://blog.csdn.net/qq_38410730/article/details/102477162</a>)<br><a href="https://blog.csdn.net/qq_38410730/article/details/102477162">https://blog.csdn.net/qq_38410730/article/details/102477162</a></p><p><span style="color:red;font-size:15px;font-family:黑体;"><b>【C++】Vscode 中使用CMakeLists（推荐）构建C++项目：项目结构、各个文件夹的作用、从编码到debug</b></span>](<a href="https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=1">https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=1</a>)<br><a href="https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=1">https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=1</a></p><p><span style="color:red;font-size:15px;font-family:黑体;"><b>【C++】Vscode 中使用CMakeLists（推荐）构建C++项目：项目结构、各个文件夹的作用、从编码到debug</b></span>](<a href="https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=1">https://blog.csdn.net/qq_44886213/article/details/124198574?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-124198574-blog-128056009.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;utm_relevant_index=1</a>)</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周报2</title>
      <link href="/2023/09/08/weekly2/"/>
      <url>/2023/09/08/weekly2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、如何快速深入地学习一个新东西？"><a href="#一、如何快速深入地学习一个新东西？" class="headerlink" title="一、如何快速深入地学习一个新东西？"></a>一、如何快速深入地学习一个新东西？</h1><ol><li>我们有一个需求</li></ol><ul><li>项目开发时，我们需要解决某个问题</li><li>工作需要</li></ul><ol start="2"><li>先看看使用现有的技术能否解决这个问题</li></ol><ul><li>可以解决<br>（1）使用传统的方法————发现使用传统的方法可以解决，但是不够好<br>（2）使用新技术</li></ul><ol start="3"><li>学习一下新技术或者知识点的原理和基本语法<br>（1）原理<br>（2）基本语法</li><li>快速入门案例<br>（1）简单<br>（2）了解新技术或者知识点的基本使用<br>这里不需要涉及技术细节</li><li>讨论这个新技术或者知识点的细节（费时间）<br>（1）怎么使用更规范<br>（2）使用陷阱<br>（3）需要使用时，注意什么</li><li>回头解决需求</li></ol><h1 id="Public-Security-Administration-Punishment-Law-Public-Security-Law"><a href="#Public-Security-Administration-Punishment-Law-Public-Security-Law" class="headerlink" title="Public Security Administration Punishment Law(Public Security Law)"></a>Public Security Administration Punishment Law(Public Security Law)</h1><p>Recently the chinese government has decided to publish a new version of Public Security Administration Punishment Law. In this law, there are too many unreasonable provisions, which may expand the power of the public power(public authority&#x2F;state power). For example, in the article 34,  it is said that undermine the spirit or hurt the feelings of the Chinese nation” could be detained for up to 15 days and fined up to 5,000 yuan. Nobody can define what is the behaviour that may hurt the feelings of the chinese people, especially civilians who do not serve in government. So who can do it? In other word, who has the power to use the article? The government, the police, the officers in the government. According this law, the public will be given more power. They can decide whether a behaviour is legal or not according to their emotion and mood. If there is a girl who likes kimono very much and wears it on the street, the policeman can put her in jail for 15 days without any court trials. What is even more frightening is that not only Kimono, but also an anime pattern on the clothes can even draw the attention of policeman or some officers(we know the policeman often follow orders from higher government officials).</p><p>As a Chinese, you don’t know what clothes are safe in China from the moment on. Before Chinese economic reform, people only wear Jiefangzhuang and work clothes. Jiefangzhuang is a style of clothing that originated in China during the Cultural Revolution. It was characterized by its simple, utilitarian design and was meant to symbolize the liberation of the working class from the oppressive capitalist system. On the one hand, it was because people were too poor to spend money on the clothes. On the other hand, more importantly, it was banned to wear glamorous and beautiful clothes, such as high heels and miniskirts. What’s more, in front of some facories, the managers used beer bottles to measure the size of trouser legs. Some schools called in Red Guards outside the school to take “forced actions” against so-called “oddly dressed” people. As a result, people had to choose required clothing to avoid toubles, usually military uniforms.</p><p>So as a Chinese, if we don’t want to go back to that crazy time, we should stand out bravely, not only for clothes, but also for many other right we should have. </p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远征西西里</title>
      <link href="/2023/08/09/%E4%BC%AF%E7%BD%97%E5%A5%94%E5%B0%BC%E6%92%92%E6%88%98%E4%BA%89(%E8%BF%9C%E5%BE%81%E8%A5%BF%E8%A5%BF%E9%87%8C)/"/>
      <url>/2023/08/09/%E4%BC%AF%E7%BD%97%E5%A5%94%E5%B0%BC%E6%92%92%E6%88%98%E4%BA%89(%E8%BF%9C%E5%BE%81%E8%A5%BF%E8%A5%BF%E9%87%8C)/</url>
      
        <content type="html"><![CDATA[<p>十年战争后，雅典人和拉栖代梦人签订了和平协议，但又过了六年多，双方再次公开为敌&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> 意大利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 意大利 </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs笔记</title>
      <link href="/2023/08/07/Nodejs%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/07/Nodejs%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-为什么要学习Nodejs"><a href="#1-为什么要学习Nodejs" class="headerlink" title="1. 为什么要学习Nodejs?"></a>1. 为什么要学习Nodejs?</h2><p>可以让其他人访问我们的编写的网页<br>为后续的框架学习打基础(Vue, React,Angular)</p><h2 id="2-什么是Nodejs"><a href="#2-什么是Nodejs" class="headerlink" title="2. 什么是Nodejs?"></a>2. 什么是Nodejs?</h2><p>通俗来讲：他是一款应用程序，是一款软件，它可以运行JavaScript代码</p><h2 id="3-Node-js的作用？"><a href="#3-Node-js的作用？" class="headerlink" title="3. Node.js的作用？"></a>3. Node.js的作用？</h2><ol><li>开发服务器端应用</li><li>开发工具类应用(Webpack, Vite, Babel)</li><li>开发桌面端应用(VSCode, Figma, Postman &lt;- electron &lt;- Node.js)</li></ol><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li>Node.js中不能使用<code>BOM</code>和<code>DOM</code>的API，可以使用console和定时器API</li><li>Node.js中的顶级对象为<code>global</code>，也可以用<code>globalThis</code>访问顶级对象</li></ol><h1 id="二、模块"><a href="#二、模块" class="headerlink" title="二、模块"></a>二、模块</h1><h2 id="1-Buffer"><a href="#1-Buffer" class="headerlink" title="1. Buffer"></a>1. Buffer</h2><div class="row">    <embed src="/pdfs/NodejsPDF/01_Buffer.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="2-fs模块"><a href="#2-fs模块" class="headerlink" title="2. fs模块"></a>2. fs模块</h2><div class="row">    <embed src="/pdfs/NodejsPDF/02_fs模块.pdf" width="100%" height="550" type="application/pdf"></div><ol><li>写入文件应用场景<br>下载文件<br>安装软件<br>保存程序日志，如 Git<br>编辑器保存文件<br>视频录制</li><li>读取文件应用场景<br>电脑开机<br>程序运行<br>编辑器打开文件<br>查看图片<br>播放视频<br>播放音乐<br>Git 查看日志<br>上传文件<br>查看聊天记录</li></ol><h2 id="3-path模块"><a href="#3-path模块" class="headerlink" title="3. path模块"></a>3. path模块</h2><div class="row">    <embed src="/pdfs/NodejsPDF/03_path模块.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4. HTTP协议"></a>4. HTTP协议</h2><div class="row">    <embed src="/pdfs/NodejsPDF/04_HTTP协议.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crawler学习记录</title>
      <link href="/2023/08/07/crawler/"/>
      <url>/2023/08/07/crawler/</url>
      
        <content type="html"><![CDATA[<ol><li>解决python多版本切换问题<br>Anaconda环境的 创建、激活、退出、删除 <a href="https://blog.csdn.net/msq16021/article/details/118992379">https://blog.csdn.net/msq16021/article/details/118992379</a></li><li>PackagesNotFoundError: The following packages are not available from current channels:<br><a href="https://stackoverflow.com/questions/48493505/packagesnotfounderror-the-following-packages-are-not-available-from-current-cha">https://stackoverflow.com/questions/48493505/packagesnotfounderror-the-following-packages-are-not-available-from-current-cha</a></li><li>59为什么要用json</li><li>为什么百度搜索会触发安全卫士，怎么破解</li><li>为什么百度开发模式找不到name那些参数</li><li>总的来说，GET 请求用于获取数据，参数附加在 URL 中，适合传输少量非敏感信息；而 POST 请求用于提交数据，参数包含在请求体中，适合传输大量或敏感信息。根据具体的需求和情况选择合适的请求方法</li><li>065试试能不能登陆豆瓣，063试试能不能获取虎扑和leetcode QQ空间</li></ol><p>现在大概了解了爬虫的原理，需要再去学习抖音的反爬机制，<del>现在找到的所有的方法都过时了</del>，用那些方法找不出视频在源码的中位置，可能需要逆向相关知识</p><h2 id="关于阿里系cookie验证"><a href="#关于阿里系cookie验证" class="headerlink" title="关于阿里系cookie验证"></a>关于阿里系cookie验证</h2><p>写一个debugger注入程序去屏蔽debugger程序执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AAA = Function.prototype.constructor;</span><br><span class="line">Function.prototype.constructor = function(a) &#123;</span><br><span class="line">    if(a == &#x27;debugger&#x27;) &#123;</span><br><span class="line">        return function () &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return AAA(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爬虫随记"><a href="#爬虫随记" class="headerlink" title="爬虫随记"></a>爬虫随记</h2><p>URL：<a href="https://www.baidu.com/s?wd=alex">https://www.baidu.com/s?wd=alex</a><br>协议:&#x2F;&#x2F;域名(端口)&#x2F;路径&#x2F;xxx&#x2F;yyy?查询参数<br>浏览器向服务器发请求，页面上点点点，本质是根据你的行为组装好了http格式的请求<br>请求协议更重要一点，模拟浏览器向服务器发送请求，要抓住请求协议的格式<br>请求首行，请求头，请求体</p><ul><li>请求方式：POST(数据放在请求体)，GET(数据放在参数里，地址栏) </li><li>请求路径和参数：</li><li>请求协议<br>响应首行，响应头，响应体</li></ul><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><p>在Python中,async和await关键字用于定义和使用异步函数。它们的作用如下:</p><p>async 关键字:</p><p>用于定义一个异步函数。<br>当一个函数被定义为async函数时,它可以使用await关键字来调用其他异步函数。<br>async函数返回一个asyncio.Future对象,它可以被await关键字等待,直到函数执行完毕并返回。<br>await 关键字:</p><p>只能在async函数内部使用。<br>用于暂停当前函数的执行,直到被await的异步操作完成。<br>这样可以确保程序不会被阻塞,而是可以在其他任务中执行,提高应用程序的并发性和响应性。<br>例如,在上述代码中:</p><p>python<br>复制<br>async def search(self) -&gt; None:<br>    # …<br>    search_info &#x3D; await self.dy_client.search_info_by_keyword(<br>        # …<br>    )<br>    # …<br>search函数被定义为async函数,因此它可以使用await关键字调用其他异步函数,如dy_client.search_info_by_keyword。<br>search_info &#x3D; await self.dy_client.search_info_by_keyword(…) 这行代码会暂停search函数的执行,直到search_info_by_keyword函数执行完毕并返回结果。<br>这样可以避免同步阻塞,让程序可以在其他任务中继续执行,提高整体的并发性和响应性。<br>总之,async和await是Python中实现异步编程的关键机制。async用于定义异步函数,await用于调用和等待异步操作的完成。合理使用这两个关键字可以大大提高程序的性能和响应能力。</p><h3 id="1-协程"><a href="#1-协程" class="headerlink" title="1. 协程"></a>1. 协程</h3><p>协程不是计算机提供，程序员人为创造。<br>通过一个线程实现代码块相互切换执行。<br>实现协程方法：</p><ul><li>greenlet，早期模块</li><li>yield关键字</li><li>asyncio装饰器(py3.4) 什么是装饰器？</li><li>async, await关键字(py3.5) 推荐</li></ul><h3 id="asyncio模块异步编程；"><a href="#asyncio模块异步编程；" class="headerlink" title="asyncio模块异步编程；"></a>asyncio模块异步编程；</h3><h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><h2 id="MediaCrawler"><a href="#MediaCrawler" class="headerlink" title="MediaCrawler"></a>MediaCrawler</h2><p>指令：python main.py –platform dy –type search –keywords 赵丽颖</p>]]></content>
      
      
      <categories>
          
          <category> Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crawler </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分枝限界法</title>
      <link href="/2023/08/05/leetcode(%E5%88%86%E6%9E%9D%E9%99%90%E7%95%8C%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E5%88%86%E6%9E%9D%E9%99%90%E7%95%8C%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 分枝限界法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治法</title>
      <link href="/2023/08/05/leetcode(%E5%88%86%E6%B2%BB%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E5%88%86%E6%B2%BB%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 分治法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2023/08/05/leetcode(%E4%BA%8C%E5%8F%89%E6%A0%91)/"/>
      <url>/2023/08/05/leetcode(%E4%BA%8C%E5%8F%89%E6%A0%91)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/08/05/leetcode(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/"/>
      <url>/2023/08/05/leetcode(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/</url>
      
        <content type="html"><![CDATA[<ol><li>确定dp数组下标含义 eg: 分拆数字i，可以得到的最大乘积为dp[i];</li><li>递推公式 eg: dp[i] &#x3D; max(dp[i], (i - j) * j, dp[i - j] * j);</li><li>初始化 eg: dp[2] &#x3D; 1;</li><li>遍历顺序 eg: 从前向后遍历就可以;</li><li>推导结果</li></ol><h1 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343. Integer Break"></a>343. Integer Break</h1><p>新知：max()只能比较两个数的值</p><h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h1><p>疑惑：</p><ul><li>递推公式怎么写？如果出现 3，-1，-1，9的情况， 阁下应该如何应对呢？</li><li>抛弃了前面的元素，重新开始算的情况是怎么样的？对于每一个i，无非只有两种情况：dp[i]&#x3D;max(nums[i]+dp[i+1],nums[i])<br>心得：</li><li>注意变量名不要和已经存在的函数名撞车</li><li>注意确定dp数组下标含义以后，要严格按照那个来思考问题。 这样就不会出现第一个疑惑</li></ul><h1 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a>54. Spiral Matrix</h1>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2023/08/05/leetcode(%E5%9B%BE%E7%AE%97%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E5%9B%BE%E7%AE%97%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心法</title>
      <link href="/2023/08/05/leetcode(%E8%B4%AA%E5%BF%83%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E8%B4%AA%E5%BF%83%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 贪心法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛮力法</title>
      <link href="/2023/08/05/leetcode(%E8%9B%AE%E5%8A%9B%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E8%9B%AE%E5%8A%9B%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 蛮力法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归法</title>
      <link href="/2023/08/05/leetcode(%E9%80%92%E5%BD%92%E6%B3%95)/"/>
      <url>/2023/08/05/leetcode(%E9%80%92%E5%BD%92%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 递归法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2023/08/03/MybatisPlus/"/>
      <url>/2023/08/03/MybatisPlus/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/relationship-with-mybatis.png" alt="img"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4.框架结构"></a>4.框架结构</h2><img src="https://baomidou.com/img/mybatis-plus-framework.jpg" alt="framework" style="zoom:50%;" /><h2 id="5-官方地址"><a href="#5-官方地址" class="headerlink" title="5.官方地址"></a>5.官方地址</h2><blockquote><p><strong>官方网站：</strong><a href="https://baomidou.com/">https://baomidou.com/</a></p><p><strong>官方文档：</strong><a href="https://baomidou.com/pages/24112f/">https://baomidou.com/pages/24112f/</a></p></blockquote><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><ul><li><strong>IDE：IDEA 2019.3.5</strong></li><li><strong>JDK：JDK8+</strong></li><li><strong>构建工具：Maven 3.5.4</strong></li><li><strong>MySQL：MySQL 8.0.24</strong></li><li><strong>Navicat：Navicat Premium 15</strong></li><li><strong>Spring Boot：2.6.7</strong></li><li><strong>MyBatis-Plus：3.5.1</strong></li></ul><h2 id="2-建库建表"><a href="#2-建库建表" class="headerlink" title="2.建库建表"></a>2.建库建表</h2><ul><li><p><strong>打开Navicat运行以下SQL脚本进行建库建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>; </span><br><span class="line">use `mybatis_plus`; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` ( </span><br><span class="line">    `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>, </span><br><span class="line">    `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li><li><p><strong>插入几条测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h2><ul><li><p><strong>使用<code>Spring Initializer</code>快速初始化一个 Spring Boot 工程</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519140839640.png" alt="image-20220519140839640" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141335981.png" alt="image-20220519141335981" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141737405.png" alt="image-20220519141737405" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141849937.png" alt="image-20220519141849937" style="zoom:80%;" /></li><li><p><strong>引入<code>MyBatis-Plus</code>的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安装<code>Lombok</code>插件</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519143257305.png" alt="image-20220519143257305" style="zoom:80%;" /></li></ul><h2 id="4-配置编码"><a href="#4-配置编码" class="headerlink" title="4.配置编码"></a>4.配置编码</h2><ul><li><p><strong>配置<code>application.yml</code>文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置连接数据库的信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> &#123;<span class="string">username</span>&#125;</span><br><span class="line">    <span class="attr">password:</span> &#123;<span class="string">password</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;指定Mapper接口所在的包&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusDemoApplication</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(MybatisPlusDemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写实体类 <code>User.java</code>（此处使用了 Lombok 简化代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写 Mapper 包下的 <code>UserMapper</code>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-测试查询"><a href="#5-测试查询" class="headerlink" title="5.测试查询"></a>5.测试查询</h2><ul><li><p><strong>编写一个测试类<code>MyBatisPlusTest.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>控制台打印查询结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519150454211.png" alt="image-20220519150454211"></p></li></ul><h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="1-BaseMapper-lt-T-gt"><a href="#1-BaseMapper-lt-T-gt" class="headerlink" title="1.BaseMapper&lt;T&gt;"></a>1.BaseMapper&lt;T&gt;</h2><blockquote><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为条件构造器</li></ul></blockquote><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，因此我们继承该接口以后可以直接使用。</p><p>本次演示的CRUD操作不包含参数带有条件构造器的方法，关于条件构造器将单独在一个章节进行演示。</p><hr><blockquote><p><strong>BaseMapper中提供的CRUD方法：</strong></p></blockquote><ul><li><p><strong>增加：Insert</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除：Delete</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改：Update</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询：Selete</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-调用Mapper层实现CRUD"><a href="#2-调用Mapper层实现CRUD" class="headerlink" title="2.调用Mapper层实现CRUD"></a>2.调用Mapper层实现CRUD</h2><h3 id="2-1插入"><a href="#2-1插入" class="headerlink" title="2.1插入"></a>2.1插入</h3><hr><blockquote><p><strong>最终执行的结果，所获取的id为1527206783590903810</strong></p><p><strong>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试插入一条数据</span></span><br><span class="line"><span class="comment">  * MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Vz&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;vz@oz6.cn&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;添加成功！&quot;</span> : <span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">    <span class="comment">//1527206783590903810（当前 id 为雪花算法自动生成的id）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;id自动获取&quot;</span> + user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2删除"><a href="#2-2删除" class="headerlink" title="2.2删除"></a>2.2删除</h3><hr><h4 id="a、根据ID删除数据"><a href="#a、根据ID删除数据" class="headerlink" title="a、根据ID删除数据"></a>a、根据ID删除数据</h4><blockquote><p><strong>调用方法：int deleteById(Serializable id);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id删除一条数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1527206783590903810L</span>);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、根据ID批量删除数据"><a href="#b、根据ID批量删除数据" class="headerlink" title="b、根据ID批量删除数据"></a>b、根据ID批量删除数据</h4><blockquote><p><strong>调用方法：int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试通过id批量删除数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">6L</span>,<span class="number">7L</span>,<span class="number">8L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c、根据Map条件删除数据"><a href="#c、根据Map条件删除数据" class="headerlink" title="c、根据Map条件删除数据"></a>c、根据Map条件删除数据</h4><blockquote><p><strong>调用方法：int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 测试根据Map集合中所设置的条件删除数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//当前演示为根据name和age删除数据</span></span><br><span class="line">    <span class="comment">//执行SQL为：DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Vz&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3修改"><a href="#2-3修改" class="headerlink" title="2.3修改"></a>2.3修改</h3><blockquote><p><strong>调用方法：int updateById(@Param(Constants.ENTITY) T entity);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id修改用户信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为： UPDATE user SET name=?, age=?, email=? WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;VzUpdate&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;Vz@sina.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4查询"><a href="#2-4查询" class="headerlink" title="2.4查询"></a>2.4查询</h3><hr><h4 id="a、根据ID查询用户信息"><a href="#a、根据ID查询用户信息" class="headerlink" title="a、根据ID查询用户信息"></a>a、根据ID查询用户信息</h4><blockquote><p><strong>调用方法：T selectById(Serializable id);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id查询用户数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、根据多个ID查询多个用户信息"><a href="#b、根据多个ID查询多个用户信息" class="headerlink" title="b、根据多个ID查询多个用户信息"></a>b、根据多个ID查询多个用户信息</h4><blockquote><p><strong>调用方法：List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据多个id查询用户数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(ids);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c、根据Map条件查询用户信息"><a href="#c、根据Map条件查询用户信息" class="headerlink" title="c、根据Map条件查询用户信息"></a>c、根据Map条件查询用户信息</h4><blockquote><p><strong>调用方法：List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据Map所设置的条件查询用户</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE age = ?</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d、查询所有用户信息"><a href="#d、查询所有用户信息" class="headerlink" title="d、查询所有用户信息"></a>d、查询所有用户信息</h4><blockquote><p><strong>调用方法：List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试查询所有数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-通用Service"><a href="#3-通用Service" class="headerlink" title="3.通用Service"></a>3.通用Service</h2><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装<code>IService</code>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 条件构造器</li></ul></blockquote><p>MyBatis-Plus中有一个接口 **<code>IService</code>**和其实现类 **<code>ServiceImpl</code>**，封装了常见的业务层逻辑，详情查看源码IService和ServiceImpl</p><p>因此我们在使用的时候仅需在自己定义的**<code>Service</code><strong>接口中继承</strong><code>IService</code><strong>接口，在自己的实现类中实现自己的Service并继承</strong><code>ServiceImpl</code>**即可</p><hr><blockquote><p><strong>IService中的CRUD方法</strong></p></blockquote><ul><li><p><strong>增加：Save、SaveOrUpdate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除：Remove</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改：Update</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询：Get、List、Count</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>分页：Page</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-调用Service层操作数据"><a href="#4-调用Service层操作数据" class="headerlink" title="4.调用Service层操作数据"></a>4.调用Service层操作数据</h2><blockquote><p>我们在自己的Service接口中通过继承MyBatis-Plus提供的IService接口，不仅可以获得其提供的CRUD方法，而且还可以使用自身定义的方法。</p></blockquote><ul><li><p><strong>创建<code>UserService</code>并继承<code>IService</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * UserService继承IService模板提供的基础功能 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建<code>UserService</code>的实现类并继承<code>ServiceImpl</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ServiceImpl实现了IService，提供了IService中基础功能的实现 </span></span><br><span class="line"><span class="comment">  * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试查询记录数</strong></p><blockquote><p><strong>调用方法：int count();</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询总记录数</span></span><br><span class="line">    <span class="comment">//执行的SQL为：SELECT COUNT( * ) FROM user</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试批量插入数据</strong></p><blockquote><p><strong>调用方法：boolean saveBatch(Collection<T> entityList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;Vz&quot;</span>+i);</span><br><span class="line">        user.setAge(<span class="number">20</span>+i);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(list);</span><br><span class="line">    System.out.println(b ? <span class="string">&quot;添加成功！&quot;</span> : <span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><blockquote><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p></blockquote><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表，由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致。</p></blockquote><h3 id="1-1引出问题"><a href="#1-1引出问题" class="headerlink" title="1.1引出问题"></a>1.1引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520093844842.png" alt="image-20220520093844842"></p></li><li><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520094126411.png" alt="image-20220520094126411"></p></li></ul><h3 id="1-2解决问题"><a href="#1-2解决问题" class="headerlink" title="1.2解决问题"></a>1.2解决问题</h3><hr><h4 id="a、使用注解解决问题"><a href="#a、使用注解解决问题" class="headerlink" title="a、使用注解解决问题"></a>a、使用注解解决问题</h4><blockquote><p><strong>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、使用全局配置解决问题"><a href="#b、使用全局配置解决问题" class="headerlink" title="b、使用全局配置解决问题"></a>b、使用全局配置解决问题</h4><blockquote><p><strong>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</strong></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p><strong>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</strong></p></blockquote><h3 id="2-1引出问题"><a href="#2-1引出问题" class="headerlink" title="2.1引出问题"></a>2.1引出问题</h3><hr><blockquote><p><strong>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</strong></p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100939157.png" alt="image-20220520100939157"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100715109.png" alt="image-20220520100715109"></p></li><li><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520101317761.png" alt="image-20220520101317761"></p></li></ul><h3 id="2-2解决问题"><a href="#2-2解决问题" class="headerlink" title="2.2解决问题"></a>2.2解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-TableId的value属性"><a href="#2-3-TableId的value属性" class="headerlink" title="2.3@TableId的value属性"></a>2.3@TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId(&quot;uid&quot;)</code>或<code>@TableId(value=&quot;uid&quot;)</code></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520103030977.png" alt="image-20220520103030977"></p><h3 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4@TableId的type属性"></a>2.4@TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IdType.ASSIGN_ID（默认）</td><td align="center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td align="center">IdType.AUTO</td><td align="center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#配置mp的主键策略为自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h2 id="3-TbaleField"><a href="#3-TbaleField" class="headerlink" title="3.@TbaleField"></a>3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="3-1情况一"><a href="#3-1情况一" class="headerlink" title="3.1情况一"></a>3.1情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="3-2情况二"><a href="#3-2情况二" class="headerlink" title="3.2情况二"></a>3.2情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;uid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><h3 id="4-1逻辑删除"><a href="#4-1逻辑删除" class="headerlink" title="4.1逻辑删除"></a>4.1逻辑删除</h3><hr><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="4-2实现逻辑删除"><a href="#4-2实现逻辑删除" class="headerlink" title="4.2实现逻辑删除"></a>4.2实现逻辑删除</h3><hr><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134529809.png" alt="image-20220520134529809"></p></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134636112.png" alt="image-20220520134636112"></p></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1527472864163348482L</span>);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520135637388.png" alt="image-20220520135637388"></p></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520140036445.png" alt="image-20220520140036445"></p></li></ul><h1 id="五、条件构造器"><a href="#五、条件构造器" class="headerlink" title="五、条件构造器"></a>五、条件构造器</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521092812125.png" alt="image-20220521092812125"></p><ul><li><p><code>Wrapper</code> ： 条件构造抽象类，最顶端父类</p><ul><li><p><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</p><ul><li><p><code>QueryWrapper </code>： 查询条件封装</p></li><li><p><code>UpdateWrapper </code>： Update 条件封装</p></li><li><p><code>AbstractLambdaWrapper </code>： 使用Lambda 语法</p><ul><li><p><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</p></li><li><p><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</p></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><ul><li><p><strong>组装查询条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>).isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装排序条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>).orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装删除条件</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted&#x3D;1 WHERE is_deleted&#x3D;0 AND (email IS NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//删除邮箱地址为null的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>条件的优先级</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET user_name&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).or().isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Oz&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@oz6.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET username&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Vz7797&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@ss8o.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装select子句</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted&#x3D;0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户的用户名、年龄、邮箱信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现子查询</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (uid IN (select uid from t_user where uid &lt;&#x3D; 100))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询id小于等于100的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;uid&quot;</span>, <span class="string">&quot;select uid from t_user where uid &lt;= 100&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><blockquote><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).and( i -&gt; i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>)).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;svip@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h2><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><ul><li><p><strong>思路一</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (user_name LIKE ? AND age &lt;&#x3D; ?)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">        <span class="comment">//isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span></span><br><span class="line">        queryWrapper.like(<span class="string">&quot;user_name&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ageBegin != <span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ageEnd != <span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>思路二</strong></p><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), <span class="string">&quot;user_name&quot;</span>, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">        .le(ageEnd != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><blockquote><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">        .le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><blockquote><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i -&gt; i.gt(User::getAge, <span class="number">20</span>).or().isNull(User::getEmail));</span><br><span class="line">    updateWrapper.set(User::getName, <span class="string">&quot;小黑&quot;</span>).set(User::getEmail,<span class="string">&quot;abc@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、常用插件"><a href="#六、常用插件" class="headerlink" title="六、常用插件"></a>六、常用插件</h1><h2 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h2><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><ul><li><p><strong>添加配置类<code>MyBatisPlusConfig</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new Page()中的两个参数分别是当前页码，每页显示数量</span></span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>), <span class="literal">null</span>);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-自定义分页"><a href="#2-自定义分页" class="headerlink" title="2.自定义分页"></a>2.自定义分页</h2><blockquote><p>上面调用的是MyBatis-Plus提供的带有分页的方法，那么我们自己定义的方法如何实现分页呢？</p></blockquote><ul><li><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据年龄查询用户列表，分页显示 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> age 年龄 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page,<span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id,username as name,age,email from t_user where age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageVo</span><span class="params">()</span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPageVo(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;User&gt;(<span class="number">1</span>,<span class="number">2</span>), <span class="number">20</span>);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><blockquote><p><strong>作用：当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h3 id="3-1场景"><a href="#3-1场景" class="headerlink" title="3.1场景"></a>3.1场景</h3><hr><ul><li>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</li><li>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</li><li>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</li></ul><h3 id="3-2乐观锁与悲观锁"><a href="#3-2乐观锁与悲观锁" class="headerlink" title="3.2乐观锁与悲观锁"></a>3.2乐观锁与悲观锁</h3><hr><ul><li>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</li><li>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</li></ul><h3 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h3><hr><ul><li><p><strong>数据库中增加商品表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product ( </span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>, </span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>, </span><br><span class="line">    VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一条数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一个实体类<code>Product</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一个Mapper接口<code>ProductMapper</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.小李获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productLi.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.小王获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productWang.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.小李修改商品价格+50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.小王修改商品价格-30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板获取的商品价格为：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521225803162.png" alt="image-20220521225803162"></p></li></ul><h3 id="3-4乐观锁解决问题"><a href="#3-4乐观锁解决问题" class="headerlink" title="3.4乐观锁解决问题"></a>3.4乐观锁解决问题</h3><hr><ul><li><p><strong>实体类<code>version</code>字段添加注解<code>@Version</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加乐观锁插件配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    <span class="comment">//添加分页插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="comment">//添加乐观锁插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>再次执行测试方法</strong></p><blockquote><p>小李查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小王查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小李修改商品价格，自动将version+1</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>最终，小王修改失败，查询价格：150</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p></blockquote></li><li><p><strong>优化执行流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.小李获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productLi.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.小王获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productWang.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.小李修改商品价格+50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.小王修改商品价格-30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//操作失败，重试</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productNew</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productNew.setPrice(productNew.getPrice()-<span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(productNew);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板获取的商品价格为：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521230448577.png" alt="image-20220521230448577"></p></li></ul><h1 id="七、通用枚举"><a href="#七、通用枚举" class="headerlink" title="七、通用枚举"></a>七、通用枚举</h1><blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><ul><li><p><strong>数据库表添加字段<code>sex</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521231317777.png" alt="image-20220521231317777"></p></li><li><p><strong>创建通用枚举类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">//将注解所标识的属性的值存储到数据库中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>User实体类中添加属性sex</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> isDeleted;  <span class="comment">//逻辑删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置扫描通用枚举</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#指定mapper文件所在的地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="string">off</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#配置mp的主键策略为自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">  <span class="comment">#配置类型别名所对应的包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.mybatisplus.pojo</span></span><br><span class="line">  <span class="comment"># 扫描通用枚举的包</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.atguigu.mybatisplus.enums</span></span><br></pre></td></tr></table></figure></li><li><p><strong>执行测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">33</span>);</span><br><span class="line">    user.setSex(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="八、多数据源"><a href="#八、多数据源" class="headerlink" title="八、多数据源"></a>八、多数据源</h1><blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p></blockquote><p>场景说明：</p><p>我们创建两个库，分别为：<code>mybatis_plus</code>（以前的库不动）与<code>mybatis_plus_1</code>（新建），将mybatis_plus库的<code>product</code>表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1-创建数据库及表"><a href="#1-创建数据库及表" class="headerlink" title="1.创建数据库及表"></a>1.创建数据库及表</h2><ul><li><p><strong>创建数据库<code>mybatis_plus_1</code>和表&#96;product</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus_1` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line">use `mybatis_plus_1`; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product ( </span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>, </span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>, </span><br><span class="line">    version <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>删除<code>mybatis_plus</code>库中的<code>product</code>表</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mybatis_plus; </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> product;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-新建工程引入依赖"><a href="#2-新建工程引入依赖" class="headerlink" title="2.新建工程引入依赖"></a>2.新建工程引入依赖</h2><blockquote><p><strong>自行新建一个Spring Boot工程并选择MySQL驱动及Lombok依赖</strong></p></blockquote><p><strong>引入MyBaits-Plus的依赖及多数据源的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">132537</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">132537</span></span><br></pre></td></tr></table></figure><h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><ul><li><p>新建一个<code>User</code>实体类（如果数据库表名有t_前缀记得配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建一个实体类<code>Product</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-创建Mapper及Service"><a href="#5-创建Mapper及Service" class="headerlink" title="5.创建Mapper及Service"></a>5.创建Mapper及Service</h2><ul><li><p>新建接口<code>UserMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建接口<code>ProductMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建Service接口<code>UserService</code>指定操作的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定操作的数据源，master为user表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建Service接口<code>ProductService</code>指定操作的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>自行建立Service的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-编写测试方法"><a href="#6-编写测试方法" class="headerlink" title="6.编写测试方法"></a>6.编写测试方法</h2><blockquote><p><strong>记得在启动类中添加注解<code>@MapperScan()</code></strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDatasourceApplicationTests</span> &#123;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  UserService userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  ProductService productService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">1L</span>);</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;User = &quot;</span> + user);</span><br><span class="line">    System.out.println(<span class="string">&quot;Product = &quot;</span> + product);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522113049945.png" alt="image-20220522113049945"></p><h1 id="九、MyBatisX插件"><a href="#九、MyBatisX插件" class="headerlink" title="九、MyBatisX插件"></a>九、MyBatisX插件</h1><blockquote><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率。</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="1-安装MyBatisX插件"><a href="#1-安装MyBatisX插件" class="headerlink" title="1.安装MyBatisX插件"></a>1.安装MyBatisX插件</h2><blockquote><p><strong>打开IDEA，File-&gt; Setteings-&gt;Plugins-&gt;MyBatisX，搜索栏搜索MyBatisX然后安装。</strong></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522115718361.png" alt="image-20220522115718361"></p><h2 id="2-快速生成代码"><a href="#2-快速生成代码" class="headerlink" title="2.快速生成代码"></a>2.快速生成代码</h2><ul><li><p>新建一个Spring Boot项目引入依赖（创建工程时记得勾选lombok及mysql驱动）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置数据源信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">132537</span></span><br></pre></td></tr></table></figure></li><li><p>在IDEA中与数据库建立链接</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522120758740.png" alt="image-20220522120758740"></p></li><li><p>填写数据库信息并保存</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121434468.png" alt="image-20220522121434468"></p></li><li><p>找到我们需要生成的表点击右键</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121613909.png" alt="image-20220522121613909"></p></li><li><p>填写完信息以后下一步</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122127649.png" alt="image-20220522122127649"></p></li><li><p>继续填写信息</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122525598.png" alt="image-20220522122525598"></p></li><li><p><strong>大功告成（真特么好用yyds）</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122612334.png" alt="image-20220522122612334"></p></li></ul><h2 id="3-快速生成CRUD"><a href="#3-快速生成CRUD" class="headerlink" title="3.快速生成CRUD"></a>3.快速生成CRUD</h2><blockquote><p>MyBaitsX可以根据我们在Mapper接口中输入的方法名快速帮我们生成对应的sql语句</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123143852.png" alt="image-20220522123143852"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123202310.png" alt="image-20220522123202310"></p><h1 id="十、致谢"><a href="#十、致谢" class="headerlink" title="十、致谢"></a>十、致谢</h1><p>感谢尚硅谷杨博超老师：<a href="https://www.bilibili.com/video/BV12R4y157Be?p=1">https://www.bilibili.com/video/BV12R4y157Be?p=1</a></p><p>感谢MyBatis-Plus作者苞米豆：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>感谢自己又坚持学习了一门课程：<a href="https://www.oz6.cn/">https://www.oz6.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> EasyPan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/08/02/MyBatis%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/02/MyBatis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li></ul><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul><li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li><li><img src="/images/Resources/MyBatis%E4%B8%8B%E8%BD%BD.png"></li></ul><h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul><li>JDBC  <ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  </li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高  </li><li>程序中的长难复杂 SQL 需要绕过框架  </li><li>内部自动生产的 SQL，不容易做特殊优化  </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色  </li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IDE：idea 2019.2  </li><li>构建工具：maven 3.5.4  </li><li>MySQL版本：MySQL 5.7  </li><li>MyBatis版本：MyBatis 3.5.7</li></ul><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul><li>打包方式：jar</li><li>引入依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">  <span class="comment">/**  </span></span><br><span class="line"><span class="comment">  * 添加用户信息  </span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  <ul><li>对象：Java的实体类对象  </li><li>关系：关系型数据库  </li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><ul><li>映射文件的命名规则<ul><li>表所对应的实体类的类名+Mapper.xml</li><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li></ul></li><li>MyBatis中可以面向接口操作数据，要保证两个一致<ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">    insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">      <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol><li>加入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>加入log4j的配置文件<ul><li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">      default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">          id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">              type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">              type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">              type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">              type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">              type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">              type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">              type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">      1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">      2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><img src="/images/Resources/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png"></li></ul><h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="/images/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png"><br><img src="/images/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png"></p><h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol><li>添加 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">  insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>删除 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">       delete from t_user where id = 6</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">       update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>查询一个实体类对象 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>查询集合 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中<ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</li><li>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">  insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">  mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul><li>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 <ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建议分成两种情况进行处理<ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul><h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">  select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  结果：</span></span><br><span class="line"><span class="comment">  [&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">  &#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">  &#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  结果：</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">  1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">  2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">  3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">  select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li></ul><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">  delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul><li>只能使用${}，因为表名不能加单引号<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li>使用场景<ul><li>t_clazz(clazz_id,clazz_name)  </li><li>t_student(student_id,student_name,clazz_id)</li></ul><ol><li>添加班级信息  </li><li>获取新添加的班级的id  </li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol></li><li>在mapper.xml中设置两个属性<ul><li>useGeneratedKeys：设置使用自增的主键</li></ul><ul><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">  mapper.insertUser(user);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">  <span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul><li>resultMap：设置自定义映射  <ul><li>属性：  <ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型</li></ul></li><li>子标签：  <ul><li>id：设置主键的映射关系  </li><li>result：设置普通字段的映射关系  </li><li>子标签属性：  <ul><li>property：设置映射关系中实体类中的属性名  </li><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  <ol><li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> Integer eid;  </span><br><span class="line">  <span class="keyword">private</span> String empName;  </span><br><span class="line">  <span class="keyword">private</span> Integer age;  </span><br><span class="line">  <span class="keyword">private</span> String sex;  </span><br><span class="line">  <span class="keyword">private</span> String email;  </span><br><span class="line">  <span class="keyword">private</span> Dept dept;</span><br><span class="line">  <span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">  <span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  </li><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li></ul></li><li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">  System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭延迟加载，两条SQL语句都运行了<img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png"></li><li>开启延迟加载，只运行获取emp的SQL语句<br><img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">  System.out.println(emp.getEmpName());</span><br><span class="line">  System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">  System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png"></li><li>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code><ul><li>这个恒成立条件并不会影响查询的结果</li><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时<ul><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp where 1=1</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and emp_name = #&#123;empName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and age = #&#123;age&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and sex = #&#123;sex&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and email = #&#123;email&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：<ul><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </li><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      emp_name = #&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and age = #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and sex = #&#123;sex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>注意：where标签不能去掉条件后多余的and&#x2F;or  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">  age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容  </li><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      emp_name = #&#123;empName&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      age = #&#123;age&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      sex = #&#123;sex&#125; or</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">  System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li></ul><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        emp_name = #&#123;empName&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        age = #&#123;age&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        sex = #&#123;sex&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        email = #&#123;email&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        did = 1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">  System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li>属性：  <ul><li>collection：设置要循环的数组或集合  </li><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li>批量删除  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">  delete from t_emp where eid in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;eid&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/images/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li><li>批量添加  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp values</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">  <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">  <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">  <span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/images/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li></ul><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引用sql片段：<code>&lt;include&gt;</code>标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul><li>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </li><li>使一级缓存失效的四种情况：  <ol><li>不同的SqlSession对应不同的一级缓存  </li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul><li>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </li><li>二级缓存开启的条件<ol><li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<cache /></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性</li><li>eviction属性：缓存回收策略  <ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li></ul></li><li>size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly属性：只读，true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul><li>名字必须叫<code>ehcache.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul><li>在xxxMapper.xml文件中设置二级缓存类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  <ul><li>Java实体类  </li><li>Mapper接口  </li><li>Mapper映射文件</li></ul></li></ul><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul><li>文件名必须是：<code>generatorConfig.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul><li><img src="/images/Resources/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误<ul><li>dependency中的驱动<img src="/images/Resources/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>mybatis-generator-maven-plugin插件中的驱动<img src="/images/Resources/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="/images/Resources/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></li></ul><h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="/images/Resources/example%E7%9A%84%E6%96%B9%E6%B3%95.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">  <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">  <span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">  example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">//或者did不为空</span></span><br><span class="line">  example.or().andDidIsNotNull();</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">  emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li></ul><h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null<ul><li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/images/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段<ul><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/images/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li></ul></li></ul><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="/images/Resources/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能<ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">  <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">  PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">  emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/images/Resources/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">  <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">  Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">  System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分页相关数据：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul><li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据<ul><li>list：分页之后的数据  </li><li>navigatePages：导航分页的页码数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">  <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">  PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">  System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>分页相关数据：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure></li><li>其中list中的数据等同于方法一中直接输出的page数据</li></ul><h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数  </li><li>size：当前页显示的真实条数  </li><li>total：总记录数  </li><li>pages：总页数  </li><li>prePage：上一页的页码  </li><li>nextPage：下一页的页码</li><li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页  </li><li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页  </li><li>navigatePages：导航分页的页码数  </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
      
      
      <categories>
          
          <category> EasyPan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easypan实战项目</title>
      <link href="/2023/07/23/easypan/"/>
      <url>/2023/07/23/easypan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Easypan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Easypan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>口语表达</title>
      <link href="/2023/07/19/SE2_research/"/>
      <url>/2023/07/19/SE2_research/</url>
      
        <content type="html"><![CDATA[<ol><li>Introduction<br>microservices: 每个服务在其进程中运行并使用轻量级机制进行通信，不同服务之间的通信需要时间<br>Mainstream approaches to performance assessment：passive monitoring of the response time and resource utilization.</li></ol><p>This paper: enabling <strong>automated decision gates</strong> in performance testing of microservices that allow requirements traceability.</p><p>Methodology: integrating load testing and Bayesian inference</p><ol><li>目标操作的设计时分析：multiple user categories<br>analysis of the operational setting</li><li>通过负载测试和推断进行性能模型学习<br>指定一些关于SUT的先验知识，自动执行多个负载测试，并逐步学习系统行为。在此过程中，逐步完善DTMC模型，最后得到一个CTMC模型（第三阶段的输入）</li><li>验证要求并计算配置得分(PRISM)<br>verification<blockquote><p>什么是Discrete Time Markov Chain(DTMC): 状态空间中经过<strong>从一个状态到另一个状态的转换的随机过程</strong>。 该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关</p></blockquote></li></ol><blockquote><p>CTMC: 连续时间的马尔科夫链，其中状态转移发生的速率是随机的，并且每个状态转移的速率可以用指数分布来描述。CTMC模型可以用于描述系统中不同组件之间的交互，并且可以使用概率模型检查器对其进行形式化验证。</p></blockquote><p>key contributions</p><ol><li><p>一种新颖的方法论，通过<strong>自动化负载测试、贝叶斯推理和概率模型检查</strong>，在不同部署方案下对微服务系统进行模型学习和验证。</p></li><li><p>在代表性微服务系统基准测试中评估我们的方法论，指出其优点、成本和有效性威胁。</p></li></ol><blockquote><p>steady-state operator S: 停留在特定状态集的概率<br>transient operator P: 发生特定路径的概率</p></blockquote><blockquote><p>sock shop 是本论文要测试的系统</p></blockquote><p>workload intensity:  the number of (active) concurrent users in the SUT.<br>usage profile:  different groups of users</p><p>matrix C &#x3D; (cij) defining the transition counts for each pair of services (i, j).<br>pij: As an example, the transition probability p3,7 (i.e., getCatalogue → getItem) is equal to P(getCatalogue → getItem | buyer) · P(buyer)</p><p>Inference process<br>Termination condition</p><h1 id="Locust"><a href="#Locust" class="headerlink" title="Locust"></a>Locust</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><p>-P PORT被测系统的端口号<br>-f LOCUSTFILE 脚本文件<br>。。。</p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><h3 id="常用脚本增强技术"><a href="#常用脚本增强技术" class="headerlink" title="常用脚本增强技术"></a>常用脚本增强技术</h3><ol><li>关联：解决请求之间的依赖关系，将脚本中某些写死的数据，变成来自服务器的动态的每次不一样的数据<br>先存：通过一定的手段将服务器返回的数据进行捕获并且保存<br>后用：在需要关联的地方，调用保存的数据<br>正则表达式&#x2F;jsonpath&#x2F;lxml<br>参数化：<br>断点（检查点）<br>思考时间(等待时间)<br>事务(task)<br>集合点</li></ol>]]></content>
      
      
      <categories>
          
          <category> POLIMI </category>
          
          <category> SE2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> STUDY </tag>
            
            <tag> SE2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/07/11/leetcode(%E6%95%B0%E7%BB%84)/"/>
      <url>/2023/07/11/leetcode(%E6%95%B0%E7%BB%84)/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><a href="https://algo.itcharge.cn/01.Array/04.Array-Two-Pointers/01.Array-Two-Pointers/"><span style="color:red;font-size:12px;font-family:方正准圆简体常规;">### 数组双指针</span> </a></p><h4 id="1-对撞指针适用范围"><a href="#1-对撞指针适用范围" class="headerlink" title="1. 对撞指针适用范围"></a>1. 对撞指针适用范围</h4><p>对撞指针一般用来解决有序数组或者字符串问题：</p><ul><li>查找有序数组中满足某些约束条件的一组元素问题：比如二分查找、数字之和等问题。</li><li>字符串反转问题：反转字符串、回文数、颠倒二进制等问题。</li></ul><h4 id="2-快慢指针适用范围"><a href="#2-快慢指针适用范围" class="headerlink" title="2. 快慢指针适用范围"></a>2. 快慢指针适用范围</h4><p>快慢指针一般用于处理数组中的移动、删除元素问题，或者链表中的判断是否有环、长度问题。<br>26. Remove Duplicates from Sorted Array 加点特殊情况，优化时间复杂度<br>80. </p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li><p>关于字符串(string s)：<br><code>for(int i = 0; i &lt; s.length(); i++)</code> (C++和Java都能这么写)<br><code>s[i]; s.charAt(i);</code></p></li><li><p>关于vector的遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : nums) &#123;</span><br><span class="line">  nums[i]...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于vector的声明<br><code>return vector&lt;int&gt;&#123;l + 1, r + 1&#125;;</code></p></li><li><p>关于大小写字母和非数字字母的字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">isalnum</span> <span class="params">(字符)</span></span>; <span class="comment">//检查字符是否为字母数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isalpha</span><span class="params">()</span>  <span class="comment">//Check if character is alphabetic (function)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdigit</span><span class="params">()</span>  <span class="comment">//Check if character is decimal digit (function)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdigit</span> <span class="params">( <span class="type">int</span> c )</span></span>; <span class="comment">//Check if character is decimal digit</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tolower</span><span class="params">()</span> <span class="comment">//function in C++ converts a given character to lowercase.</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">toupper</span><span class="params">()</span> <span class="comment">//function in C++ converts a given character to uppercase. It is defined in the cctype header file.</span></span></span><br></pre></td></tr></table></figure></li><li><p>当你只想让异常值出现一次的时候，你就单写一个不处理异常值的简单程序，再写一个处理异常值的复杂程序，把简单程序嵌套到复杂程序中</p></li></ol><h3 id="1920-Build-Array-from-Permutation"><a href="#1920-Build-Array-from-Permutation" class="headerlink" title="1920. Build Array from Permutation"></a>1920. Build Array from Permutation</h3><p><b><span style="color:rgb(255, 0, 255);">vector相关的一些成员</span></b><br><a href="https://cplusplus.com/reference/vector/vector/">链接</a></p><ol><li>Capacity<br>size() 返回数组的长度<br>max_size() 返回最大程度<br>resize() 改变长度</li><li>Modifiers<br>push_back(): 在末尾增加元素<br>pop_back(): 删除最后一个元素<br>reverse(): 翻转整个数组</li><li>构造函数</li></ol><ul><li>vector<int> first;</li><li>vector<int> second(4,100) &#x2F;&#x2F;four ints with value 100</li><li>vector<int> third(second.begin(), second.end());&#x2F;&#x2F;iterating through the second</li><li>vector<int> fourth(third); &#x2F;&#x2F;a copy of the third</li><li>int ans[]&#x3D;new int[nums.length];</li></ul><ol start="4"><li>Iterators<br>begin()<br>end()<br>frontAccess first element (public member function)<br>backAccess last element (public member function)<blockquote></blockquote>这道题可以新建一个数组存放新数据，也可以原地修改(类似高低位的思想)<br>题目中提到<code>nums[]</code>的元素的范围是0到999，所以我们可以将<code>nums[nums[i]]</code>中的元素取模再乘以1000加在<code>nums[i]</code>上。这时数组里保存的元素除以1000得到的除数就是我们想到的答案，余数是原值。</li></ol><h3 id="1929-Concatenation-of-Array"><a href="#1929-Concatenation-of-Array" class="headerlink" title="1929. Concatenation of Array"></a>1929. Concatenation of Array</h3><p>要注意不要忘了<code>*</code></p><h3 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a>31. Next Permutation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。</span><br><span class="line"></span><br><span class="line">同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。</span><br><span class="line">具体地，我们这样描述该算法，对于长度为 n 的排列 a：</span><br><span class="line"></span><br><span class="line">首先从后向前查找第一个顺序对 (i,i+1)，满足 a[i]&lt;a[i+1]。这样「较小数」即为 a[i]。此时 [i+1,n) 必然是下降序列。</span><br><span class="line"></span><br><span class="line">如果找到了顺序对，那么在区间 [i+1,n) 中从后向前查找第一个元素 jjj 满足 a[i]&lt;a[j]。这样「较大数」即为 a[j]。</span><br><span class="line"></span><br><span class="line">交换 a[i] 与 a[j]，此时可以证明区间 [i+1,n) 必为降序。我们可以直接使用双指针反转区间 [i+1,n) 使其变为升序，而无需对该区间进行排序</span><br></pre></td></tr></table></figure><p><strong>现在的问题是没注意到【3，2，1】的情况</strong></p><h3 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a>34. Find First and Last Position of Element in Sorted Array</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求时间复杂度是O(logn), 用二分查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 如果没有找到，则返回[<span class="number">-1</span>, <span class="number">-1</span>]，那么我们可以在一开始初始化的时候就把result[<span class="number">2</span>]设置成[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line"><span class="number">2.</span> 关于二分查找要注意的一些点：</span><br><span class="line">- high要初始化为nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">- 最后关于mid的值：最后的截止条件是left &gt; right，此时可能没有找到target，那么此时nums[mid] != target;</span><br><span class="line">- 如果没找到: <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">-</span><br><span class="line"><span class="comment">//参数必须是begin()和end()</span></span><br><span class="line"><span class="built_in">lower_bound</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(), target); <span class="comment">//找到的是第一个等于或大于 target 的位置</span></span><br><span class="line"><span class="built_in">upper_bound</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(), target); <span class="comment">//找到的是第一个大于 target 的位置</span></span><br></pre></td></tr></table></figure><h3 id="278-First-Bad-Version-二分查找相似题目"><a href="#278-First-Bad-Version-二分查找相似题目" class="headerlink" title="278. First Bad Version(二分查找相似题目)"></a>278. First Bad Version(二分查找相似题目)</h3><p>这道题的亮点在于要找到下标最小的target，在每次循环的时候，如果mid是不合格产品，就把high设为mid, 如果mid是合格产品，就把low设为mid+1</p><h3 id="2089-Find-Target-Indices-After-Sorting-Array-二分查找相似题目"><a href="#2089-Find-Target-Indices-After-Sorting-Array-二分查找相似题目" class="headerlink" title="2089. Find Target Indices After Sorting Array(二分查找相似题目)"></a>2089. Find Target Indices After Sorting Array(二分查找相似题目)</h3><p>这道题和34题极为相似，但用34题的解法效率不高，尤其是空间复杂度，明天看看怎么改善。</p><h3 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a>33. Search in Rotated Sorted Array</h3><p>要求time complexity为O(logn), 所以采用二分查找法。<br>二分查找法要先设置low,high,mid，然后接一个while循环，先判断nums[mid]是不是要找的值，如果不是,调整low和high，计算出新的mid</p><h3 id="36-Valid-Sudoku"><a href="#36-Valid-Sudoku" class="headerlink" title="36. Valid Sudoku"></a>36. Valid Sudoku</h3><ol><li>java有一个数据结构叫hashset，<br>创建一个 HashSet 对象 sites，用于保存字符串元素：HashSet<String> sites &#x3D; new HashSet<String>();</li></ol><ul><li>contains() 方法来判断元素是否存在于集合当中: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sites.add(&quot;Runoob&quot;);  // 重复的元素不会被添加</span><br><span class="line">System.out.println(sites.contains(&quot;Taobao&quot;));</span><br></pre></td></tr></table></figure></li><li>remove() 方法来删除集合中的元素:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sites.add(&quot;Runoob&quot;);     // 重复的元素不会被添加</span><br><span class="line">sites.remove(&quot;Taobao&quot;);  // 删除元素，删除成功返回 true，否则为 false</span><br></pre></td></tr></table></figure></li><li>删除集合中所有元素可以使用 clear 方法：<br><code>sites.clear();  </code></li><li>如果要计算 HashSet 中的元素数量可以使用 size() 方法：<br><code>System.out.println(sites.size()); </code></li></ul><ol start="2"><li>unordered_set<br><a href="https://blog.csdn.net/qq_40286920/article/details/124731777">unordered_set详细介绍</a><br><a href="https://en.cppreference.com/w/cpp/container/unordered_set">cppreference.com</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">    public:</span><br><span class="line">    //All we need to do is check if there is any repitition in row, column, and subbox. To support quick lookups, we can use hashmap, unordered_set specifically</span><br><span class="line">    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt; &amp;board)&#123;</span><br><span class="line">        // 1. check row equality</span><br><span class="line">        for(int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">            unordered_set&lt;char&gt; check_row;</span><br><span class="line">            for(int col = 0; col &lt; 9; col++)&#123;</span><br><span class="line">                if(board[row][col] != &#x27;.&#x27; &amp;&amp; check_row.contains(board[row][col])) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                else </span><br><span class="line">                    check_row.insert(board[row][col]);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2. check column quality</span><br><span class="line">        for (int col=0; col &lt; 9; col++)&#123;</span><br><span class="line">            unordered_set&lt;char&gt; check_col;</span><br><span class="line">            for(int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">                if(board[row][col] != &#x27;.&#x27; &amp;&amp; check_col.contains(board[row][col])) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                else check_col.insert(board[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 3. check subbox equality</span><br><span class="line">        /*</span><br><span class="line">        for (int row = 0; row &lt; 7; row++)&#123;</span><br><span class="line">            for (int col = 0; col &lt; 7; col++)&#123;</span><br><span class="line">                unordered_set&lt;char&gt; check_box;</span><br><span class="line">                for (int i = row; i&lt;(row + 3); i++)&#123;</span><br><span class="line">                    for (int j = col; j &lt; (col+3); j++)&#123;</span><br><span class="line">                        if(board[i][j] != &#x27;.&#x27; &amp;&amp; check_box.contains(board[i][j]))&#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else check_box.insert(board[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">        vector&lt;unordered_set&lt;char&gt;&gt; check_subbox(9);</span><br><span class="line">        for (int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">            for (int col = 0; col &lt; 9; col++)&#123;</span><br><span class="line">                int loc = (row / 3) *  3 + col / 3;</span><br><span class="line">                if(board[row][col]!=&#x27;.&#x27; &amp;&amp; check_subbox[loc].contains(board[row][col]) ) return false;</span><br><span class="line">                else check_subbox[loc].insert(board[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h1><h1 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a>54. Spiral Matrix</h1><ol><li>可以通过设置<code>currentAdderX</code>和<code>currentAdderY</code>控制遍历的方向；</li><li>每次转向的时候改变boundary，例如向下走直到转向时，要改变Y-方向上的上限值，向右转向时，要改变X-方向上的下限值；</li><li>二维vector的下标：<blockquote><p>明天研究用DFS算法改进解决方案</p></blockquote></li></ol><h1 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a>56. Merge Intervals</h1><p>sort(intervals.begin(),intervals.end());</p><h1 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h1>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的一些零碎的知识</title>
      <link href="/2023/07/11/%E7%9E%8E%E5%AD%A6python/"/>
      <url>/2023/07/11/%E7%9E%8E%E5%AD%A6python/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的格式"><a href="#函数的格式" class="headerlink" title="函数的格式"></a>函数的格式</h2><p><a href="https://blog.csdn.net/qq_44788449/article/details/108181511"><span style="color:red;font-size:15px;font-family:方正准圆简体常规;">Python函数的结构与调用，返回值及参数</span></a></p><p><a href="https://blog.csdn.net/CLHugh/article/details/75000104"><span style="color:red;font-size:15px;font-family:方正准圆简体常规;">self参数</span></a></p><p><a href="https://www.zhihu.com/question/19698598"><span style="color:red;font-size:15px;font-family:方正准圆简体常规;">python2和python3的区别</span></a></p><p><a href="https://www.runoob.com/python3/python-string-reverse.html"><span style="color:red;font-size:15px;font-family:方正准圆简体常规;">python2翻转字符串</span></a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ILP</title>
      <link href="/2023/07/11/FOR_ILP/"/>
      <url>/2023/07/11/FOR_ILP/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-Branch-and-bound-method"><a href="#5-1-Branch-and-bound-method" class="headerlink" title="5.1 Branch-and-bound method"></a>5.1 Branch-and-bound method</h1><p>把feasible region X分成X1和X2两个subregion<br>Branching Tree</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马帝国的衰落</title>
      <link href="/2023/07/09/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E7%9A%84%E8%A1%B0%E8%90%BD/"/>
      <url>/2023/07/09/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E7%9A%84%E8%A1%B0%E8%90%BD/</url>
      
        <content type="html"><![CDATA[<p>罗马成为文明世界的一个失职霸主。放弃国家职责真实地反映<br>了这个国家内部的衰退。当一个国家的小农阶层被榨干；当奴<br>隶和农奴成为国家的主要劳动力；当大片土地被践踏或供权贵<br>娱乐；当每个人都喊着口号却鲜有真知灼见；当奸商当道甚至<br>在法庭上作威作福；当地方官以罪犯地位的高低为依据量刑，<br>从而谋求升迁；当交易场所变成赌场，议员和权贵成为最大的<br>赌徒；当贪污腐败成为普遍现象；当社会变成无耻、贪欲、欺<br>骗、污秽的温床；当法庭的审判暴露出国家已成为秃鹰循味夺<br>食的腐肉；当部族内部充满无耻之徒；当外族入侵者与众多“德<br>高望重”的绅士里应外合对城市进行劫掠，其残忍程度令普通盗<br>匪都望尘莫及；当所有这一切成为社会的基调时，只能证明这<br>个国家已经病入膏肓。<br>有一番景象更让人匪夷所思。在全世界看来，富人阶层和贵族<br>阶层同为一群一无是处的乌合之众，但他们之间也互相仇视。<br>意大利人忌恨罗马人，但他们的境遇相较于生活在水深火热中<br>的外省人略胜一筹。社会最底层的奴隶正在酝酿一场风暴，试<br>图报复给他们带来苦难的阶级敌人。随着大量进口奴隶生产农<br>产品，本土产业疲于应付，人口不断减少，军队日渐堕落，统<br>治者畏强欺弱，将战争作为一种投机工具，外省常遭到侵略者<br>的掠夺，大城市里充斥着愚昧的迷信、骇人的恶行、醉生梦死<br>的奢靡之风……改革已迫在眉睫，此刻，谁会是那位力挽狂澜<br>的英雄？</p><ol start="2"><li><p>提比略 格拉古<br>西庇阿·埃米利安努斯——提比略·格拉古担任保民官——提比略·<br>格拉古的《农业法》议案——他们的智慧——土地持有者的不满<br>——屋大维的阻挠——为提比略·格拉古的行为辩护——提比略·格<br>拉古未实行的改革——提比略·格拉古再次竞选保民官——提比略<br>·格拉古的改革动机——遇害</p></li><li><p>盖约 格拉古<br>我在撒丁岛待了两年，不是为了实现个人野心，而是为了你们的利益。那里没有珍馐美馔供我享用，没有俊美奴隶环伺左右，也没有暮夜怀金和假公济私，更没有买笑追欢，你们的孩子看到的是比指挥部更得体的生活方式。别人带着酒罐出去，装着钱回来，而我带着钱去，空着手回来。这就是我在撒丁岛两年的成果。”</p></li></ol><p>阿庇安对这种反动立法的后果做了大致的总结：该法导致公民人口减少、兵源匮乏和税收赤字。实际上，这些结果已经清楚地摆在我们眼前：奴隶的不满、大庄园的膨胀、人口的减少、土地的贬值……高奏凯歌的贵族们正一步步将这个国家推向毁灭的深渊。最后这段时间，贵族们不为意大利的利益奋斗，也不为征服世界奋斗，而是忙着巩固罗马在意大利的地位和自己在罗马的地位。财富和权力逐渐集中到少数人手中。据说在巴比安法颁布后的十年，所有公民中只有两千户富人。公元前129年到公元前123年，昆图斯·梅特路斯的四个儿子和两个侄子都担任过执政官，他本人也担任过罗马所有的高级职位。正像罗马历史学家塞勒斯特说的那样，贵族的荣耀代代相传。</p><p>罗马还有不少残存的格拉古党，他们迫切希望改变乌烟瘴气的社会现状，但由于没有一个精明强干的领导人，再加上敌人的威胁恐吓，他们敢怒不敢言。在努曼提雅战争中，西庇阿·埃米利安努斯曾为自己指定了一名接班人，他说如果自己战死，这位年轻人可以接替自己的位置。现在这位勇敢的将士已经从政，他一面忙着遏制贵族的势力，竭力维持投票的私密性和有效性，一面忙着抵制分发谷物，对抗乌合之众。然而，没人知道他能走多远，虽然他已经是一位裁判官，但还是常常遭到梅特路斯家族的排挤。盖约·格拉古的死使元老院的统治延长了二十年，这二十年是内外交困、屈节辱命的二十年：朱古达战争的节节失利、西西里的二次奴隶起义、幽灵般的北方游牧民族对罗马军队的一次次打击。公元前105年的一次战争结束了这一切，这次战争比第二次布匿战争更惨烈。此时，元老院的腐朽堕落已经达到极致，双手沾满格拉古兄弟鲜血的刽子手也倒在了盖乌斯·马略的剑下，毫无还手之力，他们受到千夫所指，无人同情。</p>]]></content>
      
      
      <categories>
          
          <category> 意大利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 意大利 </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>德语学习</title>
      <link href="/2023/07/02/German/"/>
      <url>/2023/07/02/German/</url>
      
        <content type="html"><![CDATA[<h1 id="字母"><a href="#字母" class="headerlink" title="字母"></a>字母</h1><p>啊 A a<br>杯 B b<br>C c [tse:]<br>D d [de:]<br>E e [e:]<br>F f<br>G g [ge:]<br>H h [ha:]<br>I i [i:]<br>J j<br>K a [Ka:]<br>L l<br>M m<br>N n<br>O o<br>P p [pe:]<br>Q q [ku:]<br>R r<br>S s<br>T t<br>U u<br>V v<br>W w<br>X x<br>Y y<br>Z z</p><h2 id="元音字母"><a href="#元音字母" class="headerlink" title="元音字母"></a>元音字母</h2><table><thead><tr><th align="center">a</th><th align="center">e</th><th align="center">i</th><th align="center">o</th><th align="center">u</th></tr></thead><tbody><tr><td align="center">啊</td><td align="center">A</td><td align="center">衣</td><td align="center">欧</td><td align="center">乌</td></tr></tbody></table><p>啥时候读</p><ol><li>单音节词以元音字母结尾时</li><li>元音字母之后有不发音的字母”h”作为延长音符号时，如ah,eh,ih,oh,uh,geht,Kuh等等</li><li>元音字母重叠时，即aa,ee,ie,oo, 如：Aal, Maat, Tee, See, die, Sie, Boot等等<br>德语单词里没有ii重叠的现象，以<strong>ie</strong>的形式代替。也没有<strong>uu</strong>重叠的现象，所以uh读u的长音，如Uhr, Uhren等</li><li>元音字母之后只有一个辅音字母时，该元音通常也读长音，如 gut, Tat, tun, tut, Kino, Kinos, Politik等</li><li>双音节或多音节单词中以元音字母单独作为一个音节时，如：Oma, Omi, Opa, Opi, Alu, Ameisen等</li></ol><p>hhhhwwww<br><img src="/images/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> German </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> German </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意大利语学习</title>
      <link href="/2023/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/07/02/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>l’ idea<br>il macchina<br>l’ automobile<br>le&#x2F;la amiche<br>le interessi <strong>gli</strong><br>le alti<br>i studenti<br>la appartamento</p><p>le porte<br>la domanda 以元音a结尾的名词通常是阴性的，单数<br>le domande 复数</p><p>名词分为阴性和阳性，<br>以<code>o</code>结尾的名词一般是阳性，复数o-&gt;e<br>dialogo 对话<br>quaderno 笔记本<br>以<code>a</code>结尾的名词一般是阴性，复数a-&gt;e</p>]]></content>
      
      
      <categories>
          
          <category> Italian </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> Italian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习简记</title>
      <link href="/2023/06/30/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/30/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/aceld/mo95lb">8小时转职Golang工程师</a></p><blockquote><p>做中学</p></blockquote><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Hello, 世界&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$ go build helloworld.go</code><br>在win下生成exe可执行文件</p><p>package：类似于其它语言里的库或模块，一个package由多个.go组成，每个文件都要写package XXX</p><p>for i :&#x3D;0;i &lt; 10;i++&gt;{<br>    fmt.Printf(“hello world\n”);<br>}</p><h2 id="Go语言的特点"><a href="#Go语言的特点" class="headerlink" title="Go语言的特点"></a>Go语言的特点</h2><p>Go &#x3D; C + Python(静态语言的运行速度 + 动态语言的快速开发)</p><ol><li>有指针</li><li>引入包的概念，用于组织程序结构，Go语言的每一个文件都要归属于一个包，而不能单独存在</li><li>垃圾回收机制，内存自动回收</li><li><strong>天然并发</strong></li><li>吸收了管道通讯机制</li><li>函数可以返回多个值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func getSumandSub(n1 int, n2 int) (int, int) &#123;</span><br><span class="line">    sum := n1 + n2;</span><br><span class="line">    sub := n1 - n2;</span><br><span class="line">    return sum, sub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新的创新，比如切片slice，延时执行defer等</li></ol><h2 id="Go语言快速入门"><a href="#Go语言快速入门" class="headerlink" title="Go语言快速入门"></a>Go语言快速入门</h2><p>开发一个<code>hello.go</code>程序<br>go程序的目录结构 &#x2F;项目名&#x2F;src&#x2F;go_code&#x2F;project01&#x2F;<br>goproj\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Hello, 世界&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>go文件的后缀是.go</li><li>package main<br>表示该 hello.go 文件所在的包是 main，在 go 中，每个文件都必须归属于一个包。</li><li>import “fmt”<br>表示：引入一个包，包名 fmt，引入该包后，就可以使用该包的函数</li><li>func 表示函数<br><strong>main 是主函数，即程序的入口</strong></li><li>调用函数<br>fmt.Println(“hello”)</li></ul><ol start="3"><li>go build hello.go</li><li>运行exe文件</li></ol><h3 id="golang-执行流程分析"><a href="#golang-执行流程分析" class="headerlink" title="golang 执行流程分析"></a>golang 执行流程分析</h3><p>如果对源码编译后再执行，Go的执行流程如下：<br>.go文件 (go build)——–&gt;可执行文件——–&gt;结果<br>.go文件 (go run)——–&gt;结果<br>在编译时，编译器会将程序运行依赖的库蚊鸡那包含在可执行文件中，所以，可执行文件变大了很多<br>直接go run源代码，如果要在另一台机器上运行，需要go开发环境，否则无法执行。</p><h3 id="编译和运行说明"><a href="#编译和运行说明" class="headerlink" title="编译和运行说明"></a>编译和运行说明</h3><p>go build -o myhello.exe hello.go &#x2F;&#x2F;制定可执行文件名</p><h2 id="go程序开发注意事项"><a href="#go程序开发注意事项" class="headerlink" title="go程序开发注意事项"></a>go程序开发注意事项</h2><ol><li>不需要加分号</li><li>不能把多条语句放在同一行，否则会报错</li><li>go语言定义的变量或者import的包如果没有使用到，代码不能编译通过</li></ol><h3 id="go语言转义字符-escape-char"><a href="#go语言转义字符-escape-char" class="headerlink" title="go语言转义字符(escape char)"></a>go语言转义字符(escape char)</h3><p>\t 制表，用它排版<br>\n<br>\<br>&quot;<br>\r: 回车(当前行的最前面开始输出，覆盖掉以前内容)</p><h3 id="自动排版"><a href="#自动排版" class="headerlink" title="自动排版"></a>自动排版</h3><p>gofmt -w main.go</p><h3 id="go语言圣经"><a href="#go语言圣经" class="headerlink" title="go语言圣经"></a>go语言圣经</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Echo1 prints its command-line arguments.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> s, sep <span class="type">string</span> <span class="comment">//如果变量没有被显式地初始化，会被赋予其类型的零值，数值类型是0，字符串类型是空字符串</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(os.Args); i++ &#123;</span><br><span class="line">    s += sep + os.Args[i]</span><br><span class="line">    sep = <span class="string">&quot; &quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(s)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>符号 :&#x3D; 是短变量声明的一部分，这是<strong>定义</strong>一个或多个变量并<strong>根据它们的初始值</strong>为这些变量付予适当类型的语句</li><li>i++是个语句，不是表达式，所以 j &#x3D; i++ 非法。++ 和 – 只能放在变量名后面，因此 –i 也非法</li><li>Go语言只有for循环这一种循环语句，for循环有多种形式，其中一种如下所示：<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> initialization; condition; post &#123;</span><br><span class="line">    <span class="comment">//zero or more statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>initialization语句是可选的，在循环开始前执行。initalization如果存在，必须是一条简单语（simple statement），即，短变量声明、自增语句、赋值语句或函数调用。condition是一个布尔表达式 （boolean expression），其值在每次循环迭代开始时计算。如果为true则执行循环体语句。post语句在循环体执行结束后执行，之后再次对conditon求值。condition值为false时，循环结束。<br><strong>for循环的这三个部分每个都可以省略，如果省略initialization和post，分号也可以省略：</strong><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a traditional &quot;while&quot; loop</span></span><br><span class="line"><span class="keyword">for</span> condition &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>condition也可以省略，那是一个无限循环，可以通过break或return语句终止循环</strong></li></ol><h1 id="Go语言语法"><a href="#Go语言语法" class="headerlink" title="Go语言语法"></a>Go语言语法</h1><h2 id="1-四种变量声明方式"><a href="#1-四种变量声明方式" class="headerlink" title="1. 四种变量声明方式"></a>1. 四种变量声明方式</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明全局变量，方法一、二、三是可以的</span></span><br><span class="line"><span class="keyword">var</span> gA = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> gB <span class="type">int</span> = <span class="number">200</span></span><br><span class="line"><span class="comment">//用方法四来声明全局变量 不可以！！</span></span><br><span class="line"><span class="comment">// := 只能用在函数体内声明</span></span><br><span class="line">gC := <span class="number">200</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s := <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//方法一：声明一个变量。默认的值是0</span></span><br><span class="line">  <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a=&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of a = %T\n&quot;</span>, a)</span><br><span class="line">  <span class="comment">//方法二：声明一个变量，初始化一个值</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">  <span class="keyword">var</span> bb <span class="type">string</span> = <span class="string">&quot;aaaabbbb&quot;</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;b=&quot;</span>, b)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of b = %T\n&quot;</span>, b)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;bb = %s, type of bb = %T\n&quot;</span>, bb, bb)</span><br><span class="line">  <span class="comment">//方法三：在初始化的时候，可以省去数据类型，通过值自动匹配当前的变量的数据类型</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">100</span></span><br><span class="line">  <span class="keyword">var</span> cc = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;c=&quot;</span>, c)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of c = %T\n&quot;</span>, c)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;cc = %s, type of cc = %T\n&quot;</span>, cc, cc)</span><br><span class="line">  <span class="comment">//方法四： 常用的方法，省区var关键字，直接自动匹配</span></span><br><span class="line">  e := <span class="number">100</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;e=&quot;</span>, e)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of e = %T\n&quot;</span>, e)</span><br><span class="line">  f := <span class="string">&quot;abcd&quot;</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;f=&quot;</span>, f)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of f = %T\n&quot;</span>, f)</span><br><span class="line">  g := <span class="number">3.14</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;g=&quot;</span>, g)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Type of g = %T\n&quot;</span>, g)</span><br><span class="line">  </span><br><span class="line">  fmt.Println(<span class="string">&quot;gA = &quot;</span>, gA, <span class="string">&quot;gB = &quot;</span>, gB)</span><br><span class="line">  <span class="comment">//fmt.Println(&quot;gC= &quot;, gC)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//声明多个变量</span></span><br><span class="line">  <span class="keyword">var</span> xx,yy <span class="type">int</span> = <span class="number">100</span>,<span class="number">200</span></span><br><span class="line">  <span class="keyword">var</span> ll, kk = <span class="number">100</span>, <span class="string">&quot;abcd&quot;</span></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    vv <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">    jj <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-常量"><a href="#2-常量" class="headerlink" title="2. 常量"></a>2. 常量</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const 用来定义枚举类型</span></span><br><span class="line"><span class="keyword">const</span>&#123;</span><br><span class="line">  <span class="comment">//可以在const&#123;&#125;添加一个关键字iota，每行的iota都会累加1，第一行的iota的默认值是0</span></span><br><span class="line">  BEIJING = <span class="number">10</span>*<span class="literal">iota</span></span><br><span class="line">  SHNAGHAI </span><br><span class="line">  SHENZHEN</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="comment">//iota只能配合const&#123;&#125;一起使用，iota只有在const进行累加效果</span></span><br><span class="line">  a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span> <span class="comment">//iota=0,a=1,b=2</span></span><br><span class="line">  c, d  <span class="comment">//iota=1,c=2,d=3</span></span><br><span class="line">  e, f                      <span class="comment">//iota=2,e=3,f=4</span></span><br><span class="line">  </span><br><span class="line">  g, h = <span class="literal">iota</span> * <span class="number">2</span>, <span class="literal">iota</span> * <span class="number">3</span> <span class="comment">//iota=3,g=6,h=9</span></span><br><span class="line">  i, k                      <span class="comment">//iota=4,i=8,k=12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//常量(只读)</span></span><br><span class="line">  <span class="keyword">const</span> length <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">  fmt.Println(<span class="string">&quot;length= &quot;</span>, length)</span><br><span class="line">  <span class="comment">//length = 100 //常量不允许被修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><h3 id="1-多返回值"><a href="#1-多返回值" class="headerlink" title="1. 多返回值"></a>1. 多返回值</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo1</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">//形参和返回值，如果没有返回值可以不写</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a= &quot;</span>, a)</span><br><span class="line">  fmt.Println(<span class="string">&quot;b= &quot;</span>, b)</span><br><span class="line">  c := <span class="number">100</span></span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回多个返回值，匿名的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo2</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;a= &quot;</span>, a)</span><br><span class="line">  fmt.Println(<span class="string">&quot;b= &quot;</span>, b)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>, <span class="number">777</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回多个返回值，有形参名称的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (r1 <span class="type">int</span>, r2 <span class="type">int</span>)&#123; <span class="comment">//r1和r2是属于foo3的两个形参，默认是0</span></span><br><span class="line">  <span class="comment">//r1和r2的作用空间是foo3内部</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a= &quot;</span>, a)</span><br><span class="line">  fmt.Println(<span class="string">&quot;b= &quot;</span>, b)</span><br><span class="line">  r1 = <span class="number">1000</span></span><br><span class="line">  r2 = <span class="number">2000</span></span><br><span class="line">  <span class="keyword">return</span> <span class="comment">//return的时候就会返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (r1, r2 <span class="type">int</span>)&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;a= &quot;</span>, a)</span><br><span class="line">  fmt.Println(<span class="string">&quot;b= &quot;</span>, b)</span><br><span class="line">  r1 = <span class="number">1000</span></span><br><span class="line">  r2 = <span class="number">2000</span></span><br><span class="line">  <span class="keyword">return</span> r1,r2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  c = foo1(<span class="string">&quot;abc&quot;</span>, <span class="number">100</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;c= &quot;</span>, c)</span><br><span class="line">  </span><br><span class="line">  ret1, ret2 := foo2(<span class="string">&quot;cba&quot;</span>, <span class="number">999</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;ret1= &quot;</span>, ret1, <span class="string">&quot;ret2= &quot;</span>, ret2)</span><br><span class="line">  </span><br><span class="line">  ret3, ret4 := foo3(<span class="string">&quot;nba&quot;</span>, <span class="number">888</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;ret3= &quot;</span>, ret3, <span class="string">&quot;ret4= &quot;</span>, ret4)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-init函数和import导包"><a href="#2-init函数和import导包" class="headerlink" title="2. init函数和import导包"></a>2. init函数和import导包</h3><p>import导包导到底，执行那个包里的init函数，返回上级函数，回到main包后执行main函数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;fmt&quot;</span> <span class="comment">//给fmt包起一个别名，匿名，无法使用当前包的方法，但是会执行当前包内部的init()方法</span></span><br><span class="line"><span class="keyword">import</span> aa <span class="string">&quot;fmt&quot;</span> <span class="comment">//给fmt包起一个别名，aa，aa.Println()来直接调用</span></span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;fmt&quot;</span> <span class="comment">//将当前fmt包中的全部方法，导入到当前本包的作用中，fmt包中的全部方法都可以直接使用API来调用，不需要fmt.API来调用</span></span><br></pre></td></tr></table></figure><h3 id="3-defer"><a href="#3-defer" class="headerlink" title="3. defer"></a>3. defer</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//遇见defer依次压栈，函数返回依次出栈执行，先进后出</span></span><br><span class="line">  <span class="keyword">defer</span> func1()</span><br><span class="line">  <span class="keyword">defer</span> func2()</span><br><span class="line">  <span class="keyword">defer</span> func3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output: C B A</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*知识点二：defer和return谁先谁后：defer在整个lifecycle结束以后才调用*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;defer func called...&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;return func called&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnAndDefer</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> deferFunc()</span><br><span class="line">  <span class="keyword">return</span> returnFunc()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  returnAndDefer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output:<br>return func called<br>defer func called</p><h2 id="4-切片slice"><a href="#4-切片slice" class="headerlink" title="4. 切片slice"></a>4. 切片slice</h2><p><strong>数组</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;index= &quot;</span>, index, <span class="string">&quot;value= &quot;</span>, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//固定长度的数组 </span></span><br><span class="line">  <span class="keyword">var</span> myArray1 [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">  myArray2 := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">  myArray3 := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(myArray2); i++ &#123;</span><br><span class="line">    fmt.Println(myArray2[i])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray2 &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;index= &quot;</span>, index, <span class="string">&quot;value= &quot;</span>, value)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fmt.Printf(<span class="string">&quot;myArray1 type = %T\n&quot;</span>, myArray1)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myArray2 type = %T\n&quot;</span>, myArray2)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myArray3 type = %T\n&quot;</span>, myArray3)</span><br><span class="line">  </span><br><span class="line">  printArray(myArray3)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>切片(动态数组)</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray2</span><span class="params">(myArray []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;value= &quot;</span>, value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myArray[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">  myArray[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line">  myArray = <span class="built_in">append</span>(myArray, myArray[<span class="number">0</span>]+<span class="number">33</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> myArray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  myArray := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myArray type = %T\n&quot;</span>, myArray)</span><br><span class="line">  <span class="comment">//引用传递</span></span><br><span class="line">  myArray = printArray2(myArray)</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;--------------------------------\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;--------------------------------\n&quot;</span>)</span><br><span class="line">  myArray = printArray2(myArray)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myArray type = %T\n&quot;</span>, myArray)</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;--------------------------------\n&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>100 200 3 4 133 133</p><p><img src="/images/Go/slice.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Study Plan</title>
      <link href="/2023/06/26/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2023/06/26/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TCS：<br>DB2：13号前把所有的例题都看完<br>CI：<br>ACA：每天三个小时复习大题<br>FOR：8号之前看完所有的例题<br>MIDA<br>CS<br>MIDA2<br>AAPP<br>AN2DL<br>SE2</p></blockquote><p><strong>2023.11.06：</strong><br>今天把图片分类看完</p><p><strong>2023.11.08：</strong><br>明天开始把nodejs看完（9天）一天一个小时，完成之后做自己的text editor</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2023/06/25/Go%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E5%99%A8/"/>
      <url>/2023/06/25/Go%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="1-1-新语言简介"><a href="#1-1-新语言简介" class="headerlink" title="1.1 新语言简介"></a>1.1 新语言简介</h2><ul><li>名称：FWJ<br>弗雷格-维特根斯坦-乔姆斯基</li><li>类型：一门动态类型多范式高级编程语言</li></ul><h2 id="1-2-第一个FWJ程序"><a href="#1-2-第一个FWJ程序" class="headerlink" title="1.2 第一个FWJ程序"></a>1.2 第一个FWJ程序</h2><p>文件: hello.fwj</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><h2 id="1-3-FWJ解释器"><a href="#1-3-FWJ解释器" class="headerlink" title="1.3 FWJ解释器"></a>1.3 FWJ解释器</h2><ul><li>实现语言：Go</li><li>原生开发：不依赖第三方库</li><li>代码-词法分析器-语法分析器-求值</li></ul><h2 id="1-4-为什么要做一个语言解释器"><a href="#1-4-为什么要做一个语言解释器" class="headerlink" title="1.4 为什么要做一个语言解释器"></a>1.4 为什么要做一个语言解释器</h2><h1 id="词法分析-Lexing"><a href="#词法分析-Lexing" class="headerlink" title="词法分析(Lexing)"></a>词法分析(Lexing)</h1>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ranking Queries</title>
      <link href="/2023/06/15/DB_Ranking%20queries/"/>
      <url>/2023/06/15/DB_Ranking%20queries/</url>
      
        <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><p>Multi-objective optimization<br>• Main approaches:<br>– Ranking (aka top-k) queries<br>• Top k objects according to a given scoring function<br>– Skyline queries<br>• Set of non-dominated objects</p><h1 id="老办法"><a href="#老办法" class="headerlink" title="老办法"></a>老办法</h1><ol><li>Rank aggregation<br>Borda’s(candidate with the lowest penalty) and Condorcet’s proposals(A candidate who defeats every other candidate in pairwise majority rule election)</li></ol><ul><li>Axiomatic approach</li><li>Metric approach<br>Finding a new ranking R whose total distance to the initial rankings R1,…, Rn is minimized</li></ul><h1 id="Ranking-aka-top-k-queries"><a href="#Ranking-aka-top-k-queries" class="headerlink" title="Ranking (aka top-k) queries"></a>Ranking (aka top-k) queries</h1><ul><li>Combining opaque rankings<br>有多个表，求top-k<br>eg. hotel<br><strong>MedRank</strong> is not optimal<br>§ However, it is instance-optimal</li></ul><h2 id="Top-k-join-queries"><a href="#Top-k-join-queries" class="headerlink" title="Top-k join queries"></a>Top-k join queries</h2><p>SELECT E.*<br>FROM EMP E, DEPT D<br>WHERE E.DNO &#x3D; D.DNO<br>ORDER BY E.Salary &#x2F; D.Budget DESC<br>FETCH FIRST 1 ROW ONLY</p><h2 id="Top-k-1-1-join-queries"><a href="#Top-k-1-1-join-queries" class="headerlink" title="Top-k 1-1 join queries"></a>Top-k 1-1 join queries</h2><p>SELECT *<br>FROM EatWell EW, BreadAndWine BW<br>WHERE EW.Name &#x3D; BW.Name<br>ORDER BY EW.Score + BW.Score DESC<br>FETCH FIRST 1 ROW ONLY</p><h3 id="Common-scoring-functions"><a href="#Common-scoring-functions" class="headerlink" title="Common scoring functions"></a>Common scoring functions</h3><ol><li>SUM (AVG): used to weigh preferences equally<br>SUM(o) º SUM(p(o)) &#x3D; p1(o) + p2(o) + … + pm(o)</li><li>WSUM (Weighted sum): to weigh the ranking attributes differently<br>WSUM(o) º WSUM(p(o)) &#x3D; w1<em>p1(o) + w2</em>p2(o) + … + wm*pm(o)</li><li>MIN (Minimum): just considers the worst partial score<br>MIN(o) º MIN(p(o)) &#x3D; min{p1(o),p2(o), …, pm(o)}</li><li>MAX (Maximum): just considers the best partial score<br>MAX(o) º MAX(p(o)) &#x3D; max{p1(o),p2(o), …, pm(o)}</li></ol><h3 id="The-B0-algorithm-using-a-scoring-function-S"><a href="#The-B0-algorithm-using-a-scoring-function-S" class="headerlink" title="The B0 algorithm(using a scoring function S)"></a>The B0 algorithm(using a scoring function S)</h3><p>B0 only works for MAX<br>有m个排好序的list，在每个list上做k次有序访问，把对象和对应的分数存在buffer里，计算buffer里的每个对象的最大分数，返回topk</p><h3 id="Fagin’s-Algorithm-FA"><a href="#Fagin’s-Algorithm-FA" class="headerlink" title="Fagin’s Algorithm (FA)"></a>Fagin’s Algorithm (FA)</h3><p>at least k objects in common, 找到k个以后在目前遇到的object里面挑</p><h3 id="Threshold-Algorithm-TA"><a href="#Threshold-Algorithm-TA" class="headerlink" title="Threshold Algorithm (TA)"></a>Threshold Algorithm (TA)</h3><p>Threshold(把当前行代入Score函数中)<br>给定Score函数，停止直到top-k的score不比threshold差</p><h3 id="The-NRA-algorithm-preliminaries"><a href="#The-NRA-algorithm-preliminaries" class="headerlink" title="The NRA algorithm: preliminaries"></a>The NRA algorithm: preliminaries</h3><p>| id | lbscore | ubscore |</p><table><thead><tr><th align="center">Algorithm</th><th align="center">Scoring function</th><th align="center">Data access</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">B0</td><td align="center">MAX</td><td align="center">sorted</td><td align="center">instance-optimal</td></tr><tr><td align="center">FA</td><td align="center">monotone</td><td align="center">sorted and random</td><td align="center">cost independent of scoring function</td></tr><tr><td align="center">TA</td><td align="center">monotone</td><td align="center">sorted and random</td><td align="center">instance-optimal</td></tr><tr><td align="center">NRA</td><td align="center">monotone</td><td align="center">sorted</td><td align="center">instance-optimal, no exact scores</td></tr></tbody></table><h1 id="Skyline-queries"><a href="#Skyline-queries" class="headerlink" title="Skyline queries"></a>Skyline queries</h1><p>首先根据某些单调函数来排序，然后画线</p><table><thead><tr><th align="center"></th><th align="center">Ranking queries</th><th align="center">Skyline queries</th></tr></thead><tbody><tr><td align="center">Simplicity</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center">Overall view of interesting results</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center">Control of cardinality</td><td align="center">Yes</td><td align="center">No</td></tr><tr><td align="center">Trade-off among attributes</td><td align="center">Yes</td><td align="center">No</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phiscal Databases</title>
      <link href="/2023/06/15/DB_JPA/"/>
      <url>/2023/06/15/DB_JPA/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>Goals: understanding database development in the context of architecture and application development</p><h2 id="有哪些架构"><a href="#有哪些架构" class="headerlink" title="有哪些架构"></a>有哪些架构</h2><ul><li>Two-tier architectures (client-server)</li><li>Three-tier architectures<br>New element: à middle tier(更好地分离client和server)</li><li>Web “pure HTML” 3-tier architectures<br>The client is a standard Web browser(Thin client)</li><li>Rich Internet Applications<br>Enabling technology: client side scripting (with JavaScript) Fat client</li></ul><h2 id="什么是JPA"><a href="#什么是JPA" class="headerlink" title="什么是JPA"></a>什么是JPA</h2><p><strong>Java Persistence API</strong><br>The specification of an interface for mapping relational data to object oriented data in Java<br>在Java中映射<strong>关系数据</strong>到<strong>面向对象数据</strong>的接口规范。</p><ul><li>Java Transaction API (JTA)<br>• An API for managing transactions in Java</li></ul><h3 id="main-concept"><a href="#main-concept" class="headerlink" title="main concept"></a>main concept</h3><ul><li>Entity</li><li>Persistence Unit(like db schema)</li><li>Persistence Context(like db instance)</li><li>Managed entity</li><li>Entity manager</li><li>Client</li></ul><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><p>The technique of bridging the gap between the** object model** and the <strong>relational model</strong></p><h2 id="Entity-Constraints"><a href="#Entity-Constraints" class="headerlink" title="Entity Constraints"></a>Entity Constraints</h2><ol><li>The entity class must have a public or protected no-arg constructor(无参构造函数)</li><li>The entity class must not be final(实体类不能被继承，重写或修改)</li><li><strong>No method or persistent instance variables</strong> of the entity class may be final</li><li>If an entity instance is to be passed by value as a detached object, the Serializable interface must be implemented</li></ol><h2 id="Entity-Identification"><a href="#Entity-Identification" class="headerlink" title="Entity Identification"></a>Entity Identification</h2><p>• Simple Primary key &#x3D; persistent field of the bean<br>used to represent its identity<br>• Composite Primary key &#x3D; set of persistent fields<br>used to represent its identity<br>• Remark: with respect to the POJOs, the persistent<br>identity is a new concept. POJOS do not have a<br>durable identity</p><h2 id="Identifier-generation-options"><a href="#Identifier-generation-options" class="headerlink" title="Identifier generation options"></a>Identifier generation options</h2><ul><li>AUTO<br>The provider generates identifiers by using whatever strategy it wants</li><li>TABLE<br>Identifiers are generated according to a generator table</li><li>SEQUENCE<br>If the underlying DB supports sequences, the provider will use this feature for generating IDs</li><li>IDENTITY<br>If the underlying DB supports primary key identity columns, the provider will use this feature for generating IDs</li></ul><h2 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h2><ol><li>All relationships in JPA are unidirectional</li><li>Based on directionality, one entity plays the role of source and one the role of target.</li><li>Cardinality(基数)</li><li>Ownership</li></ol><p>@joincolumn vs mappedBy</p><h2 id="Join-Table"><a href="#Join-Table" class="headerlink" title="Join Table"></a>Join Table</h2><p>Relationship fetch mode<br>Cascading operations<br>Orphan removal</p><h2 id="ManyToOne-annotation-in-Employee-java"><a href="#ManyToOne-annotation-in-Employee-java" class="headerlink" title="@ManyToOne annotation in Employee.java**"></a>@ManyToOne annotation in Employee.java**</h2><p>@Entity<br>public class Employee {<br>@Id private int id;<br>@ManyToOne<br>@JoinColumn(name&#x3D;”dept_fk”)<br>private Department dept;<br>…<br>}</p><h1 id="EM-The-Entity-Manager"><a href="#EM-The-Entity-Manager" class="headerlink" title="EM(The Entity Manager)"></a>EM(The Entity Manager)</h1><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(25周)</title>
      <link href="/2023/06/13/words(week25)/"/>
      <url>/2023/06/13/words(week25)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-The-global-space-economy-is-coming-of-age"><a href="#1-The-global-space-economy-is-coming-of-age" class="headerlink" title="1. The global space economy is coming of age"></a>1. The global space economy is coming of age</h1><p>在这个句子中，“coming of age”是一个习语，意思是某事物已经成熟或发展到了一定的阶段。在这个句子中，“coming of age”表示全球太空经济正在迅速发展并变得更加成熟。</p><p>例如：</p><ul><li>After years of hard work, the young artist’s talent finally came of age and he became famous.（经过多年的努力，这位年轻艺术家终于成名了。）</li><li>The internet has come of age as a powerful tool for communication and commerce.（互联网作为一种强大的通信和商业工具已经越来越成熟。）</li></ul><h1 id="2-Italians-divided-over-Berlusconi-legacy"><a href="#2-Italians-divided-over-Berlusconi-legacy" class="headerlink" title="2. Italians divided over Berlusconi legacy"></a>2. Italians divided over Berlusconi legacy</h1><p>在这个句子中，”divide” 的意思是分裂或分开，”legacy” 指的是某人或某事物留下来的遗产、传统或影响。整个句子的意思是：意大利人对贝卢斯科尼的遗产持不同看法。</p><p>在这里，“divided over” 是一个习语，表示人们对某件事情有不同的观点或立场。以下是一些类似用法的例子：</p><ol><li>The country is divided over the issue of gun control. (全国就枪支管制问题存在分歧)</li><li>Our team was divided over whether to accept the offer or not. (我们团队内部因是否接受那份报价而存在争议)</li></ol><h1 id="3-intrinsically"><a href="#3-intrinsically" class="headerlink" title="3. intrinsically"></a>3. intrinsically</h1><p>[英]· &#x2F;ɪnˈtrɪnsɪkli&#x2F;<br>[副词] 本质上；内在地；固有地<br>例句：</p><ol><li>The value of art is intrinsically linked to its cultural context. (艺术的价值与其文化背景密不可分。)</li><li>Happiness cannot be found in material possessions, it must come from within, intrinsically. (幸福不能从物质拥有中获得，它必须来自内心，是内在的。)</li><li>The beauty of nature is intrinsically connected to the health and well-being of our planet. (大自然的美丽与我们星球的健康和福祉息息相关。)<br>词源：<br>intrinsecus（拉丁语），意为“内部的、本质上的”。</li></ol><h1 id="4-fortiori"><a href="#4-fortiori" class="headerlink" title="4. fortiori"></a>4. fortiori</h1><p>[拉丁语]· &#x2F;fɔːtiˈoʊraɪ&#x2F;<br>[adv.] 更加强有力地；更为明显地；更进一步地<br>例句：</p><ol><li>The evidence against him is strong, and fortiori, he should be found guilty. (对他的指控证据很充分，因此他应该被判有罪。)</li><li>If the government cannot even provide basic necessities for its citizens, then fortiori it has failed in its duty to protect them. (如果政府连基本生活必需品都无法提供给公民，那么它在保护公民方面就更是失败了。)</li><li>He was already a skilled musician before attending music school, so fortiori he excelled in his studies there. (他在上音乐学校之前已经是一位熟练的音乐家，因此在那里表现得尤为出色。)<br>词源：<br>来自拉丁语“fortius”，意为“更强大”。</li></ol><h1 id="5-obligatory"><a href="#5-obligatory" class="headerlink" title="5. obligatory"></a>5. obligatory</h1><p>[英] &#x2F;əˈblɪɡət(ə)ri&#x2F;<br>[形] 强制性的，必须履行的<br>例句：</p><ol><li>It is obligatory for all employees to attend the safety training. (所有员工都必须参加安全培训。)</li><li>Wearing a mask on public transportation is now obligatory in many cities. (在许多城市，乘坐公共交通工具时佩戴口罩是强制性的。)</li><li>The company has an obligatory annual charity event. (公司每年都有一次义务性慈善活动。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.6.6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(45周)</title>
      <link href="/2023/06/13/words(week45)/"/>
      <url>/2023/06/13/words(week45)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-starting-to-get-their-minds-round-sth"><a href="#1-starting-to-get-their-minds-round-sth" class="headerlink" title="1. starting to get their minds round sth"></a>1. starting to get their minds round sth</h1><p>开始考虑某事</p><h1 id="2-pull-out-of"><a href="#2-pull-out-of" class="headerlink" title="2. pull out of"></a>2. pull out of</h1><p>退出<br>eg. Meloni publicly confirmed that her rightwing government was considering a pullout.</p><h1 id="3-fictitious"><a href="#3-fictitious" class="headerlink" title="3. fictitious"></a>3. fictitious</h1><p>[英]· &#x2F;fɪkˈtɪʃəs&#x2F;<br>[形] 虚构的，编造的，假想的<br>例句：</p><ol><li>The story is entirely fictitious.<br>（这个故事完全是虚构出来的。）</li><li>He gave a fictitious name and address to the police.<br>（他向警察提供了一个虚假姓名和地址。）</li><li>The company’s accounts contained fictitious entries.<br>（公司账目中有一些捏造的记录。）<br>词源：<br>来自拉丁语 “ficticius”，意为“人工制作、虚伪”，由”fingere”（塑造）衍生而来。</li></ol><h1 id="4-oscillate"><a href="#4-oscillate" class="headerlink" title="4. oscillate"></a>4. oscillate</h1><p>[英]· &#x2F;ˈɒs.ə.leɪt&#x2F;  美· &#x2F;ˈɑː.sə.leɪt&#x2F;<br>[v] 振荡，摆动；犹豫不决<br>例句：</p><ol><li>The fan oscillates back and forth to cool the room. (风扇来回摆动以降温。)</li><li>His mood oscillated between excitement and anxiety. (他的情绪在兴奋和焦虑之间波动。)</li><li>The stock market has been oscillating wildly in recent weeks. (近几周股市一直在剧烈波动。)<br>词源：<br>Latin “oscillare”（摇晃）</li></ol><h1 id="5-piston"><a href="#5-piston" class="headerlink" title="5. piston"></a>5. piston</h1><p>[英]· &#x2F;ˈpɪstən&#x2F;<br>[n.] 活塞；活塞状物体<br>例句：</p><ol><li>The piston moves up and down in the cylinder.<br>（活塞在汽缸内上下运动。）</li><li>The engine’s pistons are firing out of sequence.<br>（发动机的活塞顺序不正确。）</li><li>He replaced the damaged piston with a new one.<br>（他用新的替换了损坏的活塞。）<br>词源：<br>来自中古法语“pistoun”，意为“柱子，支撑物”。</li></ol><h1 id="6-ethnic"><a href="#6-ethnic" class="headerlink" title="6. ethnic"></a>6. ethnic</h1><p>[英]· &#x2F;ˈɛθnɪk&#x2F;<br>[形] 民族的；种族的；有民族特色的</p><ol><li>The country has a rich ethnic diversity.<br>这个国家拥有丰富多样的民族。</li><li>She is proud of her ethnic heritage.<br>她为自己所属的民族传统感到骄傲。</li><li>The museum features exhibits on various ethnic groups in the region.<br>博物馆展示了该地区各种不同民族群体的展品。<br>词源：来自希腊语 ethnos，意为“人们、部落”。</li></ol><h1 id="7-hydraulic"><a href="#7-hydraulic" class="headerlink" title="7.hydraulic"></a>7.hydraulic</h1><p>hydraulic<br>[英]· &#x2F;haɪˈdrɒl.ɪk&#x2F;<br>[形容词] 液压的；水力的<br>例句：</p><ol><li>The machine is powered by hydraulic pressure. (这台机器由液压力驱动。)</li><li>Hydraulic systems are widely used in engineering and industry. (液压系统在工程和工业中被广泛使用。)</li><li>The dam’s hydraulic power generates electricity for the surrounding area. (大坝的水力发电为周边地区提供电力。)<br>词源：<br>来自希腊语“hydraulikos”，意为“与水有关的”。</li></ol><h1 id="8-dump"><a href="#8-dump" class="headerlink" title="8. dump"></a>8. dump</h1><p>[英]· &#x2F;dʌmp&#x2F;<br>[n&#x2F;vt] 垃圾场；倾倒，丢弃<br>例句：</p><ol><li>The garbage truck will come to dump the trash tomorrow. (垃圾车明天会来清理垃圾。)</li><li>He decided to dump his girlfriend and start a new life. (他决定和女友分手开始新的生活。)</li><li>The company dumped all of its old equipment and bought new ones. (公司抛弃了所有旧设备并购买了新的。)<br>词源：<br>可能源自中古英语“dunpe”，意为“小山丘”。</li></ol><h1 id="9-proposal"><a href="#9-proposal" class="headerlink" title="9. proposal"></a>9. proposal</h1><p>[英]· &#x2F;prəˈpəʊzl&#x2F;<br>[n.] 提议，建议；求婚<br>例句：</p><ol><li>I think we should consider his proposal before making a decision. (我认为我们应该在做出决定之前考虑他的提议。)</li><li>The company has put forward a proposal to reduce working hours. (公司已经提出了一个减少工作时间的建议。)</li><li>He made a romantic proposal on the beach at sunset. (他在日落时分在海滩上做了一次浪漫的求婚。)<br>词源：<br>来自拉丁语 “proposare”，意思是“提出”。</li></ol><h1 id="10-advent"><a href="#10-advent" class="headerlink" title="10. advent"></a>10. advent</h1><p>[英]· &#x2F;ˈæd.vent&#x2F;<br>[n.] 到来，出现；（基督教）降临节<br>例句：</p><ol><li>The advent of the internet has revolutionized the way we communicate.<br>（互联网的到来彻底改变了我们交流的方式。）</li><li>The advent of spring brings new life to the countryside.<br>（春天的到来给乡村带来新生命。）</li><li>Advent is a time of preparation and anticipation for Christmas in many Christian traditions.<br>（在许多基督教传统中，降临节是为圣诞节做准备和期待的时间。）<br>词源：<br>from Latin “adventus” meaning “arrival, approach”, from “advenire” meaning “to come to, reach”.</li></ol><h1 id="11-recall"><a href="#11-recall" class="headerlink" title="11. recall"></a>11. recall</h1><p>[英]· &#x2F;rɪˈkɔːl&#x2F;<br>[v.] 召回；回忆起；撤销<br>例句：</p><ol><li>The company had to recall all of its products due to a safety issue. (由于安全问题，公司不得不召回所有产品。)</li><li>I can’t recall where I put my keys. (我想不起来我把钥匙放在哪里了。)</li><li>The senator is facing a recall election after his controversial decision last month. (上个月他的争议决定后，这位参议员面临着一次罢免选举。)<br>词源：来自拉丁语“re-”（再次）和“callere”（呼唤）。</li></ol><h1 id="12-latent"><a href="#12-latent" class="headerlink" title="12. latent"></a>12. latent</h1><p>[英]· &#x2F;ˈleɪt(ə)nt&#x2F; 或 &#x2F;ˈlæt(ə)nt&#x2F;<br>[形] 潜在的；隐藏的；不易察觉的<br>例句：</p><ol><li>The virus can remain latent in the body for years before causing symptoms.<br>（这种病毒可以在体内潜伏多年，然后才会引起症状。）</li><li>There may be a latent talent waiting to be discovered within you.<br>（你可能有一种潜在的天赋等待被发现。）</li><li>His anger issues had been latent for years, but finally erupted during the argument.<br>（他多年来一直隐藏着愤怒问题，但最终在争吵中爆发了。）<br>词源：来自拉丁语“latens”，意为“隐蔽、隐藏”。</li></ol><h1 id="13-false-positive"><a href="#13-false-positive" class="headerlink" title="13. false positive"></a>13. false positive</h1><p>na.“false positive&#x2F;negative”的变体<br>网络假阳性；误报；伪阳性</p><ol><li>The experimental results show that this model obtains low false positive rate and low false negative rate, and is of high efficiency.<br>实验结果表明：该模型相对于传统的入侵检测具有较低的漏报率和误报率，并有较高的运行效率。<br><a href="http://www.ceps.com.tw/">www.ceps.com.tw</a></li><li>Even realizing that the findings may have been a false positive, I still respect it.<br>即使是认识到这发现本就是错误肯定，我仍尊重它。<br>article.yeeyan.org</li><li>of patient with cancer could be identified by this assay with a false- positive error rate of less than 5% .<br>百分之二十二的癌症患者可以用这种测定方法加以确诊，假阳性误差率不到5%。</li></ol><h1 id="14-propagate"><a href="#14-propagate" class="headerlink" title="14. propagate"></a>14. propagate</h1><p>[英]· &#x2F;ˈprɒpəɡeɪt&#x2F;   [美]· &#x2F;ˈprɑːpəɡeɪt&#x2F;<br>[v.] 传播，宣传；繁殖，扩散<br>例句：</p><ol><li>The news of the accident quickly propagated throughout the city. (事故的消息很快在城市中传开了。)</li><li>They are trying to propagate their new product through social media. (他们正试图通过社交媒体来推广他们的新产品。)</li><li>Plants can propagate by seeds or cuttings. (植物可以通过种子或插枝繁殖。)<br>词源：<br>from Latin propagatus, past participle of propagare “to set out, plant”</li></ol><h1 id="15-anchor"><a href="#15-anchor" class="headerlink" title="15. anchor"></a>15. anchor</h1><p>[英]· &#x2F;ˈæŋkə(r)&#x2F;<br>[n] 锚；靠山；主播（电视或广播节目的主持人）<br>[v] 抛锚；使固定住；担任主持人<br>例句：</p><ol><li>The ship dropped anchor in the harbor. (船在港口抛了锚。)</li><li>She is the anchor of the evening news program. (她是晚间新闻节目的主播。)</li><li>We need to anchor this shelf to the wall to prevent it from falling down. (我们需要将这个架子固定到墙上，以防它掉下来。)<br>词源：<br>来自古英语中“ancor”，意为“铁制重物”。</li></ol><h1 id="16-lag"><a href="#16-lag" class="headerlink" title="16. lag"></a>16. lag</h1><p>[英]· &#x2F;læɡ&#x2F;<br>[n.] 1. 落后，滞后；2. （游戏中）延迟，卡顿<br>[v.] 1. 走得慢或落后；2. 延迟，拖延</p><p>例句：</p><ol><li>The company is lagging behind its competitors in terms of sales.<br>（这家公司在销售方面落后于竞争对手。）</li><li>I’m experiencing a bit of lag while playing this online game.<br>（我在玩这个在线游戏时遇到了一些延迟。）</li><li>Don’t lag behind, we need to catch up with the rest of the group.<br>（不要落后了，我们需要赶上其他人。）</li></ol><p>词源：可能来自于瑞典语的“låg”，意为“低下”。</p><h1 id="17-context"><a href="#17-context" class="headerlink" title="17. context"></a>17. context</h1><p>[英]· &#x2F;ˈkɒntekst&#x2F;  美· &#x2F;ˈkɑːn-&#x2F;<br>[n.] 上下文；背景；环境<br>例句：</p><ol><li>The meaning of a word often depends on its context. (一个词的意义常常取决于它所处的上下文。)</li><li>It’s important to consider the historical context when studying literature. (研究文学时考虑历史背景很重要。)</li><li>Without proper context, it can be difficult to understand someone’s intentions or actions. (没有适当的背景，理解某人的意图或行为可能会很困难。)<br>词源：<br>来自拉丁语“contextus”，意为“编织、联系”。</li></ol><h1 id="18-backpropagation"><a href="#18-backpropagation" class="headerlink" title="18. backpropagation"></a>18. backpropagation</h1><p>[英]· &#x2F;ˌbækprəʊpəˈɡeɪʃ(ə)n&#x2F;<br>[n.] 反向传播（一种神经网络训练算法）<br>例句：</p><ol><li>Backpropagation is a widely used algorithm for training artificial neural networks.<br>（反向传播是一种广泛应用于人工神经网络训练的算法。）</li><li>The backpropagation algorithm adjusts the weights of the connections in the network to minimize the difference between its output and the desired output.<br>（反向传播算法通过调整网络中连接的权重来最小化其输出与期望输出之间的差异。）</li><li>One limitation of backpropagation is that it can get stuck in local minima during optimization, leading to suboptimal solutions.<br>（反向传播的一个局限性是在优化过程中可能会陷入局部极小值，导致次优解决方案。）<br>词源：<br>由“back”和“propagation”两个单词组合而成，意为“后向传递”。</li></ol><h1 id="19-unroll"><a href="#19-unroll" class="headerlink" title="19. unroll"></a>19. unroll</h1><p>[英]· &#x2F;ʌnˈrəʊl&#x2F;<br>[v] 展开，打开；取消（计划等）<br>例句：</p><ol><li>She unrolled the scroll and began to read.<br>她展开卷轴开始阅读。</li><li>The company decided to unroll their new marketing strategy next month.<br>公司决定下个月推出他们的新营销策略。</li><li>He carefully unrolled the map on the table.<br>他小心翼翼地在桌子上展开了地图。<br>词源：<br>un-表示“不”，+ roll表示“滚动”→不再滚动→展开</li></ol><h1 id="20-tranverse"><a href="#20-tranverse" class="headerlink" title="20. tranverse"></a>20. tranverse</h1><p>[英]· &#x2F;trænsvɜːs&#x2F;  美· &#x2F;trænsˈvɜrs&#x2F;<br>[形容词] 横向的；横断的<br>[动词] 横过，穿过<br>例句：</p><ol><li>The river is too deep to tranverse on foot. (这条河太深了，无法步行穿越。)</li><li>The road tranverses the mountain range, offering stunning views along the way. (这条路横跨山脉，在途中提供惊人的景色。)</li><li>The beam of light tranversed the room, illuminating every corner. (光束穿过房间，照亮了每个角落。)<br>词源：<br>来自拉丁语“transversus”，意为“横向的”。</li></ol><h1 id="21-flow"><a href="#21-flow" class="headerlink" title="21. flow"></a>21. flow</h1><p>[英]· &#x2F;fləʊ&#x2F;  [美]· &#x2F;floʊ&#x2F;<br>[n.] 流动；流量；流程<br>[v.] 流动；涌现；（尤指）轻松自如地行动或说话<br>例句：</p><ol><li>The river flows into the sea. (这条河流入了大海。)</li><li>Ideas flowed freely during the brainstorming session. (头脑风暴会议期间，思路畅通无阻。)</li><li>She has a natural flow in her movements when she dances. (她跳舞时的身姿自然优雅。)<br>词源：<br>来自古英语的“flowan”，意为“流动”。</li></ol><h1 id="22-concatenate"><a href="#22-concatenate" class="headerlink" title="22. concatenate"></a>22. concatenate</h1><p>[英]· &#x2F;kənˈkat.ɪ.neɪt&#x2F;<br>[v.] 连接，串联<br>例句：</p><ol><li>You can concatenate two strings using the plus operator.<br>（你可以使用加号运算符来连接两个字符串。）</li><li>The program will concatenate all the files in the folder into one document.<br>（该程序将把文件夹中的所有文件连接成一个文档。）</li><li>In Excel, you can use the CONCATENATE function to join text from different cells together.<br>（在Excel中，您可以使用CONCATENATE函数将不同单元格中的文本拼接在一起。）<br>词源：<br>来自拉丁语“concatenare”，意为“链接”。</li></ol><h1 id="23-scratch"><a href="#23-scratch" class="headerlink" title="23. scratch"></a>23. scratch</h1><p>[英]· &#x2F;skrætʃ&#x2F;<br>[n.] 划痕；抓痕；起跑线<br>[v.] 抓；搔；刮掉</p><p>例句：</p><ol><li>She got a scratch on her arm from the cat. (她的手臂上被猫抓了一道口子。)</li><li>He scratched his head, trying to remember where he put his keys. (他挠了挠头，试图想起他放钥匙的地方。)</li><li>The athlete was disqualified for starting before the scratch line. (那位运动员因为在起跑线之前出发而被取消比赛资格。)</li></ol><p>词源：来自古英语“screccan”，意为“刻、割”。</p><h1 id="24-overhead"><a href="#24-overhead" class="headerlink" title="24. overhead"></a>24. overhead</h1><p>[英]· &#x2F;ˈəʊvəhed&#x2F; ; [美]· &#x2F;ˈoʊvərˌhɛd&#x2F;<br>[n.] 1. (建筑)高架部分；(机器等的)上方，顶部；2. (商业、财务)间接费用，管理费用；3. (体育运动)头顶过球（或杆）的方式<br>例句：</p><ol><li>The overhead lights in the room were too bright.<br>（房间里的高架灯光太亮了。）</li><li>We need to cut down on our overhead costs if we want to increase profits.<br>（如果我们想增加利润，就需要削减管理费用。）</li><li>She scored a goal with an impressive overhead kick.<br>（她以令人印象深刻的头球破门得分了。）<br>词源：由 over 和 head 组成，意为“在头顶上方”。</li></ol><h1 id="25-discrepancy"><a href="#25-discrepancy" class="headerlink" title="25. discrepancy"></a>25. discrepancy</h1><p>[英]· &#x2F;dɪˈskrepənsi&#x2F;   [美]· &#x2F;dɪˈskrɛpənsi&#x2F;<br>[n.] 差异；不一致<br>例句：</p><ol><li>There is a discrepancy between the two reports.<br>（这两份报告之间存在差异。）</li><li>The discrepancy in their stories raised suspicions.<br>（他们故事中的不一致引起了怀疑。）</li><li>We need to investigate the discrepancy and find out what went wrong.<br>（我们需要调查这个差异，找出问题所在。）<br>词源：<br>来自拉丁语“discrepare”，意为“不同、相互矛盾”。</li></ol><h1 id="26-preliminary"><a href="#26-preliminary" class="headerlink" title="26. preliminary"></a>26. preliminary</h1><p>[英]· &#x2F;prɪˈlɪmən(ə)ri&#x2F;<br>[形] 初步的；预备性的；开端的</p><ol><li>Preliminary results suggest that the treatment is effective. (初步结果表明这种治疗是有效的。)</li><li>The team conducted a preliminary investigation into the accident. (团队对事故进行了初步调查。)</li><li>We need to do some preliminary work before we can start the project. (在开始项目之前，我们需要做一些预备工作。)<br>词源：来自拉丁语“praeliminarius”，意为“先行的”。</li></ol><h1 id="27-overcast"><a href="#27-overcast" class="headerlink" title="27. overcast"></a>27. overcast</h1><p>[英]· &#x2F;ˈəʊvəkɑːst&#x2F; ; [美]· &#x2F;ˈoʊvərkæst&#x2F;<br>[形容词] 阴天的；阴暗的<br>[动词] （使）变阴暗；（使）变昏暗<br>例句：</p><ol><li>The sky was overcast and the air was chilly.<br>（天空阴沉，空气寒冷。）</li><li>It’s been overcast all day, but it hasn’t rained yet.<br>（整天都是阴天，但还没有下雨。）</li><li>The mood of the movie is quite overcast, with a lot of dark scenes and sad music.<br>（这部电影的情绪相当沉闷，有很多黑暗场景和悲伤音乐。）<br>词源：<br>来自中古英语“ouercasten”，意为“遮盖”。</li></ol><h1 id="28-ordinal"><a href="#28-ordinal" class="headerlink" title="28. ordinal"></a>28. ordinal</h1><p>[英]· &#x2F;ˈɔːdɪn(ə)l&#x2F;   [美]· &#x2F;ˈɔrdənl&#x2F;<br>[n.] 序数，序号；[adj.] 顺序的，等级的<br>例句：</p><ol><li>The ordinal numbers are first, second, third, etc.<br>（序数包括第一、第二、第三等。）</li><li>He was promoted to the rank of cardinal in recognition of his services to the church.<br>（他因为对教会做出的贡献而被提升为红衣主教。）</li><li>In this experiment, we need to record the ordinal position of each subject’s response.<br>（在这个实验中，我们需要记录每个受试者反应的顺序位置。）<br>词源：<br>来自拉丁语“ordinalis”，意思是“按次序排列的”。</li></ol><h1 id="29-intrinsic"><a href="#29-intrinsic" class="headerlink" title="29. intrinsic"></a>29. intrinsic</h1><p>[英]· &#x2F;ɪnˈtrɪnsɪk&#x2F;<br>[形容词] 固有的，内在的；本质的<br>例句：</p><ol><li>The value of the artwork is not just in its extrinsic factors, but also in its intrinsic beauty. (艺术品的价值不仅在于其外部因素，还在于其内在美)</li><li>She has an intrinsic talent for music that cannot be taught. (她天生具备音乐才华，这是无法教授的)</li><li>The company’s success can be attributed to the hard work and dedication of its employees, as well as their intrinsic motivation to succeed. (公司成功归功于员工们的努力和奉献精神，以及他们固有的成功动力)<br>词源：来自拉丁语intrinsecus，“从内部”，由in-“inside”和trinsecus“outward”的组合构成。</li></ol><h1 id="30-extrinsic"><a href="#30-extrinsic" class="headerlink" title="30. extrinsic"></a>30. extrinsic</h1><p>[英]· &#x2F;ɪkˈstrɪnzɪk&#x2F;   [美]· &#x2F;ɛkˈstrɪnsɪk&#x2F;<br>[形容词] 外在的；非本质的；无关联的<br>例句：</p><ol><li>The extrinsic rewards of the job, such as salary and benefits, were not enough to motivate him.<br>（工作的外部奖励，如薪水和福利，不足以激励他。）</li><li>His motivation for volunteering was purely extrinsic; he only did it to impress his boss.<br>（他志愿服务的动机纯粹是为了外在因素，只是为了给老板留下好印象。）</li><li>The extrinsic factors that led to her success included a supportive family and access to quality education.<br>（导致她成功的外部因素包括支持性家庭和接触到优质教育资源。）<br>词源：来自拉丁语“extrinsecus”，意思是“从外面来”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.12.6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(46周)</title>
      <link href="/2023/06/13/words(week50)/"/>
      <url>/2023/06/13/words(week50)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-complement"><a href="#1-complement" class="headerlink" title="1. complement"></a>1. complement</h2><p>[英]· &#x2F;ˈkɒmplɪmənt&#x2F;   [美]· &#x2F;ˈkɑːmpləment&#x2F;<br>[n.] 补充物；补足语；余角；互补色<br>[v.] 补充，完善（某事物）；使完备<br>例句：</p><ol><li>The wine was a perfect complement to the meal. (这种酒是这顿餐的绝佳搭配。)</li><li>This scarf complements your outfit nicely. (这条围巾很好地与你的服装相得益彰。)</li><li>The new employee’s skills perfectly complemented those of her colleagues. (新员工的技能与她的同事们非常互补。)</li></ol><p>词源：来自拉丁语“complēmentum”，意为“完成、填满”。</p><h2 id="2-suffice"><a href="#2-suffice" class="headerlink" title="2. suffice"></a>2. suffice</h2><p>[英]· &#x2F;səˈfaɪs&#x2F;<br>[v] 足够；满足需要<br>例句：</p><ol><li>One cup of coffee will suffice for now. (一杯咖啡现在足够了。)</li><li>The evidence presented should suffice to prove his guilt. (提供的证据应该足以证明他的罪行。)</li><li>A simple apology will not suffice in this situation. (在这种情况下，简单的道歉是不够的。)<br>词源：<br>来自中古英语 sufficen，意为“使满足”或“充分”。</li></ol><h2 id="3-humbersome"><a href="#3-humbersome" class="headerlink" title="3. humbersome"></a>3. humbersome</h2><p>[英]· &#x2F;ˈhʌmbəs(ə)m&#x2F;<br>[形] 笨重的；麻烦的；累赘的<br>例句：</p><ol><li>The old piano was so cumbersome that it took four people to move it. (那架旧钢琴太笨重了，需要四个人才能搬动。)</li><li>The new regulations have made the process much more cumbersome than before. (新规定使得这一过程比以前更加麻烦。)</li><li>Carrying all of those heavy boxes up the stairs was a very cumbersome task. (把所有那些沉重的箱子搬上楼梯是一个非常累赘的任务。)<br>词源：来自中古英语“homen”（困难）和“som”后缀（表示性质或状态）。</li></ol><h2 id="4-concise"><a href="#4-concise" class="headerlink" title="4. concise"></a>4. concise</h2><p>[英]· &#x2F;kənˈsaɪs&#x2F;<br>[形] 简明的，简洁的<br>例句：</p><ol><li>His speech was concise and to the point. (他的演讲简明扼要。)</li><li>The article is written in a very concise style. (这篇文章写得非常简练。)</li><li>She gave us a concise summary of the main points. (她给我们提供了主要观点的简洁概述。)<br>词源：<br>来自拉丁语“concisus”，意为“切断、削减”。</li></ol><h2 id="5-exhaustive"><a href="#5-exhaustive" class="headerlink" title="5. exhaustive"></a>5. exhaustive</h2><p>[英]· &#x2F;ɪɡˈzɔːstɪv&#x2F; ; [美]· &#x2F;ɪɡˈzɑːstɪv&#x2F;<br>[形容词] 彻底的；详尽无遗的；彻头彻尾的<br>例句：</p><ol><li>The report provides an exhaustive analysis of the situation. (报告提供了对情况的详尽分析。)</li><li>She conducted an exhaustive search for her missing keys. (她进行了一次全面搜寻，以找到丢失的钥匙。)</li><li>The team made an exhaustive effort to finish the project on time. (团队做出了全力以赴，以按时完成项目。)<br>词源：<br>来自拉丁语 exhaustus（过度使用、耗竭），由 ex-（向外）+ haurire（吸入、抽取）构成。</li></ol><h2 id="6-abbreviation"><a href="#6-abbreviation" class="headerlink" title="6.abbreviation"></a>6.abbreviation</h2><p>[英]· &#x2F;əˌbriːviˈeɪʃn&#x2F;<br>[n.] 缩写，缩略语<br>例句：</p><ol><li>Please use the abbreviation “etc.” instead of writing out every item.<br>请使用缩写“等等”而不是逐个列出每一项。</li><li>NASA is an abbreviation for National Aeronautics and Space Administration.<br>NASA 是国家航空航天局的缩写。</li><li>The word “Mr.” is an abbreviation for “Mister”.<br>单词“Mr.”是“先生”的缩写。<br>词源：<br>来自拉丁语 abbreviatio（减少），由 ab-（向外）和 brevis（短）组成。</li></ol><h2 id="7-disjoint"><a href="#7-disjoint" class="headerlink" title="7. disjoint"></a>7. disjoint</h2><p>[英]· &#x2F;dɪsˈdʒɔɪnt&#x2F;<br>[动] 分离的，不相连的；分裂的；脱节的<br>例句：</p><ol><li>The two issues are completely disjoint.<br>（这两个问题完全没有关联。）</li><li>The company’s various departments were disjoint and uncoordinated.<br>（公司各部门之间缺乏联系和协调。）</li><li>His argument was so disjoint that nobody could understand it.<br>（他的论点非常杂乱无章，没人能够理解它。）<br>词源：来自于拉丁语“disjunctus”，意为“分开”。</li></ol><h2 id="8-homogeneous"><a href="#8-homogeneous" class="headerlink" title="8. homogeneous"></a>8. homogeneous</h2><p>[英]· &#x2F;ˌhɒmə(ʊ)ˈdʒiːniəs&#x2F;  或  &#x2F;-dʒeɪn-&#x2F;   [美]· &#x2F;ˌhoʊməˈdʒiniəs&#x2F;<br>[形容词] 同种的；同质的；均匀的<br>例句：</p><ol><li>The mixture should be homogeneous before adding the next ingredient. (在加入下一个成分之前，混合物应该是均匀的。)</li><li>The population of this town is relatively homogeneous in terms of ethnicity and religion. (这个城镇的人口在族裔和宗教方面相对单一。)</li><li>Homogeneous tiles are easier to clean than textured ones. (与有纹理的瓷砖相比，同质瓷砖更易清洁。)<br>词源：来自希腊语 “homogenēs”，由 “homo-“（相同）和 “-genēs”（产生）组成，意为“产生相同或类似物质”。</li></ol><h2 id="9-mitigate"><a href="#9-mitigate" class="headerlink" title="9. mitigate"></a>9. mitigate</h2><p>[英]· &#x2F;ˈmɪtɪɡeɪt&#x2F; ; [美]· &#x2F;ˈmɪtəˌgeɪt&#x2F;<br>[v] 缓和，减轻，使缓和；[v] 为罪过辩解<br>例句：</p><ol><li>The new policy should help mitigate the effects of climate change. (新政策应该有助于缓解气候变化的影响。)</li><li>We need to find ways to mitigate the risks involved in this project. (我们需要找到方法来减轻这个项目所涉及的风险。)</li><li>He tried to mitigate his crime by claiming that he was acting under duress. (他试图通过声称自己是在被迫情况下行事来为自己的罪行辩护。)</li></ol><p>词源：来自拉丁语 “mitigare”，由 “mitis”（温和）+ “-igare”（动词后缀）组成，意思是“使某物更加温和”。</p><h2 id="10-evasion"><a href="#10-evasion" class="headerlink" title="10. evasion"></a>10. evasion</h2><p>[英]· &#x2F;ɪˈveɪʒən&#x2F;<br>[n.] 逃避，回避；借口<br>例句：</p><ol><li>He was arrested for tax evasion. (他因为逃税被捕了。)</li><li>She made no attempt at evasion. (她没有试图回避。)</li><li>His answer was an obvious evasion of the question. (他的回答显然是对问题的回避。)<br>词源：<br>来自拉丁语“evasio”，意为“逃脱”。</li></ol><h2 id="11-schematic"><a href="#11-schematic" class="headerlink" title="11. schematic"></a>11. schematic</h2><p>[英]· &#x2F;skɪˈmætɪk&#x2F;<br>[形] 概要的；示意性的；图解的</p><ol><li>The schematic diagram shows the basic structure of the machine. (这张示意图展示了机器的基本结构。)</li><li>He presented a schematic plan for the project at the meeting. (他在会议上提出了一个项目概要计划。)</li><li>The teacher drew a schematic diagram on the blackboard to explain how electricity flows in a circuit. (老师在黑板上画了一张电路图来解释电流如何流动。)<br>词源：来自希腊语 σχηματικός（schēmatikos），意为“关于形式或外观的”。</li></ol><h2 id="12-velocity"><a href="#12-velocity" class="headerlink" title="12. velocity"></a>12. velocity</h2><p>[英]· &#x2F;vəˈlɒsəti&#x2F;<br>[n.] 速度；迅速</p><p>例句：</p><ol><li>The velocity of the car was too high for the road conditions. (车辆的速度对路况来说太高了。)</li><li>Sound travels at a constant velocity in air. (声音在空气中以恒定的速度传播。)</li><li>The rocket reached a velocity of over 20,000 miles per hour. (火箭达到了每小时超过20,000英里的速度。)</li></ol><p>词源：<br>from Latin “velocitas”, from “velox” meaning swift</p><h2 id="13-compensate"><a href="#13-compensate" class="headerlink" title="13. compensate"></a>13. compensate</h2><p>[英]· &#x2F;ˈkɒmpənseɪt&#x2F;  美· &#x2F;ˈkɑːmpənseɪt&#x2F;<br>[v] 赔偿；补偿；抵消<br>例句：</p><ol><li>The company will compensate the workers for their overtime.<br>（公司将为工人的加班支付补偿。）</li><li>He was compensated for his injuries in the accident.<br>（他因事故受伤得到了赔偿。）</li><li>The increase in salary is intended to compensate for inflation.<br>（薪资增长旨在弥补通货膨胀带来的影响。）<br>词源：<br>from Latin compensatus, past participle of compensare “to weigh one thing (against another),” thus, “to counterbalance,” from com-, intensive prefix (see com-), + pensare, frequentative of pendere “to weigh” (from PIE root *(s)pen- “to draw, stretch, spin”).</li></ol><h2 id="14-oscillation"><a href="#14-oscillation" class="headerlink" title="14. oscillation"></a>14. oscillation</h2><p>[英]· &#x2F;ˌɒs.əˈleɪ.ʃən&#x2F;  美· &#x2F;ˌɑː.səˈleɪ.ʃən&#x2F;<br>[n.] 振荡，摆动；波动；振幅变化<br>例句：</p><ol><li>The pendulum’s oscillation was measured with a stopwatch.<br>（用秒表测量了钟摆的振荡。）</li><li>The stock market experienced wild oscillations in the past week.<br>（股市在过去一周经历了疯狂的波动。）</li><li>The sound of the guitar came from the oscillation of its strings.<br>（吉他声音来自于弦的振动。）<br>词源：<br>Latin “oscillatio” (swinging)</li></ol><h2 id="15-swinging"><a href="#15-swinging" class="headerlink" title="15. swinging"></a>15. swinging</h2><p>[英]· &#x2F;ˈswɪŋɪŋ&#x2F;<br>[形容词] 摇摆的；活跃的；时髦的<br>[动词] (swing 的现在分词) 摇摆；荡秋千；（价格、情况等）波动不定<br>例句：</p><ol><li>The children were happily swinging in the park. (孩子们在公园里开心地荡秋千。)</li><li>She’s always been into the swinging lifestyle. (她一直喜欢时髦生活方式。)</li><li>The stock market has been swinging wildly this week. (股市本周波动剧烈。)<br>词源：<br>来自 swing 的现在分词形式，意为“摇摆”。</li></ol><h2 id="16-amplify"><a href="#16-amplify" class="headerlink" title="16. amplify"></a>16. amplify</h2><p>[英]· &#x2F;ˈæmplɪfaɪ&#x2F;  美· &#x2F;ˈæmpləˌfaɪ&#x2F;<br>[v.] 放大，增强；详述，阐明<br>例句：</p><ol><li>The microphone amplifies the sound of your voice. (麦克风放大了你的声音。)</li><li>She amplified on her earlier remarks. (她对自己早先的话进行了详细说明。)</li><li>We need to amplify our marketing efforts to reach more customers. (我们需要加大营销力度以吸引更多客户。)<br>词源：<br>来自拉丁语“amplificare”，由“amplus”（广泛）和“facere”（做）组成，意为“扩张、放大”。</li></ol><h2 id="17-elastic"><a href="#17-elastic" class="headerlink" title="17. elastic"></a>17. elastic</h2><p>[英]· &#x2F;ɪˈlæstɪk&#x2F;  美· &#x2F;ɪˈlæstɪk&#x2F;<br>[形容词] 有弹性的；灵活的；可伸缩的<br>[名词] 橡皮圈，松紧带<br>例句：</p><ol><li>The waistband of these pants is made of elastic material, so it can stretch to fit different sizes.<br>（这条裤子的腰带是用有弹性的材料制成的，因此可以拉伸以适应不同尺码。）</li><li>Rubber bands are a type of elastic that can be used for many purposes, such as holding things together or launching small objects.<br>（橡皮筋是一种多功能松紧带，可以用于许多目的，如固定物品或发射小物体。）</li><li>The elasticity of the skin allows it to return to its original shape after being stretched or compressed.<br>（皮肤具有弹性，在被拉伸或压缩后能够恢复原来的形状。）<br>词源：来自拉丁语“elasticus”，意为“有弹力”。</li></ol><h2 id="18-exert"><a href="#18-exert" class="headerlink" title="18. exert"></a>18. exert</h2><p>[英]· &#x2F;ɪɡˈzəːt&#x2F; 或 &#x2F;ɛɡˈzəːt&#x2F;<br>[v.] 施加，运用（力量、能力等）<br>例句：</p><ol><li>She had to exert all her strength to lift the heavy box. (她不得不发挥出全部的力气来举起那个沉重的盒子。)</li><li>The coach urged the players to exert themselves more in training. (教练督促球员们在训练中更加努力。)</li><li>He has been exerting his influence behind the scenes for years. (多年来他一直在幕后施展影响力。)<br>词源：<br>源自拉丁语“exsertus”，意为“伸出”。</li></ol><h2 id="19-inertia"><a href="#19-inertia" class="headerlink" title="19. inertia"></a>19. inertia</h2><p>[英]· &#x2F;ɪˈnɜːʃə&#x2F; ; [美]· &#x2F;ɪnˈɝʃə&#x2F;<br>[n.] 惯性；惰性；迟钝<br>例句：</p><ol><li>The company’s inertia prevented it from adapting to changing market conditions. (公司的惯性使其无法适应不断变化的市场条件。)</li><li>He blamed his lack of progress on his own inertia and laziness. (他把自己缺乏进展归咎于自己的惰性和懒散。)</li><li>The car continued moving forward due to its inertia even after the engine was turned off. (即使发动机关闭，汽车也因为它的惯性而继续向前移动。)<br>词源：<br>来自拉丁语“iners”，意为“无能、懒散”。</li></ol><h2 id="20-overshoot"><a href="#20-overshoot" class="headerlink" title="20. overshoot"></a>20. overshoot</h2><p>[英]· &#x2F;ˌəʊvəˈʃuːt&#x2F;  或 &#x2F;ˈəʊvəʃuːt&#x2F;<br>[动词] 超过；超出范围；过度反应<br>[名词] 过冲，超调<br>例句：</p><ol><li>The missile overshot its target by several miles. (导弹超出目标几英里。)</li><li>Don’t overshoot the mark or you’ll regret it later. (不要超越标志，否则你以后会后悔的。)</li><li>The stock market has been known to overshoot both on the upside and downside. (股市已经被证明在上涨和下跌方面都有可能过度反应。)<br>词源：<br>over- + shoot（射击）</li></ol><h2 id="21-amplitude"><a href="#21-amplitude" class="headerlink" title="21. amplitude"></a>21. amplitude</h2><p>[英]· &#x2F;ˈæmp.lɪ.tjuːd&#x2F;  美· &#x2F;ˈæm.plə.tud&#x2F;<br>[n.] 振幅；广度；充足，丰富<br>例句：</p><ol><li>The amplitude of the sound wave determines its volume. (声波的振幅决定了它的音量。)</li><li>The amplitude of her generosity was truly remarkable. (她的慷慨程度真是令人惊叹。)</li><li>The earthquake had an amplitude of 7 on the Richter scale. (这次地震在里氏震级上达到了7级。)<br>词源：<br>来自拉丁语 “amplitudo”，意为“广阔”。</li></ol><h2 id="22-saturated"><a href="#22-saturated" class="headerlink" title="22. saturated"></a>22. saturated</h2><p>[英]· &#x2F;ˈsætʃəreɪtɪd&#x2F;   [美]· &#x2F;ˈsætʃəreɪtəd&#x2F;<br>[形容词] 饱和的；浸透的；深颜色的<br>例句：</p><ol><li>The sponge was completely saturated with water. (这个海绵完全被水浸透了。)</li><li>This painting uses a lot of saturated colors to create a bold effect. (这幅画使用了很多鲜艳的颜色来营造大胆的效果。)</li><li>Eating too much saturated fat can increase your risk of heart disease. (摄入过多饱和脂肪会增加患心脏病的风险。)<br>词源：<br>来自拉丁语 saturatus，意为“使充满”。</li></ol><h2 id="23-Dashed-line-是指由短线组成的线条，通常用于图表或图形中表示特定的数据或含义。在图表中，虚线通常用于表示预测值或估计值，与实线区分开来。"><a href="#23-Dashed-line-是指由短线组成的线条，通常用于图表或图形中表示特定的数据或含义。在图表中，虚线通常用于表示预测值或估计值，与实线区分开来。" class="headerlink" title="23. Dashed line 是指由短线组成的线条，通常用于图表或图形中表示特定的数据或含义。在图表中，虚线通常用于表示预测值或估计值，与实线区分开来。"></a>23. <strong>Dashed line</strong> 是指由短线组成的线条，通常用于图表或图形中表示特定的数据或含义。在图表中，虚线通常用于表示预测值或估计值，与实线区分开来。</h2><p>其他类似的线型包括：</p><ul><li><strong>Dotted line</strong>：由一系列点组成的线条，也常用于图表中表示特定的数据或含义。</li><li><strong>Solid line</strong>：实线，用于表示实际数据或已知值。</li><li><strong>Double line</strong>：双实线，有时用于强调特定部分或表示重要性。</li></ul><h2 id="24-pulley"><a href="#24-pulley" class="headerlink" title="24. pulley"></a>24. pulley</h2><p>[英]· &#x2F;ˈpʊli&#x2F;<br>[n.] 滑轮；滑车<br>例句：</p><ol><li>The weight was lifted up by the pulley. (重物被滑轮吊起来了。)</li><li>The rope runs over a pulley at the top of the mast. (绳子在桅杆顶部的滑轮上运行。)</li><li>He used a pulley to hoist the flag up the pole. (他用滑轮把旗帜升到了杆顶。)<br>词源：<br>from Old French polie, from Latin polivus ‘pivot’, from Greek polos ‘axis’.</li></ol><h2 id="25-rigid"><a href="#25-rigid" class="headerlink" title="25. rigid"></a>25. rigid</h2><p>[英]· &#x2F;ˈrɪdʒɪd&#x2F;<br>[形] 1. 僵硬的；不灵活的；严格的<br>2. （规则、方法等）死板的，刻板的<br>3. （思想、态度等）固执己见的，顽固不化的</p><p>例句：</p><ol><li>The rigid metal frame made the chair uncomfortable to sit in for long periods of time. (坚硬无比的金属框架使得这把椅子长时间坐下来很不舒服。)</li><li>He has a very rigid schedule and doesn’t like to deviate from it. (他有一个非常严格死板的日程表，不喜欢偏离它。)</li><li>Her parents have very rigid beliefs about what is right and wrong, which can make it difficult for her to express herself freely around them.(她父母对是非对错有着非常固执己见和刻板教条式信仰，这让她在他们面前自由表达变得很难。)</li></ol><p>词源：来自拉丁语 “rigidus”（僵硬、刚性）。</p><h2 id="26-loop"><a href="#26-loop" class="headerlink" title="26. loop"></a>26. loop</h2><p>[英]· &#x2F;luːp&#x2F;<br>[n.] 环，圈；循环；回路<br>[v.] 使成环状，绕圈子；重复</p><p>例句：</p><ol><li>The belt is fastened with a loop.<br>（皮带用一个环扣住。）</li><li>This program has an infinite loop.<br>（这个程序有一个无限循环。）</li><li>She looped the rope around the post.<br>（她把绳子绕在柱子上。）</li></ol><p>词源：来自于古英语的“hlup”，意为“弯曲、卷起”。</p><h2 id="27-jargon"><a href="#27-jargon" class="headerlink" title="27. jargon"></a>27. jargon</h2><p>[英]· &#x2F;ˈdʒɑː.ɡən&#x2F; ; [美]· &#x2F;ˈdʒɑr.ɡən&#x2F;<br>[n.] 行话；术语；黑话<br>例句：</p><ol><li>He used so much jargon that I couldn’t understand a word he said.<br>（他使用了太多的行话，我一个词也听不懂。）</li><li>The article is full of technical jargon that only experts can understand.<br>（这篇文章充满了只有专家才能理解的技术术语。）</li><li>Lawyers are known for their use of legal jargon.<br>（律师以使用法律术语而闻名。）<br>词源：来自中世纪拉丁文“gaggire”，意为“嘎吱作响”。</li></ol><h2 id="28-resonance"><a href="#28-resonance" class="headerlink" title="28. resonance"></a>28. resonance</h2><p>[英]· &#x2F;ˈrɛzənəns&#x2F;   [美]· &#x2F;ˈrɛzənəns&#x2F;<br>[n.] 共鸣；共振；反响<br>[物理学] 谐振，共振</p><ol><li>The sound of the bell echoed through the valley with a deep resonance.<br>（钟声在山谷中回荡，发出深沉的回声。）</li><li>The singer’s voice had a beautiful resonance that filled the concert hall.<br>（歌手的嗓音有着美丽的共鸣，充满了音乐厅。）</li><li>When tuning an instrument, it is important to find its natural resonance frequency.<br>（调音乐器时，找到其自然谐振频率非常重要。）</li></ol><p>词源：来自拉丁语“resonantia”，意为“回响”。</p><h2 id="29-stiffness"><a href="#29-stiffness" class="headerlink" title="29. stiffness"></a>29. stiffness</h2><p>[英]· &#x2F;ˈstɪfnəs&#x2F;<br>[n.] 僵硬；刚性；顽固<br>例句：</p><ol><li>The stiffness in his joints made it difficult for him to move. (他关节的僵硬使得他难以移动。)</li><li>The stiffness of the material makes it suitable for use in construction. (这种材料的刚性使其适用于建筑领域。)</li><li>She was criticized for her stiffness and lack of flexibility in negotiations. (她因在谈判中过于顽固和缺乏灵活性而受到批评。)<br>词源：<br>来自 stīfian（变得僵硬）</li></ol><h2 id="30-rephrase"><a href="#30-rephrase" class="headerlink" title="30. rephrase"></a>30. rephrase</h2><p>[英]· &#x2F;riːˈfreɪz&#x2F;  美· &#x2F;riːˈfreɪz&#x2F;<br>[动词] 改述，改写，重新表达<br>例句：</p><ol><li>Can you rephrase that sentence? (你能把那个句子改一下吗？)</li><li>Let me rephrase what I said earlier. (让我重新说一下我之前的话。)</li><li>She asked me to rephrase my answer in simpler terms. (她要求我用更简单的语言来重述我的回答。)<br>词源：re-（再次）+ phrase（短语、措辞），意为“再次措辞”。</li></ol><h2 id="31-backlash"><a href="#31-backlash" class="headerlink" title="31. backlash"></a>31. backlash</h2><p>[英]· &#x2F;ˈbæklæʃ&#x2F;<br>[n.] 强烈反对；强烈抵制；后座力<br>例句：</p><ol><li>The new policy caused a backlash among the public. (新政策引起了公众的强烈反对。)</li><li>There was a huge backlash against the company after the scandal broke out. (丑闻曝光后，公司遭到了巨大的抵制。)</li><li>His comments on social media received an immediate and severe backlash from users. (他在社交媒体上发表的评论立即引起了用户的强烈反感。)<br>词源：<br>来自 back（向后）+ lash（鞭打），意为“被鞭打向后跳”的动作，引申为“强烈反对”。</li></ol><h2 id="32-shuffle"><a href="#32-shuffle" class="headerlink" title="32. shuffle"></a>32. shuffle</h2><p>[英]· &#x2F;ˈʃʌfl&#x2F;<br>[n.] 洗牌；拖着脚走；混乱的状态<br>[v.] 拖曳着脚步行走；洗牌；搞乱，弄糊涂</p><ol><li>He shuffled his feet nervously. (他紧张地拖着脚步。)</li><li>She shuffled the cards and dealt them out to the players. (她洗了牌并发给玩家们。)</li><li>The papers on my desk were all shuffled up after the earthquake. (地震后我桌上的文件都被搅乱了。)</li></ol><p>词源：可能来自于德语“schüffeln”，意为“推动、移动”。</p><h2 id="33-probe"><a href="#33-probe" class="headerlink" title="33. probe"></a>33. probe</h2><p>[英]· &#x2F;prəʊb&#x2F;<br>[n.] 探针；探测器；调查<br>[v.] 探究，探测；审问<br>例句：</p><ol><li>The spacecraft carries a probe to study the planet’s atmosphere. (这艘宇宙飞船携带了一个探测器来研究行星的大气层。)</li><li>Police are probing allegations of corruption within the company. (警方正在调查公司内部腐败的指控。)</li><li>Scientists used a probe to measure the temperature inside the volcano. (科学家使用了一个探针来测量火山内部的温度。)<br>词源：<br>from Latin probare “to test, prove”</li></ol><h2 id="34-perception"><a href="#34-perception" class="headerlink" title="34. perception"></a>34. perception</h2><p>[英]· &#x2F;pəˈsɛpʃ(ə)n&#x2F;  美· &#x2F;pɚˈsɛpʃən&#x2F;<br>[n] 感知，知觉；洞察力；看法，观点<br>例句：</p><ol><li>His perception of the situation was completely wrong. (他对这种情况的感知完全错误。)</li><li>The artist’s work challenges our perceptions of reality. (艺术家的作品挑战了我们对现实的认识。)</li><li>Our perception of beauty is influenced by cultural and personal factors. (我们对美的感知受到文化和个人因素的影响。)<br>词源：<br>来自拉丁语 perceptio，意为“获取、领悟”。</li></ol><h2 id="35-perceive"><a href="#35-perceive" class="headerlink" title="35. perceive"></a>35. perceive</h2><p>[英]· &#x2F;pəˈsiːv&#x2F;<br>[v] 感知，察觉；理解，领悟<br>例句：</p><ol><li>I perceive a change in his attitude towards me. (我感觉到他对我的态度有所改变。)</li><li>She perceived that he was not telling the truth. (她意识到他没有说实话。)</li><li>He failed to perceive the danger of the situation. (他未能意识到这种情况的危险性。)<br>词源：<br>来自拉丁语“percipere”，由“per”（完全）和“capere”（抓住）组成，原义为“完全抓住”。</li></ol><h2 id="36-emit"><a href="#36-emit" class="headerlink" title="36. emit"></a>36. emit</h2><p>[英]· &#x2F;ɪˈmɪt&#x2F;<br>[v] 发出，放射；发行，发布<br>例句：</p><ol><li>The chimney emitted thick smoke. (烟囱冒出了浓烟。)</li><li>The radio station emits a strong signal. (这个广播电台发射强信号。)</li><li>The factory was found to be emitting toxic waste into the river. (工厂被发现向河里排放有毒废料。)<br>词源：<br>来自拉丁语“emittere”，意为“发送、投掷”。</li></ol><h2 id="37-aperture"><a href="#37-aperture" class="headerlink" title="37. aperture"></a>37. aperture</h2><p>[英]· &#x2F;ˈæpətjʊə(r)&#x2F;; [美]· &#x2F;ˈæpɚtʃɚ&#x2F;<br>[n.] 孔径；光圈；开口；孔隙<br>例句：</p><ol><li>Adjusting the aperture can change the depth of field in a photograph. (调整光圈可以改变照片的景深。)</li><li>The camera’s aperture controls how much light enters the lens. (相机的光圈控制着进入镜头的光线量。)</li><li>The telescope has a large aperture, allowing for clear views of distant objects. (这个望远镜有一个大孔径，能够清晰地观察远处的物体。)<br>词源：<br>来自拉丁语“apertura”，意为“打开、敞开”。</li></ol><h2 id="38-stereoscopic"><a href="#38-stereoscopic" class="headerlink" title="38. stereoscopic"></a>38. stereoscopic</h2><p>[英]· &#x2F;ˌsteriəˈskɒpɪk&#x2F;  美· &#x2F;ˌstɛriəˈskɑpɪk&#x2F;<br>[形容词] 立体的；立体感觉的<br>例句：</p><ol><li>The movie was shot in stereoscopic 3D.<br>（这部电影是用立体摄像机拍摄的。）</li><li>Stereoscopic vision allows us to perceive depth and distance.<br>（立体视觉使我们能够感知深度和距离。）</li><li>Some people have difficulty experiencing the full effect of stereoscopic images due to visual impairments.<br>（由于视力障碍，有些人很难完全感受到立体图像的效果。）<br>词源：<br>来自希腊语 στερεός (stereos)，意为“实心、固态”，以及 -scopic，意为“看”。</li></ol><h2 id="39-align"><a href="#39-align" class="headerlink" title="39. align"></a>39. align</h2><p>[英]· &#x2F;əˈlaɪn&#x2F;<br>[v] 使排成一行，调整；[计算机] 对齐<br>例句：</p><ol><li>We need to align the text to the left.<br>（我们需要把文本左对齐。）</li><li>The wheels on my car are not aligned properly.<br>（我的车轮没有正确地对准。）</li><li>You can use this button to align the image with the text.<br>（你可以使用这个按钮来将图像与文本对齐。）<br>词源：<br>来自中古法语的“aligner”，意为“排列”。</li></ol><h2 id="40-cumbersome"><a href="#40-cumbersome" class="headerlink" title="40. cumbersome"></a>40. cumbersome</h2><p>[英]· &#x2F;kʌm’bərs(ə)m&#x2F;<br>[形] 笨重的；难处理的；复杂的<br>例句：</p><ol><li>The old machine was too cumbersome to move easily. (这台旧机器太笨重了，不容易移动。)</li><li>The new regulations are quite cumbersome and will require a lot of paperwork. (新规定相当繁琐，需要大量文书工作。)</li><li>She found the dress very beautiful, but it was so cumbersome that she couldn’t dance in it. (她觉得那件裙子很漂亮，但是太笨重了，穿着它跳舞不方便。)<br>词源：来自中古英语“combersum”，意为“麻烦”。</li></ol><h2 id="41-flip-·-x2F-flɪp-x2F"><a href="#41-flip-·-x2F-flɪp-x2F" class="headerlink" title="41. flip · &#x2F;flɪp&#x2F;"></a>41. flip · &#x2F;flɪp&#x2F;</h2><p>在这个句子中，“flip”是一个成语的一部分。整个成语是“flip-flop”，意思是反复无常或矛盾不一致。这个词通常用来描述人们的行为或态度。</p><p>例如：</p><ul><li>She’s been flipping back and forth on whether to take the job or not.（她一直在考虑是否接受那份工作，犹豫不决。）</li><li>The politician’s flip-flopping on the issue has caused a lot of confusion among voters.（政治家对该问题的反复无常使选民感到困惑。）</li><li>His flip-flopping between two different opinions made it hard for us to trust him.（他在两种不同观点之间摇摆不定，让我们很难相信他。）</li></ul><p>“Flip”本身也可以表示快速地移动、轻弹或翻转等含义。<br>例如：</p><ul><li>He flipped through the pages of the book, looking for a specific passage.（他快速地翻阅书页，寻找特定段落。）</li><li>She flipped her hair over her shoulder and smiled at me.（她把头发甩到肩膀上，朝我微笑着。）</li></ul><p>flop · &#x2F;flɑp&#x2F;<br>在这个句子中，“flop”是一个成语的一部分。整个成语是“flip-flop”，意思是反复无常或摇摆不定。这个词通常用来描述人们的行为或决策，尤其是当他们经常改变主意时。</p><p>例如：</p><ul><li>She’s been flip-flopping on the issue for weeks.（她已经几周来对这个问题反复无常了。）</li><li>The politician was criticized for his flip-flopping stance on the controversial bill.（那位政治家因在有争议的法案上态度反复而受到批评。）</li><li>I wish he would make up his mind and stop flip-flopping all the time.（我希望他能下定决心，停止总是犹豫不决。）</li></ul><p>简单地说，“flip-flop”就像一个人左右摇晃、不能做出明确决策的形象化表达方式。</p><p>词汇搭配：</p><ul><li>do a flip-flop：突然改变立场</li><li>political flip-flops：政治上的立场转变</li></ul><h2 id="42-optical"><a href="#42-optical" class="headerlink" title="42. optical"></a>42. optical</h2><p>[英]· &#x2F;ˈɒptɪk(ə)l&#x2F; 或 &#x2F;ˈɑːptɪk(ə)l&#x2F;<br>[形容词] 光学的；视觉的；光学仪器的<br>例句：</p><ol><li>Optical illusions can be quite fascinating.<br>（光学幻觉可以非常迷人。）</li><li>The telescope uses optical lenses to magnify distant objects.<br>（望远镜使用光学透镜来放大远处的物体。）</li><li>Optical fibers are used in telecommunications to transmit information over long distances.<br>（光纤在电信中被用于长距离传输信息。）<br>词源：<br>来自希腊语 optikos，意为“关于视力的”。</li></ol><h2 id="43-extrinsic"><a href="#43-extrinsic" class="headerlink" title="43. extrinsic"></a>43. extrinsic</h2><p>[英]· &#x2F;ɪkˈstrɪnzɪk&#x2F;   [美]· &#x2F;ɛkˈstrɪnsɪk&#x2F;<br>[形容词] 外在的；非本质的；无关联的<br>例句：</p><ol><li>The extrinsic rewards of the job, such as salary and benefits, were not enough to motivate him.<br>（工作的外部奖励，如薪水和福利，不足以激励他。）</li><li>His motivation for volunteering was purely extrinsic; he only did it to impress his boss.<br>（他志愿服务的动机纯粹是为了外在因素，只是为了给老板留下好印象。）</li><li>The extrinsic factors that led to her success included a supportive family and access to resources.<br>（导致她成功的外部因素包括支持性家庭和资源获取渠道。）<br>词源：来自拉丁语“extrinsecus”，意思是“从外面来”。</li></ol><h2 id="44-coordinate"><a href="#44-coordinate" class="headerlink" title="44. coordinate"></a>44. coordinate</h2><p>[英]· &#x2F;kəʊˈɔːdɪneɪt&#x2F; 或 &#x2F;koʊˈɔrdnət&#x2F;<br>[n] 同等的人；同等物；坐标；配合<br>[v] 协调，使协调；使一致<br>例句：</p><ol><li>The two groups are working in close coordination to achieve their goals. (两个团队正在密切协作以实现他们的目标。)</li><li>We need to coordinate our efforts if we want to succeed. (如果我们想要成功，我们需要协调我们的努力。)</li><li>She is responsible for coordinating the project from start to finish. (她负责从开始到结束协调这个项目。)</li></ol><p>词源：来自拉丁语 “co-“（共同）和 “ordinare”（命令、安排）。</p><h2 id="45-calibration"><a href="#45-calibration" class="headerlink" title="45. calibration"></a>45. calibration</h2><p>[英]· &#x2F;ˌkælɪˈbreɪʃən&#x2F;<br>[n.] 校准，标定<br>例句：</p><ol><li>The calibration of the instrument needs to be checked regularly. (仪器的校准需要定期检查。)</li><li>The technician adjusted the calibration of the machine to improve its accuracy. (技术人员调整了机器的标定以提高其精度。)</li><li>Before using the scale, make sure it has undergone proper calibration. (使用秤之前，请确保它经过了适当的校准。)<br>词源：<br>来自于拉丁语“calibrare”，意为“将（量具）刻度”。</li></ol><h2 id="46-stereo"><a href="#46-stereo" class="headerlink" title="46. stereo"></a>46. stereo</h2><p>[英]· &#x2F;ˈsteriəʊ&#x2F;  美· &#x2F;ˈstɛrioʊ&#x2F;<br>[n.] 声像式立体声；立体声音响设备<br>[adj.] 立体声的，双声道的<br>例句：</p><ol><li>I love listening to music in stereo.<br>（我喜欢听立体声音乐。）</li><li>This stereo system has great sound quality.<br>（这个立体声系统有很好的音质。）</li><li>The concert was recorded in stereo and sounds amazing.<br>（这场演唱会是用立体声录制的，听起来非常棒。）<br>词源：来自希腊语“stereos”，意为“实心、三维”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.12.18 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习之道</title>
      <link href="/2023/06/13/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/"/>
      <url>/2023/06/13/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/xuexizhidao/glasses-1052010_1280.jpg"></p><h2 id="3-学习即创造"><a href="#3-学习即创造" class="headerlink" title="3.学习即创造"></a>3.学习即创造</h2><p>在紧凑的专注模式后，利用发散模式的方法奖励自己<br><strong>激活发散模式的一般方法</strong></p><ul><li>去健身房</li><li>参加运动，如踢足球或打篮球</li><li>慢跑、散步或游泳</li><li>跳舞</li><li>开车兜风（或者搭个顺风车）</li><li>绘画或者涂鸦</li><li>淋个浴或是泡个澡</li><li>听音乐，尤其是纯音乐</li><li>用乐器演奏熟悉的歌曲</li><li>冥想或者祷告</li><li>睡觉（召唤发散模式的终极法宝！）</li></ul><p><strong>以下激活发散模式的方法，最适合小小地用一下，给自己个奖励。</strong><br>（因为比起上述活动，下面提到的这些也许反而会把你拖进更专注的状态里。）</p><ul><li>打电子游戏</li><li>上网</li><li>和朋友聊天</li><li>主动帮助别人处理个小任务</li><li>阅读休闲读物</li><li>给朋友发短信</li><li>去看电影或戏剧</li><li>看电视节目（让你昏昏欲睡的节目可不算）</li></ul><p><strong>本章小结</strong></p><ol><li>学习概念和难题时，先让专注模式打头阵，它完成第一轮战斗后，就轮到发散模式了。</li><li>放松一下，做点别的！一旦工作期间出现了挫败感，转移注意力就该随之出现，让隐藏在后台的发散模式运转起来。</li><li>学好数学和科学最好的办法就是“每天进步一点点”</li><li>让两种模式有足够的时间各行其是，你才能理解自己所学的知识。牢固的神经结构就是这样建立起来的。如果你有拖延问题，试着计时25分钟来一心一意地投入工作，别让发短信、上网或其他分心的事物上门打扰。</li><li>间隔性重复有助于把信息从工作记忆转移到长期记忆。</li><li>睡眠</li></ol><p>站起来放松一下——喝杯水，吃点零食，或者想象自己是一个绕着桌子运动的电子。一边走动一边回想这一章的主要内容。<br>制定一套计划，保证一天之内能及时复习</p><p><strong>关于创造力的建议</strong></p><ol><li>创造力是数量上的竞争</li><li>战胜恐惧</li><li>再多做几次总会成功</li><li>批评使我们更优秀，把作品展示给别人</li><li>接受分歧</li></ol><h2 id="4-组块构建与避免能力错觉"><a href="#4-组块构建与避免能力错觉" class="headerlink" title="4.组块构建与避免能力错觉"></a>4.组块构建与避免能力错觉</h2><p>要熟练地掌握数学和科学知识，就要创造一些概念组块——这是通过意义将分散的信息碎片组合起来的过程<br>与其过度学习，不如穿插学习<br>常把知识挂嘴边<br>离开平时的学习地点，到别处回想材料，可以让人从不同的角度看待问题，从而增进理解<br>避免照猫画虎：联系改变思维<br>与其过度学习，不如<strong>穿插学习</strong><br><strong>本章小结</strong></p><ol><li>练习有助于形成理解的概念组块，神经模型从频繁的练习中产生，它们自动联结形成组块，而组块和习惯有着密切的联系。</li><li>练习能让人思维流畅敏捷，这正是考试需要的<ul><li>构建组块的必需品：专注力(focused attention)，对基本概念的理解(understanding)，练习来获取宏观北极那个信息</li></ul></li><li>简单回想，试着关上书回忆要点，是促进组块形成的最好办法之一</li><li>下次和一位家庭成员、朋友或同学在一起的时候，复述你已经学到的内容</li></ol><h2 id="5-预防拖延"><a href="#5-预防拖延" class="headerlink" title="5.预防拖延"></a>5.预防拖延</h2><p>现实就是，我们拖延的，往往是让我们感到不安的事情。<br>但如果你开始对某件事游刃有余，自然就会乐在其中了。<br>拖延会成瘾。</p><h2 id="6-小恶魔无处不在"><a href="#6-小恶魔无处不在" class="headerlink" title="6.小恶魔无处不在"></a>6.小恶魔无处不在</h2><p>如同拖延，习惯有四个组成部分：</p><ul><li>信号；比如清单上的一个任务，朋友发来的一条短信</li><li>反应程序；大脑接收到信号时做出的常规性的、习惯性的反应。改变的关键在于制订计划。培养新习惯可能会很有用</li><li>奖励机制；一个小小的自我称赞</li><li>信念：但你对新系统效果的坚信不疑，能够助你渡过难关<br>“心理对照”（mental contrasting）也是一种有效的办法。————好日子在后面<br>通过关注过程而非结果进入思绪<br>分解工作量才能细嚼慢咽：专注而简短地工作<br>要关注“番茄时间”，即时长25分钟的工作时段，而不要专注于完成任务。<br>即刻开始行动。这个建议听起来相当简单，但良好的开端是成功的一半。<br>将注意力放在过程而非结果上，可以让你避免对自己做出评价，（我快完成任务了吗？）并让你更放松地沉浸到工作进程中。</li></ul><h2 id="7-搭建组块对抗发懵"><a href="#7-搭建组块对抗发懵" class="headerlink" title="7.搭建组块对抗发懵"></a>7.搭建组块对抗发懵</h2><p>搭建强大组块的步骤</p><ol><li>全程在纸上解决一个重难点题目。（要保证的是，你有现成答案，不管是你以前做过这题，还是书中已有解答。但是不到万不得已，千万不要看答案。）在下手解题之前，或还没彻底得到答案之前，千万不能偷看答案，不能跳过任何步骤，或自欺欺人地说“太好了，搞定了”。要确保每个步骤都有理有据。</li><li>重做一次，要格外注意关键步骤。如果你觉得重做同一道题有点奇怪，可以想想看，你不可能只弹一遍吉他就学会一首歌，也不可能只举一次哑铃就算完成了锻炼。</li><li>休息一下。如果需要，你可以去研究下这门学科的其他内容，之后就去干点别的。比如做兼职、学习不同学科，或者去打打篮球。你要给发散模式留出足够的时间，让它去消化这个问题。</li><li>睡眠。在你睡觉前，把这个问题再过一遍。如果卡住了，那么就反过来去聆听问题的声音。你的潜意识会告诉你接下来该怎么做。</li><li>再来一次。第二天尽快地把这个问题再做一遍。这个时候你会发现，自己能做到更迅速地解题。你对这问题应该会有更深层次的理解。你甚至不明白自己当初为何会卡在这个问题上。到了这会儿，你就能神速计算每一步了。多关注问题中最困扰你的那个部分。这种持续关注难点的做法，叫作“刻意练习”。尽管这样做有时让人疲惫，但它是高效学习的最重要方面之一。（它的替代或者补充做法，是去解答一个相似的问题，看看能不能轻而易举地拿下它。）</li><li>给自己添新题。再挑一道重难点题目，用之前做第一道题的相同方法来解这道题。本题答案会变成你组块资料库中的第二个组块。在解这道新题时，重复1~5步。如果已对这个题目得心应手，就去做下一道。你会惊喜地发现，尽管你的组块库只有几个固化组块，但已经可以大大提高你对学习材料的掌握程度，以及高效解决新题的能力。</li><li>“主动”重复。走去图书馆的路上，或是锻炼的时候，可以在头脑中回想解决某个题目的关键步骤。你也可以利用等公交、坐车，或者是等教授走进教师前摆弄拇指的闲余时间。这种主动排演能提高你回想关键概念的能力，有助于在家庭作业或考试中回想要点。</li></ol><p>到此。这些就是搭建组块资料库的关键步骤。你正在做的就是建立和强化不断联结在一起的神经元网络，让你的组块更丰富、更强大。这里用到的原理就是生成效应。相比单纯重复阅读，生成（即回想）材料可以帮助你更有效地学习。</p><h2 id="8-工具、建议和小技巧"><a href="#8-工具、建议和小技巧" class="headerlink" title="8.工具、建议和小技巧"></a>8.工具、建议和小技巧</h2><ol><li><p>小技巧：</p><ul><li>把自己至于新环境下，没有太多干扰的信号</li><li>冥想</li><li>改造自己的关注点，运用正面思维技巧，“快人”毫不拖沓地负面情绪放一边，对自己说，“<strong>别浪费时间了，现在就动手吧。只要你动手做事情，感觉就会好很多了</strong>”。</li></ul><p> 克服拖延的正面手段<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我告诉我的学生，只要他们能遵守以下三个原则，拖延一下也没事。</span><br><span class="line">1.在拖延期间不要去开电脑。电脑总让人难以自拔。</span><br><span class="line">2.趁还没开始拖延，先看看家庭作业里最简单的几道题。（这会儿还不必动手去做。）</span><br><span class="line">3.在小纸片上抄下待解决的等式或方程，到哪都随身带着，直到它们让你觉得拖不下去了，再回来做作业。</span><br></pre></td></tr></table></figure><br> 我发现这个方法对我帮助很大，因为它让问题徘徊在发散模式中，甚至在拖延期间，学生也一直会对这个问题进行思考。</p><ul><li>你的自我验证，至少应该从克服拖延开始。记录下自己完不成或者想完成的事、拖延对你的暗示，还有出窍状态（zombie-mode）下的习惯性反应是如何应对拖延暗示的。通过记录这些反应，你可以对自身施加微小的压力，来改变自己应对拖延暗示的方式，并逐渐改进工作习惯。</li><li>行动日志：简要写出下一个星期要做的关键任务清单，一周写一次。之后，每天列一个清单，写出可执行可完成的合理任务量。试着在前一天晚上写出第二天的日行计划清单。<br> 根据记录着“截止日期”的日历，你会写出下一周要做的20来个关键待办事项。每晚，再根据周待办清单写下次日待办清单。日待办事项保持为5~10个即可。</li><li>计划什么时候放下手中的活，和计划什么时间工作一样重要。一般来说，我的目标是在下午5点结束工作，尽管我学的是新知识，如果能在晚上休息时间或睡前回顾一下会是一件开心的事，尽管偶尔有重要的项目即将收尾。</li><li>我桌上的相框里有张纸，上面写着工业工程师的起薪。不能专心于手上任务的时候，我就看看它，提醒自己，现在的努力一定会在将来兑现。</li><li>·让“开心一刻”成为你生活计划的一部分，是预防拖延的最关键要务之一。同时也是一个能让你避免拖延的最重要原因。</li></ul></li></ol><h2 id="9-拖延的小恶魔总结篇"><a href="#9-拖延的小恶魔总结篇" class="headerlink" title="9.拖延的小恶魔总结篇"></a>9.拖延的小恶魔总结篇</h2><p>写下三个能在几分钟之内就能完成的“微型任务”。记住，幸运女神会眷顾那些愿意尝试之人，所以只要尽全力做那些有意义的事就可以了。<br>这个时候闭上眼睛，告诉自己没什么其他可以担心的，只要专注于手头上列出的第一个微型任务就可以了。（我说“闭上眼睛”并不是在开玩笑，记住，这样能帮助你摆脱之前的思维方式。[9]采用番茄工作法也许是个不错的主意。你能在25分钟内读完本章节的头几页吗<br>你可能需要三个月的适应期来接受一套全新的、让自己舒服的习惯。要有耐心，遵循常识，不要想一口就吃成个胖子，巨大的改变可能不会持久，而失败只会让你越来越没有勇气。<br>每件事都要写在计划日志或者笔记本上，比如作业的截止日期、工作时间，以及几点跟我的朋友们出去玩。<br>回想一个你拖延了的挑战。什么样的想法会帮助你克服拖延？比如，你可能会想：“其实并没有这么困难，等我开始做的时候事情就会变得容易了一些，有时候做一些我不喜欢的事情其实是好事，回报是值得的。</p><ul><li>记行程日志。这样当你实现自己的目标之后，就可以回头追踪并了解哪些是有效的方法，哪些是无效的方法。</li><li>每天都对自己承诺要完成一定的惯常事务和任务。</li><li>在晚上睡觉前写下你计划的任务，这样你的大脑就有时间详细考虑你的目标，从而帮助你确保能够成功。</li><li>把你的工作细化成一系列小挑战。总是确保你（和你的小恶魔）得到足够的回馈。花几分钟时间尽情地享受幸福和胜利的快感。</li><li>要慎重选择时间，直到你完成了这个任务才能奖励自己。</li><li>小心拖延的信号。</li><li>让自己身处少有拖延信号干扰的新环境中，比如安静的图书馆。</li><li>障碍总会出现，但不要把你自己的问题全都归咎于外部因素。如果每件事都是别人的错，那就是时候好好审视一下自己了。</li><li>相信自己的新时间系统。注意力集中的时候就要努力工作，该休息的时候要足够相信自己去休息，不要有负罪感。</li><li>如果仍然无法摆脱拖延，要有后备计划。毕竟没有人是完美的。</li><li>做第一个吃螃蟹的人。</li><li>享受做小白鼠的时光！</li></ul><p><img src="/images/xuexizhidao/girl-3528292_1280.jpg"></p><h2 id="10-增强你的记忆力"><a href="#10-增强你的记忆力" class="headerlink" title="10.增强你的记忆力"></a>10.增强你的记忆力</h2><p>不论古今，高手都用过这些记忆手段，这让他们充分开发了自己与生俱来的特大视觉空间记忆能力。</p><ol><li>记忆宫殿法<br>记忆宫殿法需要你回想一个你熟悉的空间，比如自己家的布局，然后把它当成视觉形象的记事本，用来存储你想要记住的概念形象<br>记忆辅助——无论是助记图像、顺口溜，还是假想的“宫殿”，它们之所以会管用，是因为能在你要开小差时帮你集中注意力。就算起初你编造的字面含义十分可笑，但它们也能让你注意到意义对记忆的重要性。简言之，记忆法让你平时的学习更有意义、印象更深，也更有趣味。</li></ol><ul><li>记忆宫殿法——将有助于记忆的形象嵌入你熟悉的场景中，让自己感受视觉记忆系统赋予的力量。</li><li>学着以更加训练有素且别具创意的方式来使用记忆，会有助于集中注意力，就算为了增强记忆而创造出天马行空的关联也没关系。</li><li>理解后再去记忆，你会对学习材料记忆犹新。随着思维宝库的不断强化，总有一天你会成为学习真正的主人。</li></ul><h2 id="11-记忆技巧多多益善"><a href="#11-记忆技巧多多益善" class="headerlink" title="11. 记忆技巧多多益善"></a>11. 记忆技巧多多益善</h2><ol><li>为它量身打造一个比喻或类比</li><li>间隔重复有助于向记忆存储概念。卡片——考自己——过一遍放到一边——重复几天，每天早上或晚上几分钟——一次次延长回忆名字的重复间隔</li></ol><ul><li>创建意群</li><li>背诵口诀（一定要警惕，分清楚什么是事实，而什么只是帮助记忆的比喻或类比。）<br>编故事，动手写， 肌肉记忆， 自言自语</li></ul><p>·比喻可以帮你更快地学会难懂的概念。<br>·重复是在记忆消退前对其进行巩固的必要动作。<br>·意群和口诀可以帮你简化学习内容，构成组块，这样就能更轻松地存储记忆了。<br>·编故事，哪怕故事听起来会有点笨拙，但它也会让学习内容更好记。<br>·写和说在一定上都有加强记忆的作用。<br>·体育锻炼对新的神经元生长、新联结形成有强大的促进作用</p><h2 id="12-学会自我欣赏"><a href="#12-学会自我欣赏" class="headerlink" title="12. 学会自我欣赏"></a>12. 学会自我欣赏</h2><p>组块，就能让你的身体随之而动，而不必总要回想击球的所有复杂步骤<br>训练，尤其是对学习材料中最困难的部分更要刻意训练，这样才能让那些拥有普通智力的人有机会上升到“天赋异禀”的境界</p><h2 id="13-塑造你的大脑"><a href="#13-塑造你的大脑" class="headerlink" title="13. 塑造你的大脑"></a>13. 塑造你的大脑</h2><p>合成内容（synthesis）是一种神经模型，它可以是抽象化内容、组块或主旨概念。高质量组块构成的神经模型，不仅能与我们钻研的学科产生共鸣，也能在其他学科或生活领域产生反响。抽象化能让概念从一个领域转到另一个领域<br>通过比喻或实体类比也能构造组块<br>快速学习数学和科学的关键，是要意识到每个所学概念几乎都可以与你已有的知识进行类比，这就是做比较。<br>比喻或实体类比也能构造组块，这些组块能使一个截然不同的领域的概念对另一个领域产生影响。</p><p>合上书，转开视线，想想本章有哪些主要思想？你会发现，如果把这些主要思想联系到你的生活工作中，回想会更容易些。</p><h2 id="14-借方程的诗歌打开心灵之眼"><a href="#14-借方程的诗歌打开心灵之眼" class="headerlink" title="14. 借方程的诗歌打开心灵之眼"></a>14. 借方程的诗歌打开心灵之眼</h2><p>思想能表现为语言就能表现为形象</p><p>新手看方程，不过就是在记忆中互不相关的海量方程中添加一个记忆内容。然而，层次更高的学生和物理学家，能在心中看见方程背后的意义，能看见它是怎样被置于宏观背景之下的，甚至会对方程的一些部分感同身受。<br>数学家要有些诗人气质，才算得上名副其实。<br>——卡尔·魏尔斯特拉斯（Karl Weierstrass）德国数学家</p><p>尽管科学家不这么表述，但他们会经常将方程看作一种诗歌形式，以此可以迅速用符号记下他们正尝试去看清和理解的事。</p><p>简化学习内容并对其拟人<br>努力学习数学和科学的时候，我们能做的最重要的一件事，就是给脑中的抽象概念赋予生命。<br><strong>费曼法</strong>，这个方法要求人们找到简单的比喻或类比来帮助他们理解概念要旨。</p><p>但是注意，当你和身边的人谈论学习的时候发生了什么。在试图对他人和自己做出解释时，你常会惊奇地发现，理解常常是解释的产物，而非先有理解才有解释。这就是为什么老师常说，他们第一次真正理解教学材料，是在自己去教学生的时候。</p><p>迁移：把所学的知识运用到新背景中<br>拖延问题最严重的一个方面，就是不停打断自己注意力去查看手机短信、电子邮件或其他更新，这会干扰迁移的进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">·方程只是抽象和简化概念的方法。这说明，方程包含的深层含义，与诗歌中的深层内涵有相似之处。</span><br><span class="line">·你的“心灵之眼”之所以重要，是因为它帮你在脑中排演，并把学过的知识拟人化。</span><br><span class="line">·迁移是把所学知识从一个知识背景应用到别处的能力。</span><br><span class="line">·关键是要掌握一个数学概念的组块精髓，这会有利于概念迁移和将之应用到新途径中。</span><br><span class="line">·在学习过程中一心多用会让学习无法深入，这样会限制你迁移所学知识的能力。</span><br></pre></td></tr></table></figure><h2 id="15-学习的复兴"><a href="#15-学习的复兴" class="headerlink" title="15. 学习的复兴"></a>15. 学习的复兴</h2><p>以学生为中心的学习方法是，学生要克服困难互相学习，并引导自己来掌握学习材料，这方法有着极好的学习效果。<br>这机会一出现，就要把握住。要训练自己克服“囫囵吞枣”的学习阶段，并迫使自己直击问题真正要害，而不是借机会向老师炫耀自己学过什么。<br>同时一定要对指导你的人心怀感恩，重要的是要让他们知道，他们的帮助是有意义的。<br>最好的做法是重新梳理思路，然后听听老师的建议。当你最终明白了答案，就可以回头纠正你以前犯过的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">·自主学习是一种最深入、最有效的学习方式：</span><br><span class="line">·自主学习能够提高你独立思考的能力；</span><br><span class="line">·有时它会帮你解答出老师的奇怪考题。</span><br><span class="line">·在学习中，毅力往往比智力更重要。</span><br><span class="line">·锻炼自己去接触那些你敬仰的人。你会结识学识渊博的新导师，往往他们的一席话可能会改变你的未来。但是请爱惜他们的时间。</span><br><span class="line">·如果你没能快速掌握学习材料的重点，不要灰心。常让人惊讶的是，“学得慢”的学生会抓住根本问题，而这些部分通常为进度较快的学生所遗漏。真正了解前因后果能让你从更深层次理解问题。</span><br><span class="line">·人人都是既有竞争意识又有合作意识。总是会有人批评或低估所有你付出的努力，你要学着对这些问题淡然处之。</span><br></pre></td></tr></table></figure><h2 id="16-避免自负"><a href="#16-避免自负" class="headerlink" title="16. 避免自负"></a>16. 避免自负</h2><p>当你回头检查时，你的左右脑之间才有了更多互动的机会，互相取长补短，从不同角度发挥各自的能力</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">·即使你自信一切没有任何问题，专注模式还是会让你不经意地犯下致命的错误。温故知新，不同的神经活动过程可以让你重新审视结果，抓出错误。</span><br><span class="line">·和愿意提出不同见解的伙伴一起讨论，可以：</span><br><span class="line">·找出你想法中的错误；</span><br><span class="line">·更容易学会随机应变，更好地应对有压力的处境；</span><br><span class="line">·确保你真的理解了你想让别人解释的知识，巩固已有的知识并提高学习能力；</span><br><span class="line">·建立起重要的职业关系，帮你做出更好的选择。</span><br><span class="line">·学习中的批评，无论你是批评者还是被批评者，都应该客观对待。它们是在帮助你理解所处理的问题。</span><br><span class="line">·小心不要自欺欺人。</span><br></pre></td></tr></table></figure><p><img src="/images/xuexizhidao/man-1869624_1280.jpg"></p><h2 id="17-参加考试"><a href="#17-参加考试" class="headerlink" title="17. 参加考试"></a>17. 参加考试</h2><h3 id="备考检查清单"><a href="#备考检查清单" class="headerlink" title="备考检查清单"></a>备考检查清单</h3><p>只有经常做到以下描述的事情，才能回答“是”（偶尔做到或从没做到选“否”）。</p><p><strong>家庭作业</strong></p><p>__是__否　1.你有没有尽力去理解课本内容？（带着目的去找相关例题不算在内。）</p><p>__是__否　2.你是否有跟同学一同解决作业问题，或者至少跟他们核对过答案？</p><p>__是__否　3.你在跟同学合作之前，有没有先试着自己大致写出每道题的解法？</p><p><strong>备考</strong><br>__是__否　4.你是否积极地参与了家庭作业的小组讨论（贡献点子，提出问题）？</p><p>__是__否　5.当你遇到困难的时候，有没有请教老师或助教？</p><p>__是__否　6.你交作业的时候，是否完全理解了所有问题的答案？</p><p>__是__否　7.当不明白家庭作业的题目解法时，你有没有在课上提问寻求解释？</p><p>__是__否　8.如果你有学习指导手册，你有在考试前仔细通读过一遍吗？确定手册上的所有题目都会做了吗？</p><p>__是__否　9.你有没有试过快速列出解题纲要，而不在基础计算上花时间？</p><p>__是__否　10.你是否有和同学一起复习过学习指导手册和问题，并互相提问？</p><p>__是__否　11.如果考前有复习课，你是否参加过，并在课上提出任何你不太确定的问题？</p><p>__是__否　12.你在考前有没有保证合理的睡眠？（如果这个问题的答案是“否”的话，那前面1~11的答案可能都不重要了。）</p><p>__是__否　总分</p><p>先从难题入手，但是马上跳回简单题目。开始做题时，就先做看起来最难的那道。不过要做好准备，一旦你发现自己已经一两分钟没有进展，或者感觉可能想偏了，就要立刻抽身出来<br><strong>由难入简</strong>法会把首个最难题目装进你的大脑，然后转移注意力。靠这两步就能让发散模式开始运转了<br>这个方法唯一的难度在于，一旦你发现已经过去了一两分钟却仍止步不前，就必须足够自觉地从这道题目中抽身。对于大多数学生来说，这轻而易举。但对于有些人，则需要一定的自律和意志力才办得到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">·考前一晚睡眠不足会让你之前所做的任何其他准备都付之东流。</span><br><span class="line"></span><br><span class="line">·考试是一件严肃的事。像战斗机飞行员或医生一样仔细检查备考清单，能大幅度地提高你的成功率。</span><br><span class="line"></span><br><span class="line">·就像由难入简法，一些有悖常识的策略会让你的大脑有机会反思难度更大的题目，就算当时你正专注于解答其他更直观浅显的题目。</span><br><span class="line"></span><br><span class="line">·在压力下人的身体会释放出一些化学物质。让一切结果决然不同的关键，就在于你如何看待身体对这些化学物质的反应。如果你转变思维，不去想“我好怕这次考试”，而是想“这次考试让我好激动，我要做到最好”，你的表现会大有改观。</span><br><span class="line"></span><br><span class="line">·如果你在考试中感到恐慌，可以暂时把注意力转移到自己的呼吸上来。放松腹部，把手放在上面，慢慢地深吸一口气。你应感到手在向外移动，甚至同时感到整个胸腔如一个膨胀的桶在向外扩张。</span><br><span class="line"></span><br><span class="line">·你的大脑会欺骗你，让你以为自己做的就是对的，即使事实并非如此。这意味着，只要条件允许，你应该跳过它，转移一下注意力，然后从全局视角二次检查自己的答案，问自己：“这样解答真的合理吗？”</span><br></pre></td></tr></table></figure><p>另外一个技巧和正念（mindfulness）有关。[5]这个技巧需要你学会区分两个概念：一种是自然产生的想法（我下周有个重要的考试）；另一种是随之而来的情感投射（如果我不及格，我就会被逐出本专业，那时我该如何是好啊）。这些附随其后的想法，是发散模式投射出的浮光掠影，甚至只需简单练习上几周，学着重新看待这些念头和感觉，把它们看作单纯附随的情感投射，似乎就能帮助你的大脑放松和平静下来。比起纯粹努力去遏制这种干扰性念头，改变自己的应对方式效果会好更多。学生若能花上几周来练习这种正念，将会有更好的考试表现，受到那些念头的干扰也会减少。<br>我鼓励那些有考试恐惧症的人，带着模拟试卷去另一个教室做（到你能溜进去的大课，神不知鬼不觉地混在教室后排）。</p><h2 id="18-释放无限潜力"><a href="#18-释放无限潜力" class="headerlink" title="18. 释放无限潜力"></a>18. 释放无限潜力</h2><h3 id="10个好的学习法则"><a href="#10个好的学习法则" class="headerlink" title="10个好的学习法则"></a>10个好的学习法则</h3><ol><li><p>运用回想。读完一页书，看向别处并回想主要观点。少做标记，没记住之前不要画重点，要先回忆。在去教室的路上或不同于先前学习空间的室内，试着回忆要点。回忆的能力，即能够得到自己心中的想法，是学好知识的关键标志之一。</p></li><li><p>自我测试。任何内容皆可测试。无论何时皆可测试。抽认卡片是你的良师益友。</p></li><li><p>对问题进行组块。搭建组块的过程就是理解问题、练习解题方法的过程，有了组块才能在脑中瞬间闪现答案。解决一个问题之后，要将其重新排演一遍。确保在许久没接触这道题后，你还能解答出问题的每个步骤。把问题当成一首歌，在心里学着一遍遍地唱，这样让信息合成为一个流畅的组块，任何时候都能任你提取使用。</p></li><li><p>间隔开重复动作。无论学哪门课，不要安排得太集中，要像运动员一样每天安排些练习量。你的大脑就像一块肌肉，它一次只能处理某学科上一定的练习量。</p></li><li><p>在练习中交替使用不同解题技巧。做任何练习的期间不要只用一种解题技巧，否则一段时间过后，你只是在模仿自己之前解题的老路子。解题方法要混合使用在不同的题型上。这么做会让你同时知道如何以及何时用一个解题方法。（书本一般都不会以这样的方式编写，所以你需要靠自己去这么做。）每一门作业和考试之后，要回顾错题，确保理解自己的犯错原因，之后重新解答一遍。想要最高效地学习，就在抽认卡片的一面用手写（别用键盘打字）下问题，再在另一面写下答案。（用手书写比起打字时构建的神经结构更坚实。）如果你想把它上传到智能手机的应用软件里，你也许会把卡片拍下来。你可以用不同的题型随机测试自己。另一个测试自己的方法，是随机翻开书本挑一个问题，看看自己能不能在很久没碰这道题之后还能给出解答。</p></li><li><p>注意休息。有一种常见现象，是学数学或科学时，你会难以解答或理解一些初次遇到的问题或概念。这就是为什么每天学一点，比集中在一天学会好很多。当你对一道数学或科学上的难题灰心丧气时，可以休息一下，这样你大脑的另一部分就能在后台接着工作。</p></li><li><p>使用解释性的提问和简单类比。无论何时遇到难懂概念的困扰，都要自己想一想，怎样解释才能让10岁小孩都明白这个概念？使用类比真的有用，比如电流就像水流。不要只想解释，要大声说出来或者写下来。凭着嘴上说手上写的功夫，你能把所学知识编译（将知识转换到神经记忆结构中）到更深的记忆中。</p></li><li><p>专注。关掉手机和电脑上所有会干扰你的提示音和闹铃，并在计时器上设定25分钟。你要在25分钟之内集中注意力，并尽可能勤奋工作。计时器的时间一到，给自己一个小小的、有趣的奖励。一天中安排几个这样的工作期间，能实实在在地推进你的学习进度。试着规定学习时间和地点，不要瞄电脑和手机，让学习变得自然而然。</p></li><li><p>困难的事情最先做。最清醒的时候，要去做一天中最困难的事情。</p></li><li><p>心理对照。想象过去的你，对比通过学习能够成就的那个自己。在你的工作区域贴一张图或几句话来提醒自己的梦想。如果觉得自己缺乏动力了，就看看它们。对你和你爱的人，这么做一定值得！</p></li></ol><h3 id="10个坏的学习法则"><a href="#10个坏的学习法则" class="headerlink" title="10个坏的学习法则"></a>10个坏的学习法则</h3><p>你要避免这些方法，因为它们会浪费你的时间，甚至还会让你以为自己真的在学习！</p><ol><li><p>被动重复阅读。很被动地坐着看书，目光再次扫过书页上看过的内容。除非你能闭卷回忆要点，证明读过的材料进入了你的大脑，否则重复阅读就是浪费时间。</p></li><li><p>满眼尽是重点标记。在文中标记重点，会让大脑以为自己已经记住了学习内容，但实际上你只是手上动动（大脑记没记就不一定了）。在书上各处适当标记是不为过的，有时它会帮你突出重点。但是，如果把它当成辅助记忆的工具，就要确保自己标记下的内容也记在脑子里了。</p></li><li><p>瞟一眼解题方法，就觉得胸有成竹。这是学生学习时所犯的最糟糕的一个错误。你要做到的，是不看答案也能一步步解决问题。</p></li><li><p>等到火烧眉毛才开始学习。你会在田径运动会开始前的最后一刻才开始猛练一番吗？你的大脑如同一块肌肉，它每次在一个科目上能够应付的练习量是有限的。</p></li><li><p>已经清楚解法，但仍反复解答同一题型。如果练习中你只是坐在那解决相似的问题，你实际并没有在备考，而这就像一场盛大的篮球赛来临之际，你却只做控球这一种练习。</p></li><li><p>与朋友一起把学习变成了闲聊。和朋友核对解题方法，拿自己知道的问题相互提问，这会让学习更有趣，同时暴露你的思维缺陷，并让你的学习更深入。但是，如果任务还没完成，共同学习却成了闲谈打趣，你可就在浪费时间了，这时就该换个学习小组了。</p></li><li><p>做题前忽视读课本。还不会游泳的时候你会轻易跳进泳池吗？教科书就是你的游泳教练，它会指引你通向答案。如果嫌麻烦而疏于读书，你不仅会犯错，还会浪费时间。在你开始读书之前，快速浏览一遍章节和板块内容，能让你对它有个大致的概念。</p></li><li><p>有疑问点，却不找导师或同学核对并解决。教授会习惯性地为那些充满困惑的学生指点迷津——这是我们教师的职责。让我们担心的是不来提问的学生。希望你别成为其中之一。</p></li><li><p>时常分心，却还以为自己能学得足够深入。每次受到即时短信或谈话的影响，你能在学习上投入的脑力都会变得更少。每一次被打断注意力，小小的神经都会被再次连根拔起，无法在脑中扎根生长。</p></li><li><p>睡眠不足。睡眠中，你的大脑会将解题技巧拼凑在一起，同时它也会对你睡前习得的任何内容进行反复练习。长时间的疲劳会让毒素在脑中堆积，毒素会破坏神经连接，让你无法用它们快速有效地思考。如果考前没睡好，就算之前做过怎样的努力也无济于事。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 扩展阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec15</title>
      <link href="/2023/06/12/Lec15/"/>
      <url>/2023/06/12/Lec15/</url>
      
        <content type="html"><![CDATA[<p>CPU的速度超过了内存的速度，内存无法跟上处理器的速度<br>引进cache</p><p>Q1: Where can a block be placed in the cache?<br>(Block placement)<br>Fully Associative, (2-way) Set Associative, Direct mapped<br>Q2: How is a block found if it is in the cache?<br>(Block identification)<br>Q3: Which block should be replaced on a miss?<br>(Block replacement)<br>Random, LRU, FIFO<br>Q4: What happens on a write?<br>(Write strategy)<br>Write through, Write back<br>no write allocate(直接将数据写入内存), write allocate(写时取回)</p><p><strong>Cache performance：</strong><br>AMAT &#x3D; Average Memory Access Time<br>CPIALUOps does not include memory instructions</p><p>AMAT &#x3D; Hit time + miss rate x miss penalty</p><ol><li>Reduce the miss rate<br>Hardware Prefetching</li><li>Reduce the miss penalty<br>to introduce a second level cache</li><li>Reduce the time to hit in the cache</li></ol><h1 id="1-Memory-Hierarchy-Review"><a href="#1-Memory-Hierarchy-Review" class="headerlink" title="1. Memory Hierarchy Review"></a>1. Memory Hierarchy Review</h1><h1 id="2-MIMD-Architectures"><a href="#2-MIMD-Architectures" class="headerlink" title="2. MIMD Architectures"></a>2. MIMD Architectures</h1><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p>Memory Address Space Model<br>Single logically shared address space: Shared Memory Architectures<br>Multiple and private address spaces: Message Passing Architectures</p><p>Address Space vs. Physical Memory</p><p>Shared Memory &amp; Message Passing</p><p>解决coherency问题：<br>Two classes of protocols:<br>Snooping Protocols(嗅探)<br>Directory-Based Protocols(基于目录)</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec14</title>
      <link href="/2023/06/12/Lec14/"/>
      <url>/2023/06/12/Lec14/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末考试复习心得</title>
      <link href="/2023/06/11/ACA_Review/"/>
      <url>/2023/06/11/ACA_Review/</url>
      
        <content type="html"><![CDATA[<ol><li>怎么找RAW？<br>对于同一个寄存器，先找到W，再往下看，看有没有R，如果下面有新的W，RAW到此为止</li><li>关于VLIW的题，<br>先找到conflicts，</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec12:Parallel Architectures:SIMD and intro to MIMD</title>
      <link href="/2023/06/09/Lec13/"/>
      <url>/2023/06/09/Lec13/</url>
      
        <content type="html"><![CDATA[<ol><li>SISD<br>Only one instruction stream, only one data stream</li><li>SIMD<br>Same instruction executed by multiple processors using different data streams.<br>每个处理器都有自己的memory, 只有一个控制单元，只有一个代码副本</li><li>MISD<br>A single data stream is fed into multiple processing units.</li><li>MIMD<br>• Multiple Instruction: every processor may be executing a different instruction stream<br>• Multiple Data: every processor may be working with a different data stream</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec12:ILP Limits and Superscalar Architecture</title>
      <link href="/2023/06/09/Lec12/"/>
      <url>/2023/06/09/Lec12/</url>
      
        <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol><li>Review<br>ILP Journey<br>ILP Definition<br>Superscalar Architectures, Static and Dynamic<br>Schedulers</li><li>Limits to ILP<br>Ideal machine<br>Limits<br>Examples of real architectures</li></ol><h1 id="Superscalar-Execution-为什么多个指令不在同一个时钟周期开始执行呢"><a href="#Superscalar-Execution-为什么多个指令不在同一个时钟周期开始执行呢" class="headerlink" title="Superscalar Execution(为什么多个指令不在同一个时钟周期开始执行呢)"></a>Superscalar Execution(为什么多个指令不在同一个时钟周期开始执行呢)</h1><ol><li>在每个时钟周期fetch多条指令</li><li>Decide on data and control dependencies:<br>dynamic scheduling and dynamic branch<br>prediction</li></ol><h1 id="Modern-Supercalar"><a href="#Modern-Supercalar" class="headerlink" title="Modern Supercalar"></a>Modern Supercalar</h1><p>Dynamic scheduling + multiple issue + speculation</p><h1 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h1><ol><li>Window size</li><li>N. of functional units</li><li>N. of busses</li><li>N. of ports for the register file</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec11:Explicit Register Renaming</title>
      <link href="/2023/06/09/Lec11/"/>
      <url>/2023/06/09/Lec11/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是renaming"><a href="#什么是renaming" class="headerlink" title="什么是renaming"></a>什么是renaming</h1><p>Key insight: Allocate a new physical destination register for every instruction that writes<br>Very similar to a compiler transformation called Static Single Assignment (SSA) form — but in hardware!</p><p>Mechanism? Keep a translation table:<br>ISA register ➔ physical register mapping</p><p>在decode阶段rename寄存器(Mapping)，但不读取寄存器的值<br>function units从统一的寄存器文件中读写数据，包括已经提交的和临时的寄存器<br>Commit仅仅是改变一下Architectural和Phiscal寄存器的映射关系</p><p>Tomasulo提供Implicit Register Renaming(寄存器被重命名为Reservation Station的标签)<br>现在讨论Explicit Register Renaming:<br>用physical register file(这个比寄存器的数量多得多)<br>ISA register &lt;&#x3D;&gt; physical register mapping<br>当寄存器被写好后，从freelist里找一个新的寄存器来代替表的entry，一个指令有一个entry</p><p>有什么好处？<br>可以消除WAR和WAW<br>和Tomasulo一样，允许out-of-order完成</p><h1 id="Stage-of-Scoreboard-Control-With-Explicit-Renaming"><a href="#Stage-of-Scoreboard-Control-With-Explicit-Renaming" class="headerlink" title="Stage of Scoreboard Control With Explicit Renaming"></a>Stage of Scoreboard Control With Explicit Renaming</h1><ol><li>ISSUE<br>解码 + 检查structural hazards + 为结果分配新的physical register<br>指令按program order来issue，没有空闲的physical register就别issue，有structural hazard别issue</li><li>Read operands<br>等到没有hazard, 再读操作数。所有的dependencies(RAW)都在这个阶段解决</li><li>Execution<br>Function unit一收到操作数就开始执行。当结果都准备好，通知scoreboard</li><li>Write result<br>完成执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">不用检测WAR和WAW</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1><ol><li>什么时候需要rename？<br>只有destination register才需要renaming</li><li>放入一次function unit status表，就rename一次destination register</li><li>不用考虑每条指令等待几个周期，只需要一个周期一个周期往下推就行，RAW hazard中，被依赖的指令完成后(第n个周期Write Result)，才可以执行下一条指令(第n+1个周期read operands)</li></ol><h1 id="Register-renaming-vs-ROB"><a href="#Register-renaming-vs-ROB" class="headerlink" title="Register renaming vs. ROB"></a>Register renaming vs. ROB</h1><p>前者指令commit更简单一些，但释放寄存器更为复杂</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec10:Hardware-Based Speculation</title>
      <link href="/2023/06/08/Lec10/"/>
      <url>/2023/06/08/Lec10/</url>
      
        <content type="html"><![CDATA[<h1 id="HW-based-speculation-main-idea"><a href="#HW-based-speculation-main-idea" class="headerlink" title="HW-based speculation main idea"></a>HW-based speculation main idea</h1><ol><li>Dynamic Branch Prediction<br>choose which instruction to execute</li><li>Dynamic Scheduling<br>out-of-order execution but inorder commit </li><li>Speculation<br>execute instructions before control dependences are resolved</li></ol><h2 id="The-key-idea-behind-speculation-is"><a href="#The-key-idea-behind-speculation-is" class="headerlink" title="The key idea behind speculation is"></a>The key idea behind speculation is</h2><ol><li>to <strong>issue and execute instructions dependent on a branch</strong> before the branch outcome is known;</li><li>to allow instructions to <strong>execute out-of-order</strong> but to force them to <strong>commit in-order</strong>;<br>to prevent any irrevocable action (such as updating state or taking an exception) until an instruction commits;</li></ol><h1 id="Reorder-Buffer"><a href="#Reorder-Buffer" class="headerlink" title="Reorder Buffer"></a>Reorder Buffer</h1><ol><li>Re-order buffer(ROB)保存未提交但已完成的寄存器的结果(从completion到commit)<br>指令什么时候提交？1. 完成execution 2. 前面的指令都提交<br>当指令提交后，结果就会从ROB转到register</li><li>Entries(条目)在decode的阶段按程序的顺序分配</li><li>已完成(completed)未提交(uncommited)的值可以被相关指令使用</li><li>load&#x2F;store指令的reordering需要特殊的数据结构</li></ol><h2 id="Speculative-Tomasulo-Algorithm"><a href="#Speculative-Tomasulo-Algorithm" class="headerlink" title="Speculative Tomasulo Algorithm"></a>Speculative Tomasulo Algorithm</h2><ol><li>Issue<br>如果Reservation Station和Reorder Buffer slot都有空，就issue instruction &amp;&amp; send operands &amp;&amp; reorder buffer no. for destination</li><li>Execution<br>当两个操作数都准备好，就开始execution，没准备好，就等CDB(common data bus)，当两个操作数都在 reservation station，执行</li><li>Write Result<br>写到CDB准备好传给等待的FU和ROB</li><li>Commit<br>3种：normal commit, Store commit, Instruction is a branch with incorrect prediction</li></ol><h2 id="Each-entry-in-ROB-contains-four-fields"><a href="#Each-entry-in-ROB-contains-four-fields" class="headerlink" title="Each entry in ROB contains four fields"></a>Each entry in ROB contains four fields</h2><ol><li><strong>Instruction type field</strong> – indicates whether instruction is a branch (no destination<br>result), a store (has memory address destination), or a load&#x2F;ALU (register<br>destination)</li><li><strong>Destination field</strong>: supplies register number (for loads and ALU instructions) or<br>memory address (for stores) where results should be written;</li><li><strong>Value field</strong> (used to hold value of result until instruction commits)</li><li><strong>Ready field</strong>: indicates that instruction has completed execution, value is ready</li></ol><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec9:Exception Handling</title>
      <link href="/2023/06/08/Lec9/"/>
      <url>/2023/06/08/Lec9/</url>
      
        <content type="html"><![CDATA[<h1 id="Classes-of-exceptions"><a href="#Classes-of-exceptions" class="headerlink" title="Classes of exceptions"></a>Classes of exceptions</h1><ol><li>Synchronous vs asynchronous</li><li>User requested vs coerced(被迫)</li><li>User maskable vs user nonmaskable</li><li>Within vs between instructions</li><li>Resume vs terminate</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec8:Dynamic Scheduling, Tomasulo</title>
      <link href="/2023/06/07/Lec8/"/>
      <url>/2023/06/07/Lec8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Tomasulo-algorithm"><a href="#1-Tomasulo-algorithm" class="headerlink" title="1. Tomasulo algorithm"></a>1. Tomasulo algorithm</h1><p>Reservation Stations(Operand buffers)<br>Each instruction is an entry of a reservation station<br>Its operands are replaced by values or pointers (Register Renaming)-&gt;<strong>避免WAR和WAW</strong></p><h2 id="3-stage-of-the-Tomasulo-Algorithm"><a href="#3-stage-of-the-Tomasulo-Algorithm" class="headerlink" title="3-stage of the Tomasulo Algorithm:"></a>3-stage of the Tomasulo Algorithm:</h2><p>ISSUE<br>EXECUTION<br>WRITE</p><p><strong>Reservation Station Components</strong></p><ul><li>Tag identifying the RS</li><li>OP &#x3D; the operation to perform on the component.</li><li>Vj, Vk &#x3D; Value of the source operands</li><li>Qj,Qk &#x3D; Pointers to RS that produce Vj,Vk<br>Zero value &#x3D; Source op. is already available in Vj or Vk</li><li>Busy &#x3D; Indicates RS Busy<br>Note: Only one of V-field or Q-field is valid for each operand<br><strong>其他component</strong></li><li>RF and the Store buffer have a Value (V) and a Pointer (Q) field.<br>Pointer (Q) field corresponds to number of reservation station producing the<br>result to be stored in RF or store buffer<br>If zero  no active instructions producing the result<br>(RF or store buffer content is the correct value).</li></ul><h1 id="2-Comparison-between-Scoreboard-and-Tomasulo"><a href="#2-Comparison-between-Scoreboard-and-Tomasulo" class="headerlink" title="2. Comparison between Scoreboard and Tomasulo"></a>2. Comparison between Scoreboard and Tomasulo</h1><p>• Control &amp; buffers distributed with Function Units (FU) vs.<br>centralized in scoreboard;<br>• FU buffers called “reservation stations”; have pending operands<br>• Registers in instructions replaced by values or pointers to<br>reservation stations(RS); called register renaming ;<br>• avoids WAR, WAW hazards<br>• More reservation stations than registers, so can do optimizations compilers can’t<br>• Results to FU from RS, not through registers, over Common Data<br>Bus that broadcasts results to all FUs<br>• Load and Stores treated as FUs with RSs as well<br>• Integer instructions can go past branches, allowing<br>FP ops beyond basic block in FP queue</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(24周)</title>
      <link href="/2023/06/06/words(week24)/"/>
      <url>/2023/06/06/words(week24)/</url>
      
        <content type="html"><![CDATA[<h1 id="Initiation-interval"><a href="#Initiation-interval" class="headerlink" title="Initiation interval"></a>Initiation interval</h1><p>在这个句子中，“interval”是一个名词，表示两个事件或时间之间的间隔。在“Initiation interval”的语境下，它指的是某个过程中开始和结束之间的时间段。</p><p>这个句子的意思是，在某个过程中，有一个特定的时间段用来启动该过程。</p><p>在英语中，“interval”还可以用于描述音乐、体育比赛等方面。例如：</p><ul><li>The orchestra took a short interval after the first movement. (管弦乐队在第一部分后休息了一会儿。)</li><li>There will be a 15-minute interval between the two halves of the football match. (足球比赛两半场之间将有15分钟的休息时间。)</li></ul><h1 id="pending"><a href="#pending" class="headerlink" title="pending"></a>pending</h1><p>在这个句子中，单词”pending”是一个形容词，用来描述指令的状态。它意味着有一些指令已经被下达但还没有完成或者等待执行。</p><p>整个句子的意思是：如果没有未决的指示，就会将该寄存器写入空白。</p><p>在这个句子中，并没有使用到任何习语。以下是几个例子：</p><ol><li>My pending workload is making me stressed out. (我的待处理工作量让我感到很压力)</li><li>The court case has been pending for months now. (这起法庭案件已经悬而未决数月了)</li></ol><h1 id="plain-old"><a href="#plain-old" class="headerlink" title="plain old"></a>plain old</h1><p>Plain Old”也可以用作习惯用语来表示“非常普通、平凡”的含义。例如，“plain old car”就表示“非常普通的汽车”</p><h1 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h1><p>[英]· &#x2F;ˌænəʊˈteɪʃən&#x2F; 或 &#x2F;ˌanəʊˈteɪʃ(ə)n&#x2F;<br>[n.] 注释；评注；批注<br>[v.] 给…作注解；加注释于…<br>例句：</p><ol><li>The book contains annotations by the author. (这本书包含了作者的注释。)</li><li>She spent hours annotating her research paper. (她花了几个小时给她的研究论文做标记。)</li><li>The software allows users to annotate PDF documents with comments and highlights. (该软件允许用户使用评论和高亮显示来对PDF文件进行标记。)</li></ol><p>词源：来自拉丁语“annotatio”，意为“解释，说明”。</p><h1 id="specification"><a href="#specification" class="headerlink" title="specification"></a>specification</h1><p>[英]· &#x2F;ˌspesɪfɪˈkeɪʃ(ə)n&#x2F;  美· &#x2F;ˌspɛsəfɪˈkeʃən&#x2F;<br>[n.] 规格；规范；说明书<br>例句：</p><ol><li>The product specification should be clearly stated in the contract. (产品规格应在合同中明确说明。)</li><li>The software developer needs to follow the project specification closely. (软件开发人员需要密切遵循项目规范。)</li><li>This job requires someone who can read and interpret technical specifications accurately. (这份工作需要一个能够准确阅读和解释技术规范的人。)<br>词源：来自拉丁语“specificatio”，意为“具体化，详述”。</li></ol><h1 id="vice-versa"><a href="#vice-versa" class="headerlink" title="vice versa"></a>vice versa</h1><p>反之亦然</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.6.6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec7:Dynamic Scheduling, Scoreboard</title>
      <link href="/2023/06/05/Lec7/"/>
      <url>/2023/06/05/Lec7/</url>
      
        <content type="html"><![CDATA[<h1 id="Dynamic-Scheduling"><a href="#Dynamic-Scheduling" class="headerlink" title="Dynamic Scheduling"></a>Dynamic Scheduling</h1><p>Enables out-of-order execution and completion (commit)<br><strong>一个表结构</strong><br>A Data Structure for Correct Issues<br>Keeps track of the status of Functional Units</p><h1 id="Scoreboard-Operation"><a href="#Scoreboard-Operation" class="headerlink" title="Scoreboard Operation"></a>Scoreboard Operation</h1><p>New pipeline</p><table><thead><tr><th align="center">ID</th><th align="center">ID</th><th align="center">EX</th><th align="center">WB</th></tr></thead><tbody><tr><td align="center">Issue</td><td align="center">Read regs</td><td align="center">Execution</td><td align="center">Write</td></tr></tbody></table><h2 id="Four-Stages-of-Scoreboard-Control"><a href="#Four-Stages-of-Scoreboard-Control" class="headerlink" title="Four Stages of Scoreboard Control"></a>Four Stages of Scoreboard Control</h2><ol><li>Issue(in-order)<br>structural harzard &amp;&amp; WAW(has the same destination)</li><li>Read Operands(out of order)<br>Wait until no data hazards(RAW hazard)</li><li>Execution<br>latency, Initiation interval </li><li>Write Result<br>Finish execution<br>Once the scoreboard is aware that the functional unit has completed execution, the scoreboard checks for <em>WAR hazards</em>.<br>If none, it writes results. If WAR, then it stalls the instruction.</li></ol><h2 id="Scoreboard-structure-three-parts"><a href="#Scoreboard-structure-three-parts" class="headerlink" title="Scoreboard structure: three parts"></a>Scoreboard structure: three parts</h2><ol><li><p>Instruction status</p></li><li><p>Functional Unit status<br>Indicates the state of the functional unit (FU):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Busy – Indicates whether the unit is busy or not</span><br><span class="line">Op - The operation to perform in the unit (+,-, etc.)</span><br><span class="line">Fi - Destination register</span><br><span class="line">Fj, Fk – Source register numbers</span><br><span class="line">Qj, Qk – Functional units producing source registers</span><br><span class="line">Rj, Rk – Flags indicating when Fj, Fk are ready</span><br></pre></td></tr></table></figure><p>Rj表示Fj(Fk)准备好了没有，Fj(Fk)表示源寄存器的数据准备好了没有<br>Fi是目标寄存器</p></li><li><p>Register result status<br>Indicates <strong>which functional unit</strong> will write each register.<br>Blank if no pending instructions will write that register.z</p></li></ol><h2 id="Execution-Process"><a href="#Execution-Process" class="headerlink" title="Execution Process"></a>Execution Process</h2><ol><li>Issue<br>• Functional unit is free (<strong>structural</strong>)<br>• Active instructions do not have same Rd (<strong>WAW</strong>)</li><li>Read Operands<br>• Checks availability of source operands<br>• Resolves <strong>RAW</strong> hazards dynamically (out-of-order execution)</li><li>Execution<br>• Functional unit begins execution when operands arrive<br>• Notifies the scoreboard when it has completed execution</li><li>Write result<br>• Scoreboard checks <strong>WAR</strong> hazards<br>• Stalls the completing instruction if necessary</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI各单元简记</title>
      <link href="/2023/06/05/CI/"/>
      <url>/2023/06/05/CI/</url>
      
        <content type="html"><![CDATA[<p>有问题发邮件问老师<br><a href="mailto:&#x6d;&#x61;&#110;&#117;&#x65;&#x6c;&#46;&#x72;&#111;&#118;&#101;&#x72;&#105;&#x40;&#112;&#111;&#108;&#x69;&#x6d;&#x69;&#x2e;&#x69;&#116;">&#x6d;&#x61;&#110;&#117;&#x65;&#x6c;&#46;&#x72;&#111;&#118;&#101;&#x72;&#105;&#x40;&#112;&#111;&#108;&#x69;&#x6d;&#x69;&#x2e;&#x69;&#116;</a><br>闭卷考试<br>不允许口语考试</p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><p><strong>A. HW Infrastructures:</strong><br>• System-level: Computing Infrastructures and Data Center<br>Architectures, Rack&#x2F;Structure;<br>• Node-level: Server (computation, HW accelerators), Storage<br>(Type, technology), Networking (architecture and technology);<br>• Building-level: Cooling systems, power supply, failure recovery<br><strong>B. SW Infrastructures:</strong><br>• Virtualization: Process&#x2F;System VM, Virtualization Mechanisms<br>(Hypervisor, Para&#x2F;Full virtualization)<br>• Computing Architectures: Cloud Computing (types,<br>characteristics), Edge&#x2F;Fog Computing, X-as-a service<br>• Machine and deep learning-as-a-service<br><strong>C. Methods:</strong><br>• Reliability and availability of datacenters (definition,<br>fundamental laws, RBDs)<br>• Disk performance (Type, Performance, RAID)<br>• Scalability and performance of datacenters (definitions,<br>fundamental laws, queuing network theory)</p><p>IoT<br>Embedded PCs&#x2F;Devices<br>PCs<br>Edge&#x2F;Fog Computing Systems<br>Embedded PCs</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>Quality Evaluation techniques: </p><ol><li>Measurement-based</li></ol><ul><li>Direct measurement</li><li>Benchmarking</li><li>Prototype</li></ul><ol start="2"><li>Model-based</li></ol><ul><li>Analytical and numerical</li><li>Simulation</li><li>Hybrid techniques<br>eg. Queueing Networks<br>• Arrival: average arrival rate \lambda  (req&#x2F;s)<br>• Service: the time a job spends being served,  average duration, maximum service rate<br>• Queue: Service discipline&#x2F;queuing policy: FCFS, LCFS, RSS, PRI<br>• Population: Service discipline&#x2F;queuing policy<br>• Routing: Probabilistic, Round robin, Join the shortest queue</li></ul><p>If we observed such an abstract system we might measure the following<br>quantities:<br>§ T, the length of <strong>time</strong> we observe the system<br>§ A, the number of <strong>request arrivals</strong> we observe<br>§ C, the number of <strong>request completions</strong> we observe<br>§ B, the total amount of time during which the system is <strong>busy</strong>(B&lt;&#x3D;T&gt;)<br>§ N, the <strong>average number of jobs</strong> in the system </p><p>§ λ &#x3D; A&#x2F;T , the arrival rate 到达率<br>§ X &#x3D; C &#x2F;T , the throughput or completion rate 完成率或吞吐量<br>§ U &#x3D; B&#x2F;T, the utilisation 利用率<br>§ S &#x3D; B&#x2F;C, the mean service time per completed job 每个job平均使用资源k的时间</p><p><strong>utilization law:</strong><br>Uk &#x3D; XkSk &#x3D; B&#x2F;T &#x3D; C&#x2F;T * B&#x2F;C 完成率<em>平均使用资源k的时间<br><strong>Little’s law:</strong><br>N &#x3D; XR  吞吐量</em>平均居留时间&#x3D;系统中的请求数<br>(N &#x3D; average number of requests in the system(在系统中同时存在的请求数)<br>If the system throughput is X requests&#x2F;sec, and each request remains in the system on average for R seconds)</p><p><strong>Response Time Law</strong><br>R &#x3D; N&#x2F;X - Z residence time - thinking time</p><p>T: 我们观察的总时间<br>Ak: 对于资源k，到达的请求的数量<br>Ck: 对于资源k，完成的请求的数量<br>Bk: 资源k忙的时间<br>Nk：资源k平均完成的工作数量<br><strong>N &#x3D; XR</strong><br>level1：N: busy time; X: average service time; R: rate of service<br>level2(考虑queue): N: 等待或正在享受服务的用户数量 X:系统的吞吐量 R&#x3D;N&#x2F;X:每个用户花费的时间<br>level3(考虑subsystem): N:在<strong>子系统</strong>中的用户数量  X: <strong>子系统</strong>中每个请求花费的时间 R: <strong>子系统</strong>的throughput<br>level4(考虑total system):</p><p>关于little’s law的一些理解：</p><ol><li>如果提到系统中有几个活跃的用户，那么N就等于几</li><li>告诉 U 和 S(service time)，怎么求X? U&#x3D;B&#x2F;T, X&#x3D;C&#x2F;T, S&#x3D;B&#x2F;C 所以S&#x3D;U&#x2F;X</li><li>题设告知think time, response time, residence time(N&#x2F;X)，N&#x3D;N(think)+N(response)</li><li>整个系统的吞吐量等于各个子系统的吞吐量</li><li>告知每个子系统的利用率(U)和demand(D), 则可求吞吐量(X):<br>这是用了Utilization Law(U&#x3D;XS): S是service time, 在有些题目里，表示成demand</li></ol><p>Xk &#x3D; Vk * X<br>Vk &#x3D; Ck &#x2F; C</p><h2 id="DataWareHouse"><a href="#DataWareHouse" class="headerlink" title="DataWareHouse"></a>DataWareHouse</h2><p>warehouse-scale computers (WSCs):</p><p>Multiple data centers：<br>Hierarchical approach: </p><ul><li>Geographic Areas and Regions</li><li>Availability Zones</li></ul><p>Architectural Overview of A Warehouse-scale Computer</p><ul><li>SERVERS: the main processing equipment</li><li>STORAGE: how and where to store the information</li><li>NETWORKING: providing internal and external connections</li><li>BUILDING AND INFRASTRUCTURE: power delivery, cooling, and building infrastructure</li></ul><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>Stages of enterprise infrastructures</p><ol><li>Monolithic app(单体式应用程序)</li></ol><ul><li>Minimal network demands</li><li>Proprietary protocols</li></ul><ol start="2"><li>Client server</li></ol><ul><li>High network demands inside the enterprise</li><li>Applications walled within the enterprise</li><li>TCP&#x2F;IP + Proprietary protocols</li></ul><ol start="3"><li>Web applications</li></ol><ul><li>Ubiquitous TCP&#x2F;IP</li><li>Access from anywhere</li><li>Servers are broken into multiple units</li></ul><ol start="4"><li>Microservices</li></ol><ul><li>Infrastructure moved to cloud providers</li><li>Servers broken into microservices</li><li>Increase of server-to-server traffic</li></ul><p>Classes of DCN<br>DCNs can be classified into three main categories:</p><ol><li>Switch-centric architectures<br>Uses switches to perform packet forwarding<br><strong>Three-Tier (or layer) “Classical” Network</strong>: Core, Aggregation(EOR), Access(TOR)<br><strong>Leaf-Spine architectures</strong></li><li>Server-centric architecture<br>Uses servers with multiple Network Interface Cards (NICs) to act as switches in addition to performing other computational functions</li></ol><p>Two stage interconnections<br>Leaf: ToR switch<br>Spine: dedicated switches (aggregation switches)<br>In practice: servers have two interfaces connected to two ToR switches</p><p>扩展到三层：Pod-based model, aka the Fat Tree<br>to provide fault-tolerance<br>3. Hybrid architectures<br>Combine switches and servers for packet forwarding</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LP</title>
      <link href="/2023/06/01/FOR_LP/"/>
      <url>/2023/06/01/FOR_LP/</url>
      
        <content type="html"><![CDATA[<h1 id="Def"><a href="#Def" class="headerlink" title="Def"></a>Def</h1><p>min f(x)<br>s.t. x属于X<br>General form:<br>min z &#x3D; c1x1 + c2c2 +…+cnxn<br>s.t.<br>Matrix notation<br>min z &#x3D; [c1 … cn][]</p><p><strong>Standard form</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min z = cTx</span><br><span class="line">s.t. Ax = b</span><br><span class="line">     x&gt;=0   (only equality constraints and all nonnegative variables)</span><br></pre></td></tr></table></figure><p>方法：把小于0的x变成(xi-xj), 添加slack variable和surplus variable, 改变目标函数的符号</p><h1 id="Basic-feasible-solutions-and-vertices-of-polyhedra"><a href="#Basic-feasible-solutions-and-vertices-of-polyhedra" class="headerlink" title="Basic feasible solutions and vertices of polyhedra"></a>Basic feasible solutions and vertices of polyhedra</h1><p>Ax&#x3D;b<br>A&#x3D;&gt;m<em>n<br>rank&#x3D;m(A is full of rank)<br>m &#x3D; n unique solution<br>m &lt; n 无穷个solution<br>A&#x3D;[B|N]<br>B: a basis of such a matrix A——————m</em>m<br>N: m*(n-m)</p><p>XT &#x3D; [XBT|XNT]<br>A basic solution is a solution obtained by setting <strong>xN&#x3D;0</strong>，<br>A basic solution with <strong>XB&gt;&#x3D;0</strong> is a <strong>basic feasible solution</strong>.<br>The variable in XB——-basic variables, non basic variables</p><h1 id="单纯形算法（simplex-method）"><a href="#单纯形算法（simplex-method）" class="headerlink" title="单纯形算法（simplex method）"></a>单纯形算法（simplex method）</h1><p>算法的基本思想是通过在多维空间中移动一个特定形状的多面体，寻找目标函数取得最优值的顶点<br>上课时的思路：<br>什么是单纯形法：</p><ol><li>在<strong>不增加目标函数值</strong>的前提下检测一系列的基本可行解，直到找到最优解或者发现线性规划是无界的<br>在每次循环中，从一个基本可行解移至另一个基本可行解。</li><li>那我们该怎么做呢？</li></ol><ul><li>先找到一个初始的vertex(基本可行解)</li><li>确定当前的vertex是不是最优解</li><li>如果不是，就从当前的vertex一道一个更好的相邻的vertex(或者说名这个LP是无界的)</li></ul><ol start="3"><li>分别看这些步骤</li></ol><ul><li>初始的vertex很好看出来</li><li>怎么确定当前的vertex是不是最优解？————引出reduced cost!!!<br>通过计算cTx，可以看出cost是由一个固定的值和一个变化的值组成的，其中变化的那个部分就是reduced cost，reduced cost是由于non basic 变量引起的(NNBBN)。</li><li>如果cN&gt;0, 那么xB&#x3D;B-1b, xN&#x3D;0是最优解————由此可知单纯形法的终止条件。<br>所以要想判断是不是最优算法，可以观察cN是否小于0，如果小于，那么增大对应的xN，并保持其他的xN不变，那么cost会进一步缩小，所以不是最优解。</li><li>怎么移向相邻的基本可行解？<br>移出xB，移入xN。</li></ul><p>步骤：</p><ol><li>转化为标准形式</li><li>找到一个基本可行解</li><li>画tableau</li><li>找enter的变量和exit的变量，把enter的变量那一列通过变换变成单位向量</li><li>如果还有reduced cost是negative的，继续第3步</li><li>直到都是nonnegative，得到xB, xN, objective function value.</li></ol><p>basic feasible solution is such that xB&#x3D;B-1b, xN&#x3D;0<br>reduced cost<br>如果cN&gt;&#x3D;0 基本可行解就是全局最优解（对于最小化问题）<br>对于最大化问题，看是否&lt;&#x3D;0</p><p>Change of basis(for minimization LP): 通过矩阵变换，哪个进(第一行负的进)，哪个出(第一列&#x2F;进的那列对应的行的值)</p><p>Two-phase simplex method(Determine an initial basic feasible solution)看不出明显的基变量的情况下使用(找不到初始基本可行解)，引入人工变量<br>两阶段的第一阶段的目的是找到一个初始的基本可行解，就是用单纯形法消去人工变量，即把人工变量变成非基变量，第二阶段就是从基本可行解出发用单纯形法求线性规划最优解。</p><h1 id="对偶-Duality"><a href="#对偶-Duality" class="headerlink" title="对偶(Duality)"></a>对偶(Duality)</h1><p>如果线性规划（Ⅰ）中的第k个约束条件是等式，则它的对偶规划（Ⅱ）<br>中的第k个变量W无非负限制（W 为自由变量）。</p><p>反之，若原线性规划（Ⅰ）中的第k个变量无非负性要求，则对偶规划（Ⅱ）中的<br>第k个约束为等式。</p><blockquote><p>任一个线性规划得对偶规划都可以写出，其写法为：<br>（ⅰ）将目标函数转化为求最大<br>（ⅱ）将约束条件转化为“≤”型或“&#x3D;”型<br>（ⅲ）写出对偶关系表<br>（ⅳ）据对偶表的规定写出对偶规划</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP简记</title>
      <link href="/2023/06/01/NLP/"/>
      <url>/2023/06/01/NLP/</url>
      
        <content type="html"><![CDATA[<h2 id="Pre-processing-amp-Classifying-Text"><a href="#Pre-processing-amp-Classifying-Text" class="headerlink" title="Pre-processing &amp; Classifying Text"></a>Pre-processing &amp; Classifying Text</h2><p>Extracting plain text<br>Tokenizing Text<br>Word Frequencies<br>Morphology(语形学)</p><h2 id="Text-Search"><a href="#Text-Search" class="headerlink" title="Text Search"></a>Text Search</h2><p>为什么不用ML classifier?<br>Term Weighting - query subset</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exe4:Static BP + Complex, VLIM, Dynamic BP</title>
      <link href="/2023/06/01/Exe4/"/>
      <url>/2023/06/01/Exe4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>为什么不管两条指令离得有多远，都存在WAR冲突？</p></li><li><p>为什么WAR和WAW要推迟Decode，并在解决它们后才能提交？</p></li><li><p>在exe4，为什么I7的decode在C18？<br>有WAR冲突，要保证前面的指令读完了才能进行后面的指令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有两条顺序执行的指令：</span><br><span class="line">1. ld $f3, VA($r6)</span><br><span class="line">2. addi $r6,$r6,4</span><br><span class="line">第二条指令什么时候进入decode阶段才能解决WAR？</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">IF</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">D</th><th align="center">IS</th><th align="center">E1</th><th align="center">E2</th><th align="center">E3</th><th align="center">W</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><strong>F</strong></td><td align="center"><strong>Ds</strong></td><td align="center"><strong>D</strong></td><td align="center"><strong>ISs</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>I9的decode不需要等吗？</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空中英语教室1：mental gymnastic</title>
      <link href="/2023/05/31/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BB%83%E4%B9%A0%E5%8F%A3%E8%AF%AD1/"/>
      <url>/2023/05/31/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BB%83%E4%B9%A0%E5%8F%A3%E8%AF%AD1/</url>
      
        <content type="html"><![CDATA[<p>concerntration<br>plaque 斑块<br>be aware 知道 意识到<br>beware 小心危险的</p><p>how do you like to exercise?<br>short-term memory<br>have whole brain strength<br>relexation<br>there are other benefits to exercising your mind<br>Phiscal exercise&#x2F;<br>the necessity of mental exercise<br>have been shown to benefit </p><p>small world 好巧啊<br>take your time 别着急，慢慢来<br>don’t jinx it 别乌鸦嘴<br>don’t hold out on me 别瞒着我<br>don’t say a word 别说话<br>don’t take it out on me 别拿我出气<br>hard to believe 难以置信<br>this is gone too far 这太过分了</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> 沉练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec5:Dynamic Branch Predictors,Pipelining and Performance,Complex pipelining</title>
      <link href="/2023/05/30/Exe3/"/>
      <url>/2023/05/30/Exe3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec6:Static Scheduling and Very Long Instruction Words(VLIW)</title>
      <link href="/2023/05/30/Lec6/"/>
      <url>/2023/05/30/Lec6/</url>
      
        <content type="html"><![CDATA[<h1 id="VLIW-architecture"><a href="#VLIW-architecture" class="headerlink" title="VLIW architecture"></a>VLIW architecture</h1><p>指令内数据是并行的，没有RAW check</p><h1 id="Static-Scheduling"><a href="#Static-Scheduling" class="headerlink" title="Static Scheduling"></a>Static Scheduling</h1><ul><li>Basic Blocks</li><li>Trace scheduling</li></ul><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><ol><li>simple code motion</li><li>Loop unrolling &amp; loop peeling</li><li>Software pipeline</li><li>Global code scheduling(across basic block)</li></ol><ul><li>Trace scheduling</li><li>Superblock scheduling</li><li>Hyperblock scheduling</li><li>Speculative Trace scheduling</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>为什么P48页ld和add不存在冲突？</li><li>第70页为什么选择在下面？</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec5:ILP,Complex pipelining,Intro to Scheduling</title>
      <link href="/2023/05/30/Lec5/"/>
      <url>/2023/05/30/Lec5/</url>
      
        <content type="html"><![CDATA[<p>Mixing integer and Floating point operations: Complex Pipelining<br>in-order<br>out-of-order<br>怎么样进一步提升性能？scheduling，分为Dynamic Scheduling(hardware) and Static Scheduling(software)</p><h1 id="1-为什么要加ISSUE阶段？"><a href="#1-为什么要加ISSUE阶段？" class="headerlink" title="1. 为什么要加ISSUE阶段？"></a>1. 为什么要加ISSUE阶段？</h1><p>在MIPS架构中，ISSUE阶段是指令流水线中的一个重要阶段，用于指令的调度和发射。ISSUE阶段的作用包括：</p><ol><li><p>指令调度：</p><ul><li>ISSUE阶段对已解码的指令进行调度，确定指令的执行顺序和优先级。它根据不同的调度算法和策略，将指令安排到适当的执行单元上，以最大程度地提高流水线的利用率和性能。</li></ul></li><li><p>数据相关检测：</p><ul><li>ISSUE阶段可以进行<strong>数据相关的检测</strong>，检查当前指令是否存在数据依赖性（例如RAW依赖）。通过检测数据相关性，可以判断指令是否可以立即发射，或者需要等待之前的指令完成。</li></ul></li><li><p>发射指令：</p><ul><li>在ISSUE阶段，经过调度和相关性检测后，合适的指令可以被发射到执行阶段（EX阶段）。发射意味着将指令送入下一阶段进行实际的操作和执行。</li></ul></li></ol><p>ISSUE阶段在流水线中起到关键的调度和控制作用。通过合理的调度和发射策略，可以优化指令的执行顺序，最大程度地避免数据冒险和资源竞争，提高流水线的吞吐量和效率。</p><h1 id="为什么decode执行的时机不一样"><a href="#为什么decode执行的时机不一样" class="headerlink" title="为什么decode执行的时机不一样"></a>为什么decode执行的时机不一样</h1>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作地道化表达</title>
      <link href="/2023/05/30/Native%20speaker(work)/"/>
      <url>/2023/05/30/Native%20speaker(work)/</url>
      
        <content type="html"><![CDATA[<h1 id="job-security"><a href="#job-security" class="headerlink" title="job security"></a>job security</h1><h1 id="a-sense-of-fulfillment"><a href="#a-sense-of-fulfillment" class="headerlink" title="a sense of fulfillment"></a>a sense of fulfillment</h1><h1 id="climb-the-corporate-ladder"><a href="#climb-the-corporate-ladder" class="headerlink" title="climb the corporate ladder"></a>climb the corporate ladder</h1><h2 id="1-work-on-recurring-tasks-to-run-my-business"><a href="#1-work-on-recurring-tasks-to-run-my-business" class="headerlink" title="1. work on recurring tasks to run my business"></a>1. work on recurring tasks to run my business</h2><p>recurring · &#x2F;rɪˈkɜːrɪŋ&#x2F;<br>在这个句子中，“recurring”是形容词，意思是“经常发生的；往复出现的”。整个句子的意思是“处理反复出现的任务来运营我的业务。”这里没有使用任何习语。以下是三到五个具有相同含义的例子：</p><ol><li><p>I have a recurring dream about flying.<br>我总做一个关于飞行的重复梦。</p></li><li><p>The company has been experiencing recurring problems with their software.<br>公司一直遇到软件方面反复出现问题。</p></li><li><p>She has a recurring role in the TV series.<br>她在电视剧中担任着一个经常出现角色。</p></li></ol><p>希望这些例子能够帮助你更好地理解该单词和整个句子。</p><h2 id="3-that’s-hardwired-into-us"><a href="#3-that’s-hardwired-into-us" class="headerlink" title="3. that’s hardwired into us."></a>3. that’s hardwired into us.</h2><p>hardwired · &#x2F;ˈhɑrdˌwaɪərd&#x2F;<br>在句子中的含义：这个词指的是某种行为或思维方式已经被根深蒂固地编码到我们的基因里，无法改变。在这个句子中，“hardwired”表示人类天生就有一些本能反应和习惯。</p><p>整个句子的意思是：某种行为或思维方式已经被根深蒂固地编码到我们的基因里，无法改变。</p><p>这个单词不是成语。</p><p>以下是三至五个具有相同意义的例子：</p><ol><li><p>It seems that some people are hardwired to be night owls, while others are early birds.<br>（似乎有些人天生晚睡早起，而其他人则喜欢早睡早起。）</p></li><li><p>The instinct to protect one’s young is hardwired into most animals.<br>（保护自己后代的本能已经在大多数动物身上根深蒂固了。）</p></li><li><p>Some scientists believe that our fear of snakes may be hardwired into our brains from evolution.<br>（一些科学家认为，我们对于蛇感到恐惧可能来自进化过程中大脑内部硬性连接形成了这样一个反应。）</p></li></ol><h2 id="4-I-don’t-want-to-be-a-slave-to-my-thoughts-I-want-the-opposite"><a href="#4-I-don’t-want-to-be-a-slave-to-my-thoughts-I-want-the-opposite" class="headerlink" title="4. I don’t want to be a slave to my thoughts. I want the opposite."></a>4. I don’t want to be a slave to my thoughts. I want the opposite.</h2><h2 id="5-grossly-speaking"><a href="#5-grossly-speaking" class="headerlink" title="5. grossly speaking"></a>5. grossly speaking</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> Native Speaker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
            <tag> Native Speaker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English Study Plan</title>
      <link href="/2023/05/30/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2023/05/30/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每天看一篇跟读训练课<br>每天背十个地道表达<br>看一个日常对话</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(23周)</title>
      <link href="/2023/05/29/words(week23)/"/>
      <url>/2023/05/29/words(week23)/</url>
      
        <content type="html"><![CDATA[<h1 id="blazer"><a href="#blazer" class="headerlink" title="blazer"></a>blazer</h1><p>[英] · &#x2F;ˈbleɪzə(r)&#x2F;<br>[n.] 西装外套；燃烧器；引线火药枪<br>例句：</p><ol><li>She wore a navy blazer over her white blouse.<br>（她在白衬衫上穿了一件海军蓝西装外套。）</li><li>The pilot lit the blazer to signal for help.<br>（飞行员点燃了引线火药枪以示求救。）</li><li>He fixed the broken blazer on his stove.<br>（他修好了灶具上的坏掉的燃烧器。）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Does it fit?</span><br><span class="line">I forget to mention we have discount at these shoes just today.</span><br><span class="line">I am afraid it&#x27;s not suitable for a birthday party.</span><br><span class="line">I will be right back</span><br><span class="line">old fashioned and faded</span><br><span class="line">It dosen&#x27;t suit you.</span><br><span class="line">be in style 时尚流行</span><br><span class="line">It goes well with your scarf and skirt.</span><br><span class="line">It really match your blue eyes.</span><br></pre></td></tr></table></figure></li></ol><h1 id="blouse"><a href="#blouse" class="headerlink" title="blouse"></a>blouse</h1><p>[英] · &#x2F;blaʊz&#x2F;<br>[n.] 女衬衫；女上衣<br>例句：</p><ol><li>She wore a white blouse and black skirt to the interview. (她穿了一件白色的女衬衫和黑色的裙子去面试。)</li><li>The new collection features a variety of blouses in different colors and patterns. (新系列中有各种颜色和图案的女上衣。)</li><li>I prefer wearing blouses to dresses in the summer because they are more comfortable. (夏天我更喜欢穿女式上装而不是连衣裙，因为它们更舒适。)<br>词源：来自法语blouse，最初指士兵穿的短外套或工作服。</li></ol><h1 id="classy"><a href="#classy" class="headerlink" title="classy"></a>classy</h1><p>[英] · &#x2F;ˈklɑːsi&#x2F;<br>[形容词] 有品位的；高雅的；上等的<br>例句：</p><ol><li>She always dresses so classy.<br>（她总是穿得很有品味。）</li><li>The restaurant has a very classy atmosphere.<br>（这家餐厅氛围非常高雅。）</li><li>He gave a really classy speech at the awards ceremony.<br>（他在颁奖典礼上发表了一篇非常高雅的演讲。）<br>词源：来自class，意为“阶级、等级”，加后缀-y构成形容词。</li></ol><h1 id="pirate"><a href="#pirate" class="headerlink" title="pirate"></a>pirate</h1><p>[英] · &#x2F;ˈpaɪrət&#x2F;<br>[n] 海盗；剽窃者<br>[v] 盗版；掠夺<br>例句：</p><ol><li>The pirates captured the ship and held the crew for ransom. (海盗抓住了那艘船，扣留了船员以勒索赎金。)</li><li>He was accused of pirating software from his company’s competitors. (他被指控从公司竞争对手处盗版软件。)</li><li>The movie studio lost millions due to piracy of their latest film. (电影制片厂因最新电影的盗版而损失数百万。)<br>词源：来自拉丁语pirata，意为“海上强盗”。</li></ol><h1 id="outfit"><a href="#outfit" class="headerlink" title="outfit"></a>outfit</h1><p>[英] · &#x2F;ˈaʊtfɪt&#x2F;<br>[n] 1. 全套装备；全套服装；2. （尤指）一家公司、组织或团体</p><p>例句：</p><ol><li>She wore a stylish outfit to the party.<br>（她穿了一身时髦的衣服去参加派对。）</li><li>The military outfit was well-equipped and highly trained.<br>（这支军队配备精良，训练有素。）</li><li>My sister works for a fashion outfit in New York City.<br>（我姐姐在纽约市的一个时尚公司工作。）</li></ol><p>词源：来自out + fit，意为“完整的设备”。</p><h1 id="bow-tie"><a href="#bow-tie" class="headerlink" title="bow tie"></a>bow tie</h1><p>领结</p><h1 id="flashy"><a href="#flashy" class="headerlink" title="flashy"></a>flashy</h1><p>[英] · &#x2F;ˈflæʃi&#x2F;<br>[形容词] 艳丽的；炫耀的；浮华的<br>例句：</p><ol><li>She wore a flashy dress to the party. (她穿了一件艳丽的裙子去参加派对。)</li><li>His car is too flashy for my taste. (他的车太过浮华，不符合我的口味。)</li><li>The singer’s performance was flashy but lacked substance. (歌手表演很炫耀，但缺乏实质内容。)<br>词源：来自flash（闪光）+ -y后缀</li></ol><h1 id="make-a-bet-on-our-prediction"><a href="#make-a-bet-on-our-prediction" class="headerlink" title="make a bet on our prediction"></a>make a bet on our prediction</h1><p>在这个句子中，“make a bet”意为“下注”。整个句子的意思是“在我们的预测上下注”。</p><p>这个短语也可以用于其他情境，例如：</p><ul><li>He made a bet on the horse race.（他在赛马比赛上下了一笔赌注。）</li><li>I’m not going to make a bet until I know more about the teams.（在我更多地了解队伍之前，我不会进行任何投注。）</li></ul><p>总之，“make a bet”就是指通过支付一定金额或物品来表达对某种结果的信心，并期望获得回报。</p><h1 id="descendant"><a href="#descendant" class="headerlink" title="descendant"></a>descendant</h1><p>[英] · &#x2F;dɪ’sendənt&#x2F;<br>[n] 后代；子孙<br>[adj] 下降的；衰落的<br>例句：</p><ol><li>He is a descendant of the royal family. (他是皇室的后裔。)</li><li>The number of descendants has been decreasing year by year. (后代数量逐年减少。)</li><li>The company’s profits have been on a descendant trend for the past few years. (公司利润在过去几年中一直呈下降趋势。)<br>词源：来自拉丁语“descendere”，意为“下降，传承”。</li></ol><h1 id="Pervasive"><a href="#Pervasive" class="headerlink" title="Pervasive"></a>Pervasive</h1><p>[英] · &#x2F;pəˈveɪsɪv&#x2F;<br>[形] 普遍存在的；无处不在的；渗透性强的<br>例句：</p><ol><li>The pervasive influence of social media is undeniable. (社交媒体的普及影响是不可否认的。)</li><li>The smell of smoke was pervasive throughout the building. (烟味弥漫整个建筑物。)</li><li>Ageism is a pervasive problem in our society. (年龄歧视是我们社会中普遍存在的问题。)<br>词源：来自拉丁语 pervasus，意为“穿过、渗透”。</li></ol><h1 id="undeniable"><a href="#undeniable" class="headerlink" title="undeniable"></a>undeniable</h1><p>[英] · &#x2F;ˌʌndɪˈnaɪəbl&#x2F;<br>[形容词] 不可否认的，无可争辩的<br>中文含义：不可否认的，无法抵赖的</p><p>例句：</p><ol><li>His talent is undeniable.<br>（他的才华是不可否认的。）</li><li>The evidence against him was undeniable.<br>（针对他的证据是无法抵赖的。）</li><li>It is undeniable that climate change is happening.<br>（气候变化正在发生这一点是毋庸置疑的。）</li></ol><p>词源：来自于deny这个单词加上un-前缀构成，意为“不能被否定”。</p><h1 id="negligible"><a href="#negligible" class="headerlink" title="negligible"></a>negligible</h1><p>[英] · &#x2F;ˈneɡlɪdʒəbl&#x2F;<br>[形] 可忽略的，微不足道的<br>例句：</p><ol><li>The difference in price is negligible.<br>（价格上的差异微不足道。）</li><li>The impact of the new policy on the economy is negligible.<br>（新政策对经济的影响微乎其微。）</li><li>The amount of dust in the air was negligible.<br>（空气中灰尘数量可以忽略不计。）<br>词源：<br>来自拉丁语“negligere”，意为“忽视”。</li></ol><h1 id="Ubiquity"><a href="#Ubiquity" class="headerlink" title="Ubiquity"></a>Ubiquity</h1><p>在这个句子中，“Ubiquity”指的是“无处不在”，表示某物或某种情况普遍存在，随处可见。整个句子的意思是“访问无处不在”，即可以随时随地访问。</p><p>这个词也可以用于习语中，例如：“Ubiquitous presence”，意为“到处都有的存在”。其他类似的例子包括：</p><ol><li>The ubiquity of smartphones has changed the way we communicate. (智能手机的普及改变了我们交流方式)</li><li>The ubiquity of fast food restaurants is a sign of our busy lifestyles. (快餐店无处不在反映了我们繁忙的生活方式)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.29 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec4：Dynamic Branch Prediction</title>
      <link href="/2023/05/24/Lec4/"/>
      <url>/2023/05/24/Lec4/</url>
      
        <content type="html"><![CDATA[<h1 id="Branch-History-Table"><a href="#Branch-History-Table" class="headerlink" title="Branch History Table"></a>Branch History Table</h1><p>Taken or not taken<br>为什么1-bit BHT 的错误率是80%? 因为第一次not taken，misprediction后改为taken，最后一次预测错误，所以是misprediction两次<br>为什么2-nested loop taken的错误次数是1+2*9？OK<br>1-bit和2-bit BHT的状态转换图<br>correlating branch predictors</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCS:Part 1</title>
      <link href="/2023/05/23/TCS_1/"/>
      <url>/2023/05/23/TCS_1/</url>
      
        <content type="html"><![CDATA[<h1 id="FSA"><a href="#FSA" class="headerlink" title="FSA"></a>FSA</h1><p> A finite state automaton is (made of):<br>– A finite state set: Q<br>– A finite input alphabet: I<br>– A transition function (partial, in general):</p><h1 id="PDA"><a href="#PDA" class="headerlink" title="PDA"></a>PDA</h1><p>“Finite state machine” + “a stack”: PDA可以记住无限量的信息<br>Input tape + Stack + Control unit<br>This means at state q1, if we encounter an input string ‘a’ and top symbol of the stack is ‘b’, then we pop ‘b’, push ‘c’ on top of the stack and move to state q2.</p><h1 id="TM"><a href="#TM" class="headerlink" title="TM"></a>TM</h1><p>有一个input head和一个memory head</p><h1 id="Nondeterministic-Models"><a href="#Nondeterministic-Models" class="headerlink" title="Nondeterministic Models"></a>Nondeterministic Models</h1><h2 id="Nondeterministic-Finite-state-Automata-NFA"><a href="#Nondeterministic-Finite-state-Automata-NFA" class="headerlink" title="Nondeterministic Finite-state Automata (NFA)"></a>Nondeterministic Finite-state Automata (NFA)</h2><p>“state” the <strong>set</strong> of possible states<br>先构建NFA，再以此构建DFA<br>终结符、非终结符、开始符号</p><p>RL正则语言<br>CFL上下文无关文法<br>GenL通用语言</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> TCS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> TCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/2023/05/22/FOR_Graph/"/>
      <url>/2023/05/22/FOR_Graph/</url>
      
        <content type="html"><![CDATA[<p>动态规划算法的概念</p><h1 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h1><p>G&#x3D;(N,E)<br>nodes and vertices<br>edges and arcs<br>Undirected graph: 边 {i,j}<br>Directed graph: 边 (i,j)<br>The degree of a node<br>The in-degree(out-degree) of a node<br>Nodes u and v are connected<br>A graph is connected(没有孤立点)<br>strongly connected (u and v are connected by a directed path for any u,v\inN)</p><p>Cycle<br>bipartite(no edges connects nodes in the same subset)<br>complete(完全图是一个简单的无向图，其中每对不同的顶点之间都恰连有一条边相连)</p><p>Given a directed graph G&#x3D;(N,A)<br>the outgoing cut&#x2F; incoming cut(出向割和入向割，都是一些边的集合)</p><h2 id="Graph-reachablility-problem"><a href="#Graph-reachablility-problem" class="headerlink" title="Graph reachablility problem"></a>Graph reachablility problem</h2><p>O(N+E)<br>breath-first search</p><p>G’&#x3D;(N’,E’): subgraph<br>GT&#x3D;(N’,T): connected and acyclic<br>spanning tree</p><h1 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h1><p>n nodes and n-1 edges<br>Any pair of nodes in a tree is connected via a unique path<br>By adding a new edge to a tree, we create a unique cycle<br>T\cup{e}{f} is also a spanning tree</p><h2 id="Optimal-cost-spanning-trees"><a href="#Optimal-cost-spanning-trees" class="headerlink" title="Optimal cost spanning trees"></a>Optimal cost spanning trees</h2><ol><li>connected subgraph containing all the nodes</li><li>subgraph with no cycles</li></ol><ul><li><p><strong>Theorem 1</strong><br>A complete graph with n(n&gt;1) nodes has n^(n-2) spanning trees</p></li><li><p><strong>Theorem 2</strong><br>A tree T is of minimum total cost if and only if no cost-decreasing edge exists</p></li><li><p>Prim’s Algorithm<br>Prim’s算法适用于连通无向图，且边的权重不能为负值。如果图不是连通的，则需要对每个连通分量分别应用Prim’s算法，或者在起始节点的选择上进行调整。</p></li><li><p>Kruskal’s Algorithm<br>给边排序，每次选出最小的边并且不生成循环</p></li></ul><h2 id="Optimal-paths"><a href="#Optimal-paths" class="headerlink" title="Optimal paths"></a>Optimal paths</h2><p><strong>Dijkstra’s Algorithm</strong><br>输出从s到图中各个点的最短路径<br>生成的树不是minimum cost sanning tree<br>不能解决有负边的问题<br><strong>Floyd-Warshall Algorithm</strong><br>Triangular operation<br>D矩阵：从i到j的最短路径<br>P矩阵：从i到j最短路径上j的前趋(predecessor)<br>s&#x3D;1,t&#x3D;4,(u&#x3D;2,u&#x3D;3)</p><p><strong>Optimal paths in DAG(directed acyclic graph)</strong><br>Topological ordering method</p><h3 id="Dynamic-programming-for-shortest-paths-in-DAGs"><a href="#Dynamic-programming-for-shortest-paths-in-DAGs" class="headerlink" title="Dynamic programming for shortest paths in DAGs"></a>Dynamic programming for shortest paths in DAGs</h3><p>\pi 是最短路径，Li是从s到i的最短路径的cost</p><p>The Dynamic programming algorithm for finding <strong>shortest(longest)</strong> paths in DAGs is exact.</p><h4 id="1-Project-planning"><a href="#1-Project-planning" class="headerlink" title="1. Project planning"></a>1. Project planning</h4><p><strong>Critical path method</strong><br>最短时间正着看，最长时间反着看</p><h2 id="Network-flows"><a href="#Network-flows" class="headerlink" title="Network flows"></a>Network flows</h2><p>Ford-Fulkerson’s algorithm is not greedy<br>overall complexity is O(m2kmax)<br>The value of a feasible <em>flow of maximum value</em> &#x3D; the capacity of <em>a cut of minimum capacity</em></p><p>最大流问题：把初始流量加入图中，并表示为反方向的箭头(residual network)</p><p>Minimum Cost Flow Problem: 满足容量约束的前提下，以最低的费用从源节点发送流量到汇节点。</p><p>Bipartite graph</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(22周)</title>
      <link href="/2023/05/22/words(week22)/"/>
      <url>/2023/05/22/words(week22)/</url>
      
        <content type="html"><![CDATA[<h1 id="competence"><a href="#competence" class="headerlink" title="competence"></a>competence</h1><p>[英] · &#x2F;ˈkɒmpɪt(ə)ns&#x2F;  美 · &#x2F;ˈkɑːmpətəns&#x2F;<br>[n.] 能力；胜任；资格<br>例句：</p><ol><li>She has demonstrated her competence in managing the team. (她已经证明了自己在团队管理方面的能力。)</li><li>The company is looking for someone with technical competence to fill the position. (公司正在寻找一位具备技术能力的人来填补这个职位。)</li><li>A high level of competence is required for this job. (这份工作需要高水平的能力。)</li></ol><h1 id="correspondence"><a href="#correspondence" class="headerlink" title="correspondence"></a>correspondence</h1><p>[英] · &#x2F;ˌkɒr.əˈspɒn.dəns&#x2F;  [美] · &#x2F;ˌkɔːr.əˈspɑːn.dəns&#x2F;<br>[n.] 1. 通信；信件；信函<br>    2. 相似之处；对应关系<br>    3. 符合，一致<br>例句：</p><ol><li>I have been in correspondence with him for several years.<br>（我和他有几年的书信往来。）</li><li>There is a close correspondence between the two accounts.<br>（这两个账户存在密切的对应关系。）</li><li>The results of the experiment are in correspondence with our expectations.<br>（实验结果与我们的预期相符。）</li></ol><h1 id="be-prone-to"><a href="#be-prone-to" class="headerlink" title="be prone to"></a>be prone to</h1><p>易于</p><h1 id="a-little-step-forward"><a href="#a-little-step-forward" class="headerlink" title="a little step forward"></a>a little step forward</h1><p>迈出一小步</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.22 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>口语表达</title>
      <link href="/2023/05/20/oral%20expression/"/>
      <url>/2023/05/20/oral%20expression/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.20 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phiscal Databases</title>
      <link href="/2023/05/16/DB_PhiscalDatabases/"/>
      <url>/2023/05/16/DB_PhiscalDatabases/</url>
      
        <content type="html"><![CDATA[<h1 id="DATA-ACCESS-and-COST-MODEL"><a href="#DATA-ACCESS-and-COST-MODEL" class="headerlink" title="DATA ACCESS and COST MODEL"></a>DATA ACCESS and COST MODEL</h1><p>Main memory: Page<br>Secondary memory: Block</p><p>Assumption: the size of a page &#x3D; the size of a a block</p><p>secondary memory access: seek time(track)+latency time(sector)+transfer time(data transfer)</p><p>File System<br>DBMS</p><p>Primary structure<br>Secondary structures</p><p><strong>3 main types of data access structures:</strong></p><ol><li>Sequential structures(primary typical):</li></ol><ul><li>Entry-sequenced organization(ordered according their order of entry不好找特定数据，不好增加元组的尺寸)</li><li>Sequentially-ordered organization(ordered by the value of a key)</li></ul><ol start="2"><li>Hash-based structures: bucket(of the size of 1 block): folding&#x2F;hashing</li></ol><ul><li>closed hashing(open addressing) eg. linear probing</li><li>open hashing(separate chaining): overflow chains</li></ul><ol start="3"><li>Tree-based structures(seconary typical)</li></ol><ul><li>Balanced trees(B trees)</li><li>B+ trees</li></ul><p>blocks and tuples</p><p>Block factor B&#x3D;SB&#x2F;SR</p><p><strong>Indexes</strong><br>Dense vs. sparse index<br>primary index<br>clustering index<br>secondary index: why the secondary index is necessarily dense次要索引是基于非主键列构建的索引，用于加速对表中数据的访问。<br>注意： A search key is not a primary key! A search key maybe unique or not unique!<br>Hash-based index</p><h1 id="INTRODUCTION-TO-OPTIMIZATION-COSTS-OF-DIFFERENT-ACCESS-MODES"><a href="#INTRODUCTION-TO-OPTIMIZATION-COSTS-OF-DIFFERENT-ACCESS-MODES" class="headerlink" title="INTRODUCTION TO OPTIMIZATION COSTS OF DIFFERENT ACCESS MODES"></a>INTRODUCTION TO OPTIMIZATION COSTS OF DIFFERENT ACCESS MODES</h1><ol><li>Query optimization<br>Optimizations<br><strong>Operations</strong><br>• Selection<br>• Projection<br>• Sort<br>• Join<br>• Grouping<br><strong>Access methods</strong><br>• Sequential<br>• Hash-based indexes<br>• Tree-based indexes</li></ol><p>Sequential scan<br>Cost of lookups: equality ( A&#x3D;v )<br>• Sequential structures with no index<br>  • Lookups are not supported (cost: a full scan)<br>    • Sequentially-ordered structures may have reduced cost<br>• Hash&#x2F;Tree structures<br>  • Supported if A is the search key attribute of the<br>structure<br>  • The cost depends on<br>    • the storage type (primary&#x2F;secondary)<br>    • the search key type (unique&#x2F;non-unique)</p><h2 id="Equality-lookup"><a href="#Equality-lookup" class="headerlink" title="Equality lookup"></a>Equality lookup</h2><ul><li><p>Equality lookup on a primary hash</p></li><li><p>Equality lookup on a secondary hash<br>eg.(non unique search key)为什么是1.3+2&#x3D;3.3？一共有75K个姓氏，有150K个元组，平均一个姓有两个元组，分别在不同的block上，找到这些block用1.3次，在不同的block上找到这两个元组用2次</p></li><li><p>Equality lookup on a primary B+<br>eg.<br>Query predicate on unique search key(3 intermediate levels + 1 leaf node &#x3D; 4)<br>Query predicate NOT on search key(3 intermediate levels + 2K leaf nodes)<br>Query predicate on non unique search key( 3 intermediate levels + 14 leaf blocks &#x3D; 17)</p></li><li><p>Equality lookup on a secondary B+<br>Query predicate on unique search key of STUDENT(3 intermediate levels + 1 leaf<br>node + 1 data block &#x3D; 5)<br>Query predicate not on search key of STUDENT(Index is not useful for this<br>query (full scan costs 1.7k))</p></li><li><p>Equality lookup on a secondary B+<br>Query predicate on non unique search key of STUDENT(Total cost &#x3D; 3 +1 + 2 &#x3D; 6)<br>Query predicate on non unique search key of EXAM(Total cost &#x3D; 3 + 5 + 3.6K ≈ 3.6K)</p></li></ul><h2 id="Interval-lookup"><a href="#Interval-lookup" class="headerlink" title="Interval lookup"></a>Interval lookup</h2><p>Interval lookups A&lt;v , v1&lt;&#x3D; A &lt;&#x3D; v2<br>Tree structures (primary&#x2F;secondary)<br>• Supported if A is the search key</p><ul><li>Interval lookup on primary B+<br>Cost: 1 block per intermediate level + as many leaf blocks as necessary to read all the tuples in the interval<br>(estimated with statistics)</li><li>Interval lookup on secondary B+<br>Cost: 1 block per intermediate level + as many leaf blocks as necessary to read all pointers in the interval + 1 block per each such pointer (to retrieve the tuples)</li></ul><h2 id="operations"><a href="#operations" class="headerlink" title="operations"></a>operations</h2><ol><li>Conjunction &#x2F; disjunction</li><li>sort</li></ol><ul><li>Sort in main memory</li><li>Sort of large files<br>(External Merge Sort)<br>To sort a file stored in N blocks using B buffer pages:<br>现在有N个block，B个buffer，从N个block里选择B个放入内存，对它们进行排序，把排序好的数据放入一个chunk里，这个chunk的长度是B个block，总共有N&#x2F;B个chunk，现在把B个buffer分成B-1个input buffer和1个output buffer，从每个chunk里取出一个block放进input buffer，进行归并排序，放入output buffer中，output buffer满了就写入磁盘，input buffer空了就读进新的block，最后就得到了一个更大的chunk，大小为(B-1)*B，以此类推，最后只剩下一个chunk。<br><strong>cost:</strong><br>Number of passes cost &#x3D; 1 (for initial step) + ⌈log B-1⌈N&#x2F;B⌉ ⌉ (for iterative merge of chunks)<br>Cost &#x3D; 2 (1 for reading + 1 for writing) * N * (# of passes)</li></ul><ol start="3"><li>Join<br>nested-loop</li></ol><ul><li>simple nested-loop 代价一般是平方(b*b)，如果有一个小的表可以放进buffer，那么cost是b+b</li><li>nested-loop join with cache 把特别小的table放进cache，cost是b+b，小表忽略不计，约等于大表</li><li>filtering by condition</li><li>scan and lookup</li></ul><p>merge-scan join</p><ul><li>sort + merge-scan join<br>c&#x3D;b+b<br>if not sorted, 2<em>b</em>(# of passes)<br>• The ordered full scan is possible for a table if the primary storage is <strong>sequentially ordered wrt the join attribute</strong> or a <strong>B+ on the join attribute is defined</strong></li></ul><p>为什么叶子的数量不同？primary index和second index</p><p>hashed join<br>cost&#x3D;b+b</p><h2 id="COST-BASED-OPTIMIZATION"><a href="#COST-BASED-OPTIMIZATION" class="headerlink" title="COST-BASED OPTIMIZATION"></a>COST-BASED OPTIMIZATION</h2>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trigger</title>
      <link href="/2023/05/16/DB_Trigger/"/>
      <url>/2023/05/16/DB_Trigger/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-Condition-Action"><a href="#Event-Condition-Action" class="headerlink" title="Event-Condition-Action"></a>Event-Condition-Action</h1><p>Execution mode: before or after</p><h1 id="Granularity-of-events"><a href="#Granularity-of-events" class="headerlink" title="Granularity of events:"></a>Granularity of events:</h1><p>Row-level granularity(for each row)—once for each tuple(less efficient)<br>Statement-level granularity(for each statement)—only once for each activating statement</p><h1 id="Transition-Variables"><a href="#Transition-Variables" class="headerlink" title="Transition Variables"></a>Transition Variables</h1><p>Row-level: tuple variables<br>Statement-level: table variables</p><blockquote><p>在数据库中，过渡变量（transition variable）是在触发器中使用的一种特殊变量类型。它们用于引用与触发器相关的行或数据。</p></blockquote><p>当触发器在数据库操作（如插入、更新、删除）发生时被触发时，过渡变量提供了对相关数据的访问。这些变量的值可以在触发器的动作部分使用，以执行特定的操作或进行其他处理。</p><p>过渡变量的名称和用法可能会根据具体的数据库系统和触发器定义而有所不同。在一些常见的数据库系统中，以下是几个常用的过渡变量：</p><p style="color: #33CC00;"><b>OLD：表示在更新或删除触发器中引用被修改或删除的旧数据。它可以用于访问操作之前存在的值。</b></p><p style="color: #33CC00;"><b>NEW：表示在插入或更新触发器中引用新插入或修改的数据。它可以用于访问操作之后的值。</b></p><h1 id="Triggers-in-SQL-1999-Syntax"><a href="#Triggers-in-SQL-1999-Syntax" class="headerlink" title="Triggers in SQL:1999, Syntax"></a>Triggers in SQL:1999, Syntax</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create trigger &lt;TriggerName&gt;</span><br><span class="line">&#123; before | after &#125;</span><br><span class="line">&#123; insert | delete | update [of &lt;Column&gt;] &#125; on &lt;Table&gt;</span><br><span class="line">referencing &#123; [ old table [as] &lt;OldTableAlias&gt; ]</span><br><span class="line">[ new table [as] &lt;NewTableAlias&gt; ] |</span><br><span class="line">[ old [row] [as] &lt;OldTupleName&gt; ]</span><br><span class="line">[ new [row] [as] &lt;NewTupleName&gt; ] &#125;</span><br><span class="line">[ for each &#123; row | statement &#125; ]</span><br><span class="line">[ when &lt;Condition&gt; ]</span><br><span class="line">&lt;SQLProceduralStatement&gt;</span><br></pre></td></tr></table></figure><h1 id="AFTER-trigger"><a href="#AFTER-trigger" class="headerlink" title="AFTER trigger"></a>AFTER trigger</h1><h2 id="Insertion-of-a-new-tuple-into-T1"><a href="#Insertion-of-a-new-tuple-into-T1" class="headerlink" title="Insertion of a new tuple into T1"></a>Insertion of a new tuple into T1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 创建T1表</span><br><span class="line">CREATE TABLE T1 (</span><br><span class="line">  ID INT PRIMARY KEY,</span><br><span class="line">  VALUE VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建T2表</span><br><span class="line">CREATE TABLE T2 (</span><br><span class="line">  ID INT PRIMARY KEY,</span><br><span class="line">  VALUE VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER insert_into_T2</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line"> ** INSERT INTO **T2 (ID, VALUE) VALUES (NEW.ID, NEW.VALUE);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>NEW就是transition variable</p><h2 id="Deletion-of-a-tuple-from-T1"><a href="#Deletion-of-a-tuple-from-T1" class="headerlink" title="Deletion of a tuple from T1"></a>Deletion of a tuple from T1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER delete_from_T2</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">  DELETE FROM T2 WHERE ID = OLD.ID;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER update_T2</span><br><span class="line">**AFTER UPDATE OF VALUE ON** T1</span><br><span class="line">WHEN NEW.ID=OLD.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">  UPDATE T2 SET T2.VALUE = NEW.VALUE </span><br><span class="line">  WHERE ID = NEW.ID;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Conditional-replication"><a href="#Conditional-replication" class="headerlink" title="Conditional replication"></a>Conditional replication</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER COND_REPL_INS</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE&gt;=10)</span><br><span class="line">**INSERT INTO T2 VALUES**(new.ID,new.VALUE)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER COND_REPL_DEL</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN(old.VALUE&gt;=10)</span><br><span class="line">**DELETE FROM T2 WHERE** T2.ID=old.ID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER Cond_REPL_UPD_1 –- new relevant tuple, replicate</span><br><span class="line">**AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID**</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &lt; 10 AND new.VALUE &gt;= 10)</span><br><span class="line">**INSERT INTO T2 VALUES** (new.ID, new.VALUE);</span><br><span class="line">CREATE TRIGGER Cond_REPL_UPD_2 –- already replicated tuple changed, propagate</span><br><span class="line">AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &gt;= 10 AND new.VALUE &gt;= 10 AND old.VALUE != new.VALUE)</span><br><span class="line">**UPDATE T2 SET **T2.VALUE = new.VALUE WHERE T2.ID = new.ID</span><br><span class="line">CREATE TRIGGER Cond_REPL_UPD_3 –- replicated tuple no longer relevant: delete</span><br><span class="line">AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &gt;= 10 AND new.VALUE &lt; 10)</span><br><span class="line">**DELETE FROM T2 WHERE** T2.ID = new.ID; </span><br></pre></td></tr></table></figure><h1 id="BEFORE-x2F-AFTER-trigger"><a href="#BEFORE-x2F-AFTER-trigger" class="headerlink" title="BEFORE&#x2F;AFTER trigger"></a>BEFORE&#x2F;AFTER trigger</h1><p>具体来说，”before” 触发器通常与数据库中的表相关联。当特定的操作（如插入、更新或删除数据）被执行之前，触发器会自动触发。触发器可以在数据<strong>被提交到数据库之前</strong>进行额外的验证、转换或处理。</p><p>以下是一些常见的使用情况：</p><ol><li><p>数据验证：通过 “before” 触发器，可以在执行插入或更新操作之前对数据进行验证。例如，你可以检查某些字段是否满足特定的条件或约束，如果不满足，则阻止操作执行，并返回错误消息。</p></li><li><p>数据转换：触发器还可以用于在数据被插入或更新之前对其进行转换。例如，你可以在插入数据之前将其格式化为特定的方式，或者在更新数据之前对其进行计算或清理。</p></li><li><p>数据补全：有时，在插入或更新数据时，可能需要根据其他表中的值自动填充某些字段。通过使用 “before” 触发器，你可以查询其他表并根据需要补全数据。</p></li><li><p>审计跟踪：触发器还可以用于在执行数据库操作之前记录审计日志。你可以捕获正在进行的操作以及相关的元数据，例如时间戳、执行用户等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER NO_NEGATIVE_VALUES</span><br><span class="line">BEFORE UPDATE of VALUE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (new.VALUE &lt; 0)</span><br><span class="line">SET new.VALUE=0; -- this &quot;modifies the modification&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="row-vs-statement"><a href="#row-vs-statement" class="headerlink" title="row vs. statement"></a>row vs. statement</h1><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>• Statement:<br>DELETE FROM T1 WHERE VALUE &gt;&#x3D; 5;<br>• Trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER ST_REPL_DEL</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">REFERENCING OLD TABLE AS OLD_T</span><br><span class="line">FOR EACH STATEMENT --all tuples considered at once</span><br><span class="line">DELETE FROM T2 WHERE T2.ID IN</span><br><span class="line">(SELECT ID FROM OLD_T); -- no need to add where OLD_T.value &gt;=10</span><br></pre></td></tr></table></figure><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>• Statement:<br>INSERT INTO T1 (Id, Value) VALUES (4, 5), (5, 10), (6, 20);<br>Trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER ST_REPL_INS</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">REFERENCING NEW TABLE AS NEW_T</span><br><span class="line">**FOR EACH STATEMENT** --all tuples considered at once</span><br><span class="line">INSERT INTO T2</span><br><span class="line">(SELECT ID, VALUE</span><br><span class="line">FROM NEW_T WHERE NEW_T.VALUE &gt;= 10);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER REPLIC_INS</span><br><span class="line">AFTER UPDATE ON T1</span><br><span class="line">REFERENCING OLD TABLE AS OLD_T NEW TABLE AS NEW_T</span><br><span class="line">FOR EACH STATEMENT</span><br><span class="line">DELETE FROM T2 --delete all updated rows</span><br><span class="line">WHERE T2.ID IN (SELECT ID FROM OLD_T);--删除所有更新过的行</span><br><span class="line">INSERT INTO T2 --reinsert only relevant rows</span><br><span class="line">(SELECT ID, VALUE FROM NEW_T</span><br><span class="line">WHERE NEW_T.VALUE &gt;= 10);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACAV实践</title>
      <link href="/2023/05/16/ACAV_programming/"/>
      <url>/2023/05/16/ACAV_programming/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_21137441/article/details/127284890">OpenCV 最新版windows下安装教程</a><br><a href="https://blog.csdn.net/zengshaoqing/article/details/105046277">超详细windows 安装opencv以及在VS中配置opencv</a><br><a href="https://blog.csdn.net/qq_17034717/article/details/77482705">C++ 头文件#ifndef&#x2F;#define&#x2F;#endif</a></p><p><a href="https://blog.csdn.net/weixin_42125124/article/details/116919021">RANSAC算法详解+Python实现</a><br><a href="https://blog.csdn.net/LOVEmy134611/article/details/117301771">Python-Matplotlib可视化（1）——一文详解常见统计图的绘制</a></p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACAV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACAV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Concurrency Control</title>
      <link href="/2023/05/16/DB_Concurrency%20Control/"/>
      <url>/2023/05/16/DB_Concurrency%20Control/</url>
      
        <content type="html"><![CDATA[<h1 id="Anomalies"><a href="#Anomalies" class="headerlink" title="Anomalies"></a>Anomalies</h1><ol><li>Lost update</li><li>Dirty read</li><li>Nonrepeatable read</li><li>Phantom update</li><li>Phantom insert</li></ol><h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><ul><li>Serial-Serializable-ALL</li><li><strong>View-serializability</strong>(the same reads-from relationship and final writes)——判断起来时空复杂度太高</li><li><strong>Conflict-serializability</strong>(更高的要求，更简单的判断方法)——conflict graph(if there is no cycles in the graph)<blockquote><p>怎么找equivalent serial schedule？ 删节点</p></blockquote></li></ul><h1 id="approaches"><a href="#approaches" class="headerlink" title="approaches"></a>approaches</h1><h2 id="1-Lock"><a href="#1-Lock" class="headerlink" title="1. Lock"></a>1. Lock</h2><p><strong># pessimistic concurrency control</strong></p><ul><li><p><strong>r_lock(shared lock), w_lock(exclusive lock)</strong></p></li><li><p><strong>Two-Phase Locking (<em>short duration locks</em>)</strong><br>  解决non-repeatable read<br>  释放锁后不能申请任何别的锁 (growing phase-&gt;plateau-&gt;shrinking phase)<br>  VSR&lt;CSR&lt;2PL</p></li><li><p><strong>Strict 2PL (<em>long duration locks</em>)</strong><br>  解决dirty read<br>  commit&#x2F;rollback 后才能释放锁</p></li><li><p><strong>Predicate locks</strong><br>  the lock on all tuples satisfying the predicate</p></li><li><p><strong>Update lock</strong><br>  解决丢失更新的问题，事务T1在请求升级SL为UL时，必须保证没有别的事务的SL<br>  不能直接从SL升级到XL，必须经过UL<br>  可以直接获得XL,SL,UL,先读后写，先给UL<br>  Each transaction can commit right after its last operation.</p></li><li><p><strong>Hierarchical locking</strong><br>  自上而下请求资源<br>  自下而上释放锁<br>  schema, table, fragment, page, tuple, field</p></li><li><p><strong>Intention Locking Scheme</strong><br>  5 lock modes: SL, XL, ISL, IXL, SIXL<br>  Protocol:<br>  request: top-down<br>  release: bottom-up<br>  request <strong>SL or ISL</strong>——equally or more restrictive lock**(ISL or IXL)** on its “parent”<br>  request <strong>IXL,XL,SIXL</strong>——-equally or more restrictive lock(<strong>SIXL or IXL</strong>) on its “parent”</p></li></ul><h2 id="2-Timestamps"><a href="#2-Timestamps" class="headerlink" title="2. Timestamps"></a>2. Timestamps</h2><p><strong># optimistic concurrency control</strong></p><h1 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a>Deadlock</h1><ul><li>Lock graph</li><li>Wait-for graph(循环有死锁)</li></ul><h2 id="Deadlock-Resolution-Techniques"><a href="#Deadlock-Resolution-Techniques" class="headerlink" title="Deadlock Resolution Techniques"></a>Deadlock Resolution Techniques</h2><h3 id="1-Timeout"><a href="#1-Timeout" class="headerlink" title="1. Timeout"></a>1. Timeout</h3><h3 id="2-Deadlock-prevention"><a href="#2-Deadlock-prevention" class="headerlink" title="2. Deadlock prevention"></a>2. Deadlock prevention</h3><ul><li>resourse-based prevention<br>  事务必须一次请求所有资源<br>  但事务很难一下子明确所有需求</li><li>transaction-based prevention<br>  不要让老的等待年轻的<ul><li>Preemptive (杀掉占有资源的事务——wound-wait)<br>  老的抢（杀掉年轻的），年轻的等</li><li>Non-preemptive (杀掉请求资源的事务——wait-die)<br>  老年人申请年轻人的资源——wait<br>  年轻人申请老年人的资源——die(abort+restart)</li></ul></li></ul><h3 id="3-Deadlock-detection"><a href="#3-Deadlock-detection" class="headerlink" title="3. Deadlock detection"></a>3. Deadlock detection</h3><ul><li>Distributed Deadlock Detection<br><strong>Obermarck’s algorithm</strong></li></ul><h1 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h1><ol><li>Syntax: timestamp &#x3D; event-id.node-id</li></ol><ul><li>event-ids are unique <strong>at each node</strong></li><li>同一个node中的node-id都一样</li></ul><ol start="2"><li>Note that the notion of time is “<strong>lexical</strong>”: timestamp 5.1 “occurs before”<br>timestamp 5.2</li><li>算法（Lamport方法）：如果接收到来自“未来”的消息，则使用“碰撞规则”将<strong>接收事件</strong>的时间戳推迟到<strong>发送事件</strong>的时间戳之后，以避免出现此类情况。</li></ol><ul><li>如果我从你那里接收到一个时间戳大于我的最后一个发出的时间戳的消息，则更新当前时间戳以超过您的。</li><li><strong>rts只需要和WTM比，wts要和WTM和RTM比</strong><br>The scheduler receives read&#x2F;write requests tagged with<br>the timestamp of the requesting transaction:<br>• rts(x):<br>• If ts &lt; WTM(x) the request is rejected and the transaction is killed<br>• Else, access is granted and we set <strong>RTM(x) &#x3D; max(RTM(x), ts)</strong><br>• wts(x):<br>• If ts &lt; RTM(x) or ts &lt; WTM(x) the request is rejected and the<br>transaction is killed<br>• Else, access is granted and we set <strong>WTM(x) &#x3D; ts</strong></li></ul><ol start="4"><li>2PL vs. TS  incomparable</li><li>TS and CSR<br>• TS &#x3D;&gt; CSR</li><li>TS and dirty reads</li><li><strong>Thomas Rule</strong>：reduce kill rate</li></ol><p><strong>处理wts时</strong>，<br>ts &lt; RTM(x)：杀<br>ts &lt; WTM(x)：过时，跳过<br>else：授权访问</p><ul><li>TS with Thomas Rule maybe not in VSR</li></ul><h2 id="TS-mono"><a href="#TS-mono" class="headerlink" title="TS-mono"></a>TS-mono</h2><p>• rts(x):<br>• If ts &lt; WTM(x) the request is rejected and the transaction is killed<br>• Else, access is granted and we set RTM(x) &#x3D; max(RTM(x), ts)<br>• wts(x):<br>• If ts &lt; RTM(x) or ts &lt; WTM(x) the request is rejected and the<br>transaction is killed<br>• Else, access is granted and we set WTM(x) &#x3D; ts</p><h2 id="Multiversion-Concurrency-Control"><a href="#Multiversion-Concurrency-Control" class="headerlink" title="Multiversion Concurrency Control"></a>Multiversion Concurrency Control</h2><p>WTMi(x), RTM(x)</p><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism:"></a>Mechanism:</h3><p>• <strong>rts(x) is always accepted</strong>. A copy xk is selected for reading<br>such that:<br>• If ts &gt;&#x3D; WTMN(x), then k &#x3D; N<br>• Else take k such that WTMk(x) &lt;&#x3D; ts &lt; WTMk+1(x)<br>• <strong>wts(x):</strong><br>• If ts &lt; RTM(x) the request is rejected<br>• Else a new version is created for timestamp ts (N is incremented)<br>• WTM1(x), …, WTMN(x) are the new versions, kept sorted from<br>oldest to youngest<br>• NB: unlike here, in real systems based, e.g., on snapshot isolation<br>(see later) and, for simplicity, in the exercises, if ts &lt; WTMN(x),<br>the request is rejected</p><p>做题心得：</p><ol><li>lost update: 必须是interleaved的两个r-w，只有w不行</li><li>phantom update: 必须有一个全局的限制条件，update后全局条件没变，但因为某些事务不知道所有的update，所以它觉得全局条件不满足了(两个读，一个读改之前的，一个读已经被别的事务改过的)</li><li>属于VSR但不属于CSR的schedule都有一个共同的特点：他的冲突图中存在因为一对blind writes而产生的一对边导致的循环(w1,w2,w3)<br>什么是blind write？ 对于同一个资源，不是最后一个操作，后续还有写<br>找到blind write之后，调换它们的位置，看看能不能消除循环</li></ol><p>几个快速判断VSR的方法：</p><ul><li>if has the same reads-from and final writes(一般只有是VSR的时候这种方法才有效，因为需要和serial schedule比对)</li><li>找找有没有blind write，调换它们的位置，看看能不能消除循环</li><li>看看找到相互冲突的两对，如果不能调整任何一对的顺序，循环不能消除，说明不是VSR</li><li>找每个循环的共同部分，看看能不能打破循环</li></ul><hr><ol start="4"><li><p>2PL(全都锁上才能释放)<br>两个注意：<br>(1)Same resource: 只有当资源R空闲的时候才能上锁(UR &lt; LR)<br>(2)Same transaction: 所有的解锁必须在上锁之前(下面的锁&lt;上面的放锁)<br>怎么判断：画表，一个一个标，找到那些必须提前加锁的时机，找到加锁和放锁的交界<br>2PL属于CSR, 可以先判断CSR</p></li><li><p>Strict-2PL<br>commit&#x2F;rollback以后才能释放锁。<br>怎么判断：找到每个事务的最后一个操作，再看在那之前需不需要提前释放锁</p></li><li><p>Obermarck<br>把i&gt;j传送给对应的node</p></li><li><p>Update lock可以消除所有的死锁吗？<br>答：不能，<br>• Clearly deadlocks are possible in the presence of UL. Indeed, UL only makes deadlock less likely, by preventing one type of (very frequent) deadlock, due to update patterns, when two transactions compete for the same resource (e.g., r1(x) r2(x) w1(x) w2(x)). Consider two distinct resources X Y, and two transactions that want to access them in this order:<br>r1(X) r2(Y) w1(Y) w2(X).<br>• It is likely that they end up in deadlock, especially if the system on which they run applies 2PL. UL is totally irrelevant here, because there is no update pattern.</p></li></ol><hr><ol start="8"><li>怎么判断TS-mono？<br>找r-w, w-r, w-w对，看看有没有too late<br>TS(mono)属于CSR，可以以此判断</li><li>怎么判断TS-multi？<br>找晚的w, 小于RTM</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB实践</title>
      <link href="/2023/05/16/DB_programming/"/>
      <url>/2023/05/16/DB_programming/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.postgresqltutorial.com/postgresql-getting-started/load-postgresql-sample-database/"><span style="color:red;font-size:15px;font-family:黑体;">关于导入数据库</span></a></p><p><a href="https://blog.csdn.net/Love_XiaoQinEr/article/details/127599781"><span style="color:red;font-size:15px;font-family:黑体;"><br>C++操作PostgreSQL数据库</br></span></a></p><p><a href="https://www.eet-china.com/mp/a49137.html"><span style="color:red;font-size:15px;font-family:黑体;"><br>手把手教你在Windows下编译、使用开源库</br></span></a></p><p><a href="https://github.com/jtv/libpqxx/issues/570"><span style="color:red;font-size:15px;font-family:黑体;"><br>怎么指定C++版本</br></span></a></p><p><a href="https://blog.csdn.net/fanjufei123456/article/details/131246896">解决Can’t find the main PostgreSQL client header</a><br><a href="https://stackoverflow.com/questions/37385636/how-to-do-this-linux-command-in-windows">怎么安装</a></p><p><a href="https://www.youtube.com/watch?v=qDiC1Wja6Og">最后实在没弄好</a><br><a href="http://en.wiki.imlint.org/Pqxx_tutorial">文字版教程</a></p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第2周）</title>
      <link href="/2023/05/15/words(2024.2)/"/>
      <url>/2023/05/15/words(2024.2)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-prompt"><a href="#1-prompt" class="headerlink" title="1. prompt"></a>1. prompt</h3><p>[英]· &#x2F;prɒmpt&#x2F;  美· &#x2F;prɑːmpt&#x2F;<br>[动] 快速的、迅速的；提示、鼓励<br>例句：</p><ol><li>She prompted him to finish his homework before going out. (她促使他在外出前完成作业。)</li><li>The teacher’s prompt response to the student’s question impressed everyone in the classroom. (老师对学生问题的快速回应给教室里每个人留下了深刻印象。)</li><li>He was always prompt in paying his bills on time. (他总是及时支付账单。)<br>词源：<br>来自拉丁语“promptus”，意为“准备好的，现成的”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周报1</title>
      <link href="/2023/05/15/weekly1/"/>
      <url>/2023/05/15/weekly1/</url>
      
        <content type="html"><![CDATA[<h1 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h1><ol><li>复习完MIDA1，看至少一半的exe课</li><li>复习完ACA(一天看两节课，十天看完) 每天五个小时</li><li>看FOR(2)和DB(3)的PPT，并做题</li><li>写周报，分享感受，The long season</li><li>第一轮考7门：TCS（12）,ACA（13）,CI（15）,FOR（16）, <del>CS（21）</del>, DB2（23）在ACA考试前只需要把理论和TA看完就行, MIDA1（24）, <del>MIDA2,</del>  </li><li>到12点做一个TCS，下午做完物理数据库和trigger，晚上做两个mida。睡前看两个for<br>是一个exe(3天看完)，<br>for做完 1，2单元的题</li></ol><h1 id="发现的一些有趣的频道"><a href="#发现的一些有趣的频道" class="headerlink" title="发现的一些有趣的频道"></a>发现的一些有趣的频道</h1><p><a href="https://www.xiaoyuzhoufm.com/podcast/640ee2438be5d40013fe4a87">硬地骇客</a></p><p><a href="https://www.xiaoyuzhoufm.com/podcast/640ee2438be5d40013fe4a87">豌豆花下猫（关于Python）</a></p><p><a href="https://brr.fyi/">被派到南极洲工作的程序员</a><br>作者作为 IT 工程师被派到南极洲工作，博客是记录他在南极生活的点点滴滴</p><h1 id="看到的一些推特好帖"><a href="#看到的一些推特好帖" class="headerlink" title="看到的一些推特好帖"></a>看到的一些推特好帖</h1><h2 id="1-如何提高专注度"><a href="#1-如何提高专注度" class="headerlink" title="1. 如何提高专注度"></a>1. 如何提高专注度</h2><p>**转自博主Dexter Yang(@dexteryy)**，<br><a href="https://twitter.com/dexteryy/status/1629491278886076416">方法</a><br>想要通过正念（mindfulness&#x2F;meditation）来恢复对当下的感知、减慢时间流逝、用内啡肽替代多巴胺、提升专注能力、降低压力的消极影响，我觉得骑车是最有效果的（图2），比那些冥想app里的付费课程（图1）强多了。<br>方法总结：</p><ol><li>不要听播客不要听播客不要听播客（凡是抢占注意力的都不要碰）。<br>(1&#x2F;4)</li><li>开降噪，听音乐。最好是 citypop、blues  那样积极向上的音乐（这两种本来就源自上班族和黑人奴工振奋情绪排解压力的需求）。</li><li>公路车和共享单车都可以。</li><li>把注意力放在自身感受和眼前情景上，只接受下意识的瞬间的发散和思考。</li><li>天气要好，一定要有阳光，推荐下午出发，去程有落日返程有夜景。</li><li>路线选择类似 city walk，尽量途径那些有河、有沿街生态、城市机理细密有机多样的地方。</li></ol>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第1周）</title>
      <link href="/2023/05/15/words(2024.1)/"/>
      <url>/2023/05/15/words(2024.1)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-disparity"><a href="#1-disparity" class="headerlink" title="1. disparity"></a>1. disparity</h3><p>[英]· &#x2F;dɪˈspar.ə.ti&#x2F;<br>[n.] 不同，差异；不平等<br>例句：</p><ol><li>There is a huge disparity in wealth between the rich and poor.<br>（富人和穷人之间的财富差距很大。）</li><li>The study found a significant disparity in pay between male and female employees.<br>（这项研究发现男女员工的薪资存在显著的差异。）</li><li>The educational system needs to address the disparities that exist among different socioeconomic groups.<br>（教育系统需要解决不同社会经济群体之间存在的不平等问题。）<br>词源：<br>来自拉丁语“disparitas”，由“dis-”表示否定，“paritas”表示相等组成，意为“不相等”。</li></ol><h3 id="2-align"><a href="#2-align" class="headerlink" title="2. align"></a>2. align</h3><p>[英]· &#x2F;əˈlaɪn&#x2F;<br>[v] 使排成一行，调整；[计算机] 对齐<br>例句：</p><ol><li>We need to align the text to the left.<br>（我们需要把文本左对齐。）</li><li>The wheels on my car are not aligned properly.<br>（我的车轮没有正确地对准。）</li><li>You can use this button to align the image with the text.<br>（你可以使用这个按钮来将图像与文本对齐。）<br>词源：<br>来自中古法语的“aligner”，意为“排列”。</li></ol><h3 id="3-intrinsic"><a href="#3-intrinsic" class="headerlink" title="3. intrinsic"></a>3. intrinsic</h3><p>[英]· &#x2F;ɪnˈtrɪnsɪk&#x2F;<br>[形容词] 固有的，内在的；本质的<br>例句：</p><ol><li>The value of the artwork is not just in its extrinsic factors, but also in its intrinsic beauty. (艺术品的价值不仅在于其外部因素，还在于其内在美)</li><li>She has an intrinsic talent for music that cannot be taught. (她天生具备音乐才华，这是无法教授的)</li><li>The company’s success can be attributed to the hard work and dedication of its employees, as well as their intrinsic motivation to succeed. (公司成功归功于员工们的努力和奉献精神，以及他们固有的成功动力)<br>词源：来自拉丁语intrinsecus，“从内部”，由in-“inside”和trinsecus“outward”的组合构成。</li></ol><h3 id="4-coordinate"><a href="#4-coordinate" class="headerlink" title="4. coordinate"></a>4. coordinate</h3><p>[英]· &#x2F;kəʊˈɔːdɪneɪt&#x2F; 或 &#x2F;koʊ-&#x2F;<br>[动词] 协调；配合；使协同<br>[形容词] 同等的；并列的<br>[名词] 坐标；配合物<br>例句：</p><ol><li>We need to coordinate our efforts if we want to succeed. (如果我们想要成功，我们需要协调我们的努力。)</li><li>The different departments must coordinate their work in order to achieve the project’s goals. (不同部门必须协调他们的工作以实现项目目标。)</li><li>The colors of the curtains and sofa are well coordinated with each other. (窗帘和沙发的颜色相互搭配得很好。)<br>词源：<br>来自拉丁语 “co-“（共同）+ “ordinare”（安排、整理）。</li></ol><h3 id="5-resolution"><a href="#5-resolution" class="headerlink" title="5. resolution"></a>5. resolution</h3><p>[英]· &#x2F;ˌrezəˈluːʃn&#x2F; ; [美]· &#x2F;ˌrɛzəˈluʃn&#x2F;<br>[n.] 决心；决定；解决；分辨率<br>例句：</p><ol><li>She made a resolution to quit smoking this year. (她下定决心今年戒烟。)</li><li>The company reached a resolution on the dispute with its competitor. (公司与竞争对手的纠纷得到了解决。)</li><li>The camera has high resolution, which makes the pictures very clear and detailed. (这款相机具有高分辨率，使图片非常清晰和详细。)<br>词源：<br>from Latin “resolutionem” meaning “a breaking into parts,” from “resolutus,” past participle of “resolvere” meaning “to loosen, undo, settle”.</li></ol><h3 id="6-disparate"><a href="#6-disparate" class="headerlink" title="6. disparate"></a>6. disparate</h3><p>[英]· &#x2F;ˈdɪspərət&#x2F;  美· &#x2F;ˈdɪspərət&#x2F;<br>[形容词] 不同的；迥然不同的；毫无关联的<br>例句：</p><ol><li>The two cultures were so disparate that they found it hard to communicate. (这两种文化如此不同，以至于他们很难沟通。)</li><li>There is a disparate range of opinions on this issue. (在这个问题上有各种各样不同的意见。)</li><li>The company’s workforce was made up of people from many disparate backgrounds and nationalities. (公司员工来自许多背景和国籍迥异的人群。)<br>词源：<br>来自拉丁语 “disparatus”，意为“分开、分散”。</li></ol><h3 id="7-stereo"><a href="#7-stereo" class="headerlink" title="7. stereo"></a>7. stereo</h3><p>[英]· &#x2F;ˈsteriəʊ&#x2F;  美· &#x2F;ˈstɛrioʊ&#x2F;<br>[n.] 声像式立体声；立体声音响设备<br>[adj.] 立体声的，双声道的<br>例句：</p><ol><li>I love listening to music in stereo.<br>（我喜欢听立体声音乐。）</li><li>This stereo system has great sound quality.<br>（这个立体声系统有很好的音质。）</li><li>The concert was recorded in stereo and sounds amazing.<br>（这场演唱会是用立体声录制的，听起来非常棒。）<br>词源：来自希腊语“stereos”，意为“实心、三维”。</li></ol><h3 id="8-sematic"><a href="#8-sematic" class="headerlink" title="8. sematic"></a>8. sematic</h3><p>[英]· &#x2F;sɪˈmætɪk&#x2F;<br>[形] 语义的；符号的<br>例句：</p><ol><li>The sematic meaning of a word is its literal definition.<br>（一个词的语义意义是它字面上的定义。）</li><li>Semantics is the study of meaning in language.<br>（语义学是研究语言中含义的学科。）</li><li>In computer science, sematics refers to the meaning of programming languages and their expressions.<br>（在计算机科学中，sematics 指编程语言及其表达式的含义。）</li></ol><h3 id="9-progressive"><a href="#9-progressive" class="headerlink" title="9. progressive"></a>9. progressive</h3><p>[英]· &#x2F;prəˈɡresɪv&#x2F;  美· &#x2F;prəˈɡrɛsɪv&#x2F;<br>[形容词] 进步的；先进的；渐进的；逐渐增加的<br>[名词] (美国政治)进步党人，革新派<br>例句：</p><ol><li>The company has a progressive policy on employee benefits.<br>(该公司在员工福利方面有一个积极的政策。)</li><li>She is known for her progressive views on social issues.<br>(她以其对社会问题持有的进步观点而闻名。)</li><li>The disease is characterized by a progressive loss of muscle control.<br>(这种疾病表现为肌肉控制能力逐渐丧失。)<br>词源：<br>来自拉丁语“progressus”，意为前进、行走，由“pro-”（向前）和“gressus”（过去分词，意为走）组成。</li></ol><h3 id="10-pitfall"><a href="#10-pitfall" class="headerlink" title="10. pitfall"></a>10. pitfall</h3><p>[英]· &#x2F;ˈpɪtfɔːl&#x2F; ; [美]· &#x2F;ˈpɪtfɔl&#x2F;<br>[n.] 陷阱；圈套；隐患<br>例句：</p><ol><li>The company fell into the pitfall of relying too heavily on one client. (公司陷入了过度依赖一个客户的陷阱。)</li><li>Be aware of the potential pitfalls when investing in stocks. (在股票投资时要注意可能存在的风险。)</li><li>He was caught in a pitfall and had to be rescued by his companions. (他掉进了一个坑洞，必须由同伴救援。)<br>词源：来自于中古英语 “pitfalle”，意为 “动物捕获用的深坑”。</li></ol><h3 id="pit"><a href="#pit" class="headerlink" title="pit"></a>pit</h3><p>[英]· &#x2F;pɪt&#x2F;<br>[n.] 坑，凹陷处；煤矿，油井；果核，榨汁机的桶<br>[v.] 使留下坑洼；在…中挖掘出坑洞</p><p>例句：</p><ol><li>The car skidded and ended up in a pit by the side of the road. (汽车打滑后停在了路边的一个坑里。)</li><li>He fell into a deep pit and broke his leg. (他掉进了一个深坑里摔断了腿。)</li><li>She was pitting cherries for the pie filling. (她正在为馅饼做准备去除樱桃的果核。)</li></ol><p>词源：来自于古英语“pytt”，意为“小孔、窟窿”。</p><h3 id="11-saturate"><a href="#11-saturate" class="headerlink" title="11. saturate"></a>11. saturate</h3><p>[英]· &#x2F;ˈsætʃəreɪt&#x2F;  美· &#x2F;ˈsætʃəˌret&#x2F;<br>[v] 使饱和；浸透；使充满<br>[adj] 饱和的，浸透的<br>[名词] 饱和度</p><ol><li>The sponge was saturated with water.<br>这个海绵已经被水浸透了。</li><li>The market is already saturated with similar products.<br>市场上已经有太多类似产品了。</li><li>If you saturate the soil, the plants will die.<br>如果你让土壤过于湿润，植物就会死亡。</li></ol><p>词源：来自拉丁语“saturatus”，意为“饱和”。</p><h3 id="12-outlier"><a href="#12-outlier" class="headerlink" title="12. outlier"></a>12. outlier</h3><p>[英]· &#x2F;ˈaʊtlaɪə(r)&#x2F;<br>[n] 异常值；离群值；局外人<br>例句：</p><ol><li>The data point is an outlier and should be removed from the analysis. (这个数据点是一个异常值，应该从分析中删除。)</li><li>She always felt like an outlier in her family, with different interests and values than everyone else. (她总觉得自己在家庭中像个局外人，与其他人有不同的兴趣和价值观。)</li><li>This result is considered as an outlier because it deviates significantly from the expected pattern. (这个结果被认为是一个离群值，因为它明显偏离了预期的模式。)<br>词源：<br>来自 out（出）+ lier（居住者），意思是“远离主体、不合规”的人或事物。</li></ol><h3 id="13-exhaustive"><a href="#13-exhaustive" class="headerlink" title="13. exhaustive"></a>13. exhaustive</h3><p>[英]· &#x2F;ɪɡˈzɔːstɪv&#x2F; ; [美]· &#x2F;ɪɡˈzɑːstɪv&#x2F;<br>[形容词] 彻底的；详尽无遗的；彻头彻尾的<br>例句：</p><ol><li>The report provides an exhaustive analysis of the situation. (报告提供了对情况的详尽分析。)</li><li>She conducted an exhaustive search for her missing keys. (她进行了一次全面搜寻，以找到丢失的钥匙。)</li><li>The team made an exhaustive effort to finish the project on time. (团队做出了全力以赴，以按时完成项目。)<br>词源：<br>来自拉丁语 exhaustus（过度使用、耗竭），由 ex-（向外）+ haurire（吸入、抽取）构成。</li></ol><h3 id="14-dimensional"><a href="#14-dimensional" class="headerlink" title="14. dimensional"></a>14. dimensional</h3><p>[英]· &#x2F;dɪˈmenʃənl&#x2F;<br>[形] 有尺寸的；空间的；维度的<br>例句：</p><ol><li>The sculpture is a three-dimensional representation of a human figure. (这座雕塑是一个人体形象的三维表现。)</li><li>This problem involves understanding the dimensional properties of shapes and objects. (这个问题涉及到理解形状和物体的尺寸特性。)</li><li>The new printer can produce two-dimensional or three-dimensional images with high precision. (新打印机可以高精度地制作二维或三维图像。)<br>词源：来自拉丁语 “dimensio”，意为“测量、尺寸”，由 “di-“（两个）和 “-mensio”（测量）组成。</li></ol><h3 id="15-canopy"><a href="#15-canopy" class="headerlink" title="15. canopy"></a>15. canopy</h3><p>[英]· &#x2F;ˈkænəpi&#x2F;  美· &#x2F;ˈkænəpi&#x2F;<br>[n.] 天篷；华盖；树冠层；床帐罩<br>[vt.] 覆盖，遮蔽<br>[例句]</p><ol><li>The trees formed a dense canopy overhead.<br>（树木在头顶上形成了茂密的树冠层。）</li><li>A canopy of stars twinkled above us.<br>（一片星空在我们头顶闪烁。）</li><li>The bride and groom stood under the floral canopy during the ceremony.<br>（新娘和新郎在仪式期间站在花环下面。）<br>词源：<br>来自拉丁语“conopeum”，意为“床帐”。</li></ol><h3 id="16-occlusion"><a href="#16-occlusion" class="headerlink" title="16. occlusion"></a>16. occlusion</h3><p>[英]· &#x2F;əˈkluːʒn&#x2F;<br>[n.] 1. 封闭；堵塞<br>     2. （医学）咬合；牙合<br>     3. 隐蔽状态；遮蔽状态<br>例句：</p><ol><li>The occlusion of the artery caused a heart attack.<br>（动脉的堵塞导致了心肌梗死。）</li><li>The dentist checked my occlusion to make sure my teeth were aligned properly.<br>（牙医检查了我的咬合情况，以确保我的牙齿排列正确。）</li><li>The clouds moved in, causing an occlusion of the sun and casting a shadow over the park.<br>（云层移动，使太阳被遮挡，并在公园上投下一片阴影。）<br>词源：来自拉丁语“occlusio”，意为“封闭”。</li></ol><h3 id="17-refinements"><a href="#17-refinements" class="headerlink" title="17. refinements"></a>17. refinements</h3><p>[英]· &#x2F;rɪˈfaɪnmənts&#x2F;<br>[n] 改进，完善，精炼<br>例句：</p><ol><li>The refinements to the design have made it more efficient. (对设计的改��使其更加高效。)</li><li>He suggested some refinements to the plan before presenting it to the board. (他在向董事会呈报计划之前提出了一些完善意见。)</li><li>The chef’s refinements to the recipe resulted in a truly delicious dish. (厨师对食谱的精炼使得这道菜真正美味可口。)<br>词源：<br>re-（再次）+ fine（好的）+ -ment（名词后缀），意为“再次变得好”</li></ol><h3 id="18-leverage"><a href="#18-leverage" class="headerlink" title="18. leverage"></a>18. leverage</h3><p>[英]· &#x2F;ˈliːv(ə)rɪdʒ&#x2F;<br>[n.] 杠杆作用；影响力；手段<br>[v.] 利用（某事物）产生影响或获得优势<br>例句：</p><ol><li>The company used its financial leverage to acquire the smaller competitor. (公司利用其财务杠杆收购了较小的竞争对手。)</li><li>She tried to use her connections as leverage to get a better job offer. (她试图利用自己的人脉关系来获取更好的工作机会。)</li><li>The government hopes that tax cuts will provide leverage for economic growth. (政府希望减税能为经济增长提供支持。)<br>词源：来自于法语 lever，意为“举起”。</li></ol><h3 id="19-pole"><a href="#19-pole" class="headerlink" title="19. pole"></a>19. pole</h3><p>[英]· &#x2F;pəʊl&#x2F;<br>[n.] 杆；柱子；电极</p><ol><li>He leaned against the pole and watched the parade go by. (他靠在杆上看着游行队伍经过。)</li><li>The tent was supported by a number of wooden poles. (帐篷由许多木杆支撑。)</li><li>The North Pole is located in the Arctic Ocean. (北极位于北冰洋中。)<br>词源：<br>Old English pāl, from Latin palus ‘stake’.</li></ol><h3 id="20-segmentation"><a href="#20-segmentation" class="headerlink" title="20. segmentation"></a>20. segmentation</h3><p>[英]· &#x2F;ˌseɡmənˈteɪʃ(ə)n&#x2F;  或  [美]· &#x2F;ˌsɛɡmənˈteʃən&#x2F;<br>[n.] 分割，划分；细分；区段化<br>例句：</p><ol><li>The segmentation of the market is based on age and income.<br>（市场的划分是基于年龄和收入的。）</li><li>Image segmentation is an important step in image processing.<br>（图像分割是图像处理中的重要步骤。）</li><li>The company’s strategy involves a segmentation of its customer base into different groups.<br>（该公司的策略涉及将其客户群体细分为不同的组别。）<br>词源：<br>来自拉丁语“segmentum”，意为“部分、片段”。</li></ol><h3 id="21-aperture"><a href="#21-aperture" class="headerlink" title="21. aperture"></a>21. aperture</h3><p>[英]· &#x2F;ˈæpətjʊə(r)&#x2F;; [美]· &#x2F;ˈæpɚtʃɚ&#x2F;<br>[n.] 孔径；光圈；开口；孔隙<br>例句：</p><ol><li>Adjusting the aperture can change the depth of field in a photograph. (调整光圈可以改变照片的景深。)</li><li>The camera’s aperture controls how much light enters the lens. (相机的光圈控制着进入镜头的光线量。)</li><li>The telescope has a large aperture, allowing for clear views of distant objects. (这个望远镜有一个大孔径，可以清晰地观察远处的物体。)<br>词源：<br>来自拉丁语“apertura”，意为“打开、开放”。</li></ol><h3 id="22-secular"><a href="#22-secular" class="headerlink" title="22. secular"></a>22. secular</h3><p>[英]· &#x2F;ˈsekjʊlə(r)&#x2F;<br>[形] 世俗的；非宗教的；长期的</p><ol><li>The government is supposed to be secular, not favoring any particular religion.<br>政府应该是世俗的，不偏袒任何特定宗教。</li><li>Many people believe that science and religion are separate and secular fields of study.<br>许多人认为科学和宗教是独立而且非宗教领域的研究。</li><li>He spent most of his life studying the history of art from a secular perspective.<br>他大部分时间都在从一个世俗角度研究艺术史。</li></ol><p>词源：<br>来自拉丁语“saecularis”，意思是“属于一代人或时代”的。</p><h3 id="23-blurry"><a href="#23-blurry" class="headerlink" title="23. blurry"></a>23. blurry</h3><p>[英]· &#x2F;ˈblʌri&#x2F;<br>[形容词] 模糊的，朦胧的</p><ol><li>The photo came out blurry because of the low light. (由于光线不足，照片变得模糊。)</li><li>I can’t read this, it’s too blurry. (我看不清这个，太模糊了。)</li><li>His vision was still a bit blurry after the surgery. (手术后他的视力仍有些模糊。)<br>词源：来自于 blur 的派生形式。</li></ol><h3 id="24-stiffness"><a href="#24-stiffness" class="headerlink" title="24. stiffness"></a>24. stiffness</h3><p>[英]· &#x2F;ˈstɪfnəs&#x2F;<br>[n.] 僵硬；刚性；顽固<br>例句：</p><ol><li>The stiffness in his joints made it difficult for him to move. (他关节的僵硬使得他难以移动。)</li><li>The stiffness of the material makes it suitable for use in construction. (这种材料的刚性使其适用于建筑领域。)</li><li>She was criticized for her stiffness and lack of flexibility in negotiations. (她因在谈判中过于顽固和缺乏灵活性而受到批评。)<br>词源：<br>来自 stīfian（变得僵硬）</li></ol><h3 id="25-respect-·-x2F-rɪˈspekt-x2F"><a href="#25-respect-·-x2F-rɪˈspekt-x2F" class="headerlink" title="25. respect · &#x2F;rɪˈspɛkt&#x2F;"></a>25. respect · &#x2F;rɪˈspɛkt&#x2F;</h3><p>在这个句子中，“respect to”是一个短语，意思是“关于；对于”。整个句子的意思可能是某人或某事物值得我们尊重或者需要我们考虑到。这里的“respect”不属于习语。</p><p>以下是三个与该词相同含义的例子：</p><ol><li><p>With respect to your question, I think the answer is yes.<br>（关于你的问题，我认为答案是肯定的。）</p></li><li><p>We need to show respect to our elders and those in authority.<br>（我们需要尊敬长辈和权威人士。）</p></li><li><p>In respect of your achievements, we would like to offer you this award.<br>（鉴于你所取得的成就，我们想授予你此奖项。）</p></li></ol><h3 id="26-synthetize"><a href="#26-synthetize" class="headerlink" title="26. synthetize"></a>26. synthetize</h3><p>[英]· &#x2F;ˈsɪnθətaɪz&#x2F;<br>[v] 合成，综合<br>例句：</p><ol><li>They were able to synthetize a new compound in the lab. (他们能够在实验室中合成一种新化合物。)</li><li>The company aims to synthetize customer feedback and market trends to improve their products. (该公司旨在将客户反馈和市场趋势综合起来，以改进其产品。)</li><li>Scientists are working on ways to synthetize renewable energy sources like solar and wind power. (科学家正在研究如何综合利用可再生能源，如太阳能和风力发电。)<br>词源：<br>来自希腊语“synthetos”，意为“组装的”。</li></ol><h3 id="27-advocate"><a href="#27-advocate" class="headerlink" title="27. advocate"></a>27. advocate</h3><p>[英]· &#x2F;ˈædvəkət&#x2F;<br>[n.] 拥护者；提倡者；律师（尤指辩护律师）<br>[v.] 支持；拥护；提倡<br>例句：</p><ol><li>She is a strong advocate for animal rights. (她是动物权利的坚定支持者。)</li><li>The organization advocates for better working conditions for all employees. (该组织为所有员工争取更好的工作条件。)</li><li>He was appointed as the defendant’s advocate in the trial. (他被任命为被告人在审判中的辩护律师。)<br>词源：来自拉丁语“advocatus”，意为“代表、辩护人”。</li></ol><h3 id="28-formulate"><a href="#28-formulate" class="headerlink" title="28. formulate"></a>28. formulate</h3><p>&#x2F;ˈfɔːmjʊleɪt&#x2F;<br>在这个句子中，“formulate”是一个动词，意思是“制定（计划、想法等）”。整个句子的意思是“制定先验假设”，其中“prior hypothesis”指的是在进行实验或研究之前就已经提出来的假设。</p><p>这个单词没有被用作习语。以下是三到五个具有相同含义的例子：</p><ol><li>The team needs to formulate a strategy before starting the project.<br>这个团队需要在开始项目之前制定一项策略。</li><li>It’s important to formulate a clear plan for achieving your goals.<br>制定一个清晰的计划以实现你的目标非常重要。</li><li>The committee will meet tomorrow to formulate a proposal for the new policy.<br>委员会将于明天开会，为新政策拟定一份建议书。</li></ol><h3 id="29-hypothesis"><a href="#29-hypothesis" class="headerlink" title="29. hypothesis"></a>29. hypothesis</h3><p>[英]· &#x2F;haɪˈpɒθəsɪs&#x2F;<br>[n.] 假设，假说；前提条件<br>例句：</p><ol><li>The hypothesis has yet to be proven. (这个假设还没有被证明。)</li><li>We need to test this hypothesis before drawing any conclusions. (在得出任何结论之前，我们需要测试这个假设。)</li><li>Her hypothesis was based on years of research in the field. (她的假说基于多年的领域研究。)</li></ol><p>词源：来自希腊语“hypothetikos”，意为“基于假定的”。</p><h3 id="30-percentile"><a href="#30-percentile" class="headerlink" title="30. percentile"></a>30. percentile</h3><p>[英]· &#x2F;pəˈsɛntaɪl&#x2F;<br>[n.] 百分位数；百分等级<br>例句：</p><ol><li>He scored in the 90th percentile on his math test. (他在数学考试中得了90%的高分)</li><li>The baby’s weight is in the 25th percentile for her age group. (这个宝宝的体重处于同龄群体中的25%)</li><li>This school has a high percentage of students who score in the top percentile on standardized tests. (这所学校有很多学生在标准化测试中得到了最高百分位数)</li></ol><p>词源：来自拉丁语“per centum”，意为“每一百”</p><h3 id="31-truncate"><a href="#31-truncate" class="headerlink" title="31. truncate"></a>31. truncate</h3><p>[英]· &#x2F;ˈtrʌŋkeɪt&#x2F;   [美]· &#x2F;ˈtrʌŋkeɪt&#x2F;<br>[v.] 截短，缩短；截断，删节<br>例句：</p><ol><li>The long list was truncated to fit on one page. (长列表被截短以适应一页。)</li><li>The movie had to be truncated due to time constraints. (由于时间限制，电影不得不被删减。)</li><li>He truncated his speech in order to finish on time. (他缩短了演讲时间以便按时结束。)<br>词源：<br>来自拉丁语“truncatus”，意为“截去一部分”。</li></ol><h3 id="32-causation"><a href="#32-causation" class="headerlink" title="32. causation"></a>32. causation</h3><p>[英]· &#x2F;kɔːˈzeɪʃn&#x2F; 或 &#x2F;kɒzˈeɪʃ(ə)n&#x2F;<br>[n.] 原因，因果关系<br>例句：</p><ol><li>The study aims to investigate the causation of cancer.<br>（这项研究旨在调查癌症的原因。）</li><li>There is a strong causation between smoking and lung disease.<br>（吸烟和肺部疾病之间存在强大的因果关系。）</li><li>The court must establish the causation between the defendant’s actions and the plaintiff’s injuries.<br>（法庭必须确定被告行为与原告伤害之间的因果关系。）<br>词源：<br>来自拉丁语“causatio”，意为“引起、产生”。</li></ol><h3 id="33-confound"><a href="#33-confound" class="headerlink" title="33. confound"></a>33. confound</h3><p>[英]· &#x2F;kənˈfaʊnd&#x2F;<br>[v] 1. 使困惑；使混淆；2. 挫败，击败<br>例句：</p><ol><li>The unexpected results confounded the researchers.<br>（意外的结果让研究人员感到困惑。）</li><li>His clever tactics confounded his opponents.<br>（他巧妙的策略打败了对手。）</li><li>The noise from the construction site confounded my attempts to concentrate on work.<br>（建筑工地传来的噪音干扰了我专注于工作的尝试。）<br>词源：来自中古英语“confounden”，意为“毁坏、摧毁”。</li></ol><h3 id="34-deviation"><a href="#34-deviation" class="headerlink" title="34. deviation"></a>34. deviation</h3><p>[英]· &#x2F;ˌdiːviˈeɪʃən&#x2F;<br>[n.] 偏差；背离；脱轨<br>[例句]</p><ol><li>The deviation from the original plan caused a delay in the project. (偏离原计划导致项目延误。)</li><li>His behavior is a deviation from the norm. (他的行为是与常规不符的。)</li><li>The train experienced a slight deviation on its journey, but arrived at its destination safely. (火车在旅途中出现了轻微的偏差，但安全到达了目的地。)<br>词源：<br>来自拉丁语“deviatio”，意为“偏离、转移”。</li></ol><h3 id="35-histogram"><a href="#35-histogram" class="headerlink" title="35. histogram"></a>35. histogram</h3><p>[英]· &#x2F;ˈhɪstəgræm&#x2F;<br>[n.] 直方图；分布图<br>例句：</p><ol><li>The histogram shows the distribution of data.<br>（直方图显示了数据的分布。）</li><li>We can use a histogram to visualize the frequency of different values in a dataset.<br>（我们可以使用直方图来可视化数据集中不同值的频率。）</li><li>The teacher used a histogram to help students understand the distribution of test scores.<br>（老师用直方图帮助学生理解考试成绩的分布情况。）<br>词源：<br>由 histo- （表示“有关历史”）和 -gram （表示“写、画”）组成，意为“历史记录”。最初是指在统计学中用于描述数据分布情况的一种方法，后来扩展到其他领域。</li></ol><h3 id="36-preliminary"><a href="#36-preliminary" class="headerlink" title="36. preliminary"></a>36. preliminary</h3><p>[英]· &#x2F;prɪˈlɪmən(ə)ri&#x2F;<br>[形] 初步的；预备性的；开端的</p><ol><li>Preliminary results suggest that the treatment is effective. (初步结果表明这种治疗是有效的。)</li><li>The team conducted a preliminary investigation into the accident. (团队对事故进行了初步调查。)</li><li>We need to do some preliminary work before we can start the project. (在开始项目之前，我们需要做一些准备工作。)<br>词源：来自拉丁语“praeliminarius”，意为“先行的”。</li></ol><h3 id="37-squid"><a href="#37-squid" class="headerlink" title="37. squid"></a>37. squid</h3><p>[英]· &#x2F;skwɪd&#x2F;<br>[n.] 鱿鱼；墨鱼<br>例句：</p><ol><li>I had grilled squid for dinner last night. (昨晚我吃了烤鱿鱼。)</li><li>The giant squid is one of the largest creatures in the ocean. (巨型鱿鱼是海洋中最大的生物之一。)</li><li>Squids are known for their ability to change color rapidly to blend in with their surroundings. (鱿鱼以其快速改变颜色来融入周围环境的能力而闻名。)<br>词源：来自希腊语 “συκοειδής”，意为“像无花果一样的”。</li></ol><h3 id="38-sauna"><a href="#38-sauna" class="headerlink" title="38. sauna"></a>38. sauna</h3><p>[英]· &#x2F;ˈsɔːnə&#x2F;  [美]· &#x2F;ˈsɑːnə&#x2F;<br>[n.] 桑拿浴室；桑拿房<br>例句：</p><ol><li>I like to relax in the sauna after a workout. (我喜欢在锻炼后在桑拿浴室里放松。)</li><li>The hotel has a sauna and a steam room for guests to use. (酒店有一个供客人使用的桑拿房和蒸汽房。)</li><li>Many people believe that regular sauna sessions have health benefits. (许多人认为经常进行桑拿浴可以带来健康益处。)<br>词源：<br>来自芬兰语 saunna，意思是“热水浴”。</li></ol><h3 id="39-sepal"><a href="#39-sepal" class="headerlink" title="39. sepal"></a>39. sepal</h3><p>[英]· &#x2F;ˈsɛp(ə)l&#x2F;<br>[n.] [植] 萼片；花萼片<br>例句：</p><ol><li>The sepal protects the developing flower bud.<br>（萼片保护着发育中的花蕾。）</li><li>Sepals are usually green, but can be colored like petals in some flowers.<br>（萼片通常是绿色的，但在一些花朵中可以像花瓣一样有颜色。）</li><li>The number and arrangement of sepals is an important characteristic used to identify plant species.<br>（萼片的数量和排列方式是用于识别植物物种的重要特征。）<br>词源：<br>来自拉丁语sepalum，意为“小盖子”。</li></ol><h3 id="40-quartile"><a href="#40-quartile" class="headerlink" title="40. quartile"></a>40. quartile</h3><p>[英]· &#x2F;ˈkwɔːtaɪl&#x2F;   [美]· &#x2F;ˈkwɔrtaɪl&#x2F;<br>[n.] 四分位数（统计学中的概念，将数据集合分成四个等份）<br>例句：</p><ol><li>The median is the second quartile.<br>（中位数是第二个四分位数。）</li><li>The first quartile represents the 25th percentile of a data set.<br>（第一四分位数代表数据集的25%百分点。）</li><li>Quartiles are often used in box plots to show the spread and skewness of data.<br>（四分位数常用于箱线图中以显示数据的离散程度和偏斜程度。）<br>词源：<br>来自拉丁语“quartus”，意为“第四”。</li></ol><h3 id="41-dose"><a href="#41-dose" class="headerlink" title="41. dose"></a>41. dose</h3><p>[英]· &#x2F;dəʊs&#x2F;<br>[n] 剂量；一剂<br>[v] 给…服药；（尤指）给…定量的食物或饮料<br>例句：</p><ol><li>The recommended dose for adults is two tablets per day. (成人建议每天服用两片。)</li><li>She accidentally took a double dose of the medication. (她不小心吃了药品的双倍剂量。)</li><li>The chef carefully dosed each ingredient to create the perfect flavor balance in the dish. (厨师仔细地加入每种配料，以在菜肴中创造完美的味道平衡。)<br>词源：<br>来自中世纪拉丁语“dosare”，意为“分配、测量”。</li></ol><h3 id="42-immense"><a href="#42-immense" class="headerlink" title="42. immense"></a>42. immense</h3><p>[英]· &#x2F;ɪˈmens&#x2F;  美· &#x2F;ɪˈmɛns&#x2F;<br>[形容词] 巨大的；广阔的；无限的<br>例句：</p><ol><li>The universe is immense.<br>（宇宙是无限广阔的。）</li><li>He has an immense amount of wealth.<br>（他拥有巨额财富。）</li><li>The task ahead of us is immense, but we can do it if we work together.<br>（我们面临着巨大的任务，但如果我们齐心协力，就能完成它。）<br>词源：<br>来自拉丁语 “immensus”，意为“未被测量过的、不可估计的”。</li></ol><h3 id="43-peculiar"><a href="#43-peculiar" class="headerlink" title="43. peculiar"></a>43. peculiar</h3><p>[英]· &#x2F;pɪˈkjuːliə(r)&#x2F;; [美]· &#x2F;pɪˈkjuljər&#x2F;<br>[形容词] 独特的；奇怪的；罕见的<br>[名词] 特殊性质，特色<br>例句：</p><ol><li>She has a peculiar way of speaking. (她说话有一种独特的方式。)</li><li>That’s a rather peculiar smell. (那是一种相当奇怪的气味。)</li><li>He had some very peculiar ideas about politics and society. (他对政治和社会有些非常奇怪的想法。)<br>词源：来自拉丁语 peculium（私人财产）</li></ol><h3 id="44-diagonally"><a href="#44-diagonally" class="headerlink" title="44. diagonally"></a>44. diagonally</h3><p>[英]· &#x2F;daɪˈæɡənəli&#x2F;<br>[副词] 斜地，对角线地<br>例句：</p><ol><li>The car parked diagonally across two spaces. (这辆车斜着停在两个车位上。)</li><li>She cut the cake diagonally to make larger slices. (她把蛋糕切成对角线形状以便切出更大的片。)</li><li>He ran diagonally across the field to catch the ball. (他沿着对角线跑过球场去接球。)<br>词源：<br>来自拉丁语 “diagonalis”，意为“从一个角到另一个角的”。</li></ol><h3 id="45-manifold"><a href="#45-manifold" class="headerlink" title="45. manifold"></a>45. manifold</h3><p>[英]· &#x2F;ˈmænɪfəʊld&#x2F;  美· &#x2F;ˈmænəfoʊld&#x2F;<br>[n.] 多种多样的；复杂的；多功能的装置；曲面<br>[adj.] 多种多样的；繁多的</p><p>例句：</p><ol><li>The benefits of exercise are manifold.<br>（锻炼带来的好处是多方面的。）</li><li>This problem is more manifold than we thought.<br>（这个问题比我们想象中更加复杂。）</li><li>The car has a manifold exhaust system.<br>（这辆车有一个复杂而实用的排气系统。）</li></ol><p>词源：来自古英语“manigfeald”，由“mani”（许多）和“-feald”（倍数）组成，意为“许多倍数”。</p><h3 id="46-mesh"><a href="#46-mesh" class="headerlink" title="46. mesh"></a>46. mesh</h3><p>[英]· &#x2F;mɛʃ&#x2F;<br>[n.] 网状物，网眼布；齿轮的啮合<br>[v.] 使相互纠缠，使相互嵌入</p><p>例句：</p><ol><li>The mesh of the net was too small to catch any fish. (这个渔网的网眼太小了，无法捕到任何鱼。)</li><li>The gears meshed perfectly, allowing the machine to run smoothly. (这些齿轮完美地啮合在一起，让机器顺畅运转。)</li><li>The two companies’ interests are so closely meshed that it’s hard to tell where one ends and the other begins. (这两家公司的利益紧密交织在一起，很难分清哪一个结束、哪一个开始。)</li></ol><p>词源：来自中古英语“mesche”，意为“编织而成的东西”。</p><h3 id="47-perplexity"><a href="#47-perplexity" class="headerlink" title="47. perplexity"></a>47. perplexity</h3><p>[英]· &#x2F;pəˈpleksəti&#x2F; 或 &#x2F;pərˈpleksəti&#x2F;<br>[n.] 困惑，迷惑；复杂性<br>[adj.] 令人困惑的，难以理解的</p><ol><li>The perplexity on his face showed that he didn’t understand the instructions. (他脸上的困惑表明他不理解说明。)</li><li>I was filled with perplexity when I saw the complicated math problem. (当我看到那个复杂的数学问题时，我感到非常困惑。)</li><li>The professor’s lecture was full of technical terms, leaving many students in a state of perplexity. (教授的讲座充满了技术术语，使得很多学生陷入了困境。)</li></ol><p>词源：来自拉丁语 perplexitas（混乱）</p><h3 id="48-explode"><a href="#48-explode" class="headerlink" title="48. explode"></a>48. explode</h3><p>[英]· &#x2F;ɪkˈspləʊd&#x2F; ; [美]· &#x2F;ɪkˈsploʊd&#x2F;<br>[v.] 爆炸；爆发；激增<br>例句：</p><ol><li>The bomb exploded and destroyed the building. (炸弹爆炸并摧毁了建筑物。)</li><li>When the news broke, social media exploded with comments and reactions. (当这个消息传出去时，社交媒体上涌现出各种评论和反应。)</li><li>The population of the city has exploded in recent years due to immigration. (由于移民，这座城市的人口在最近几年里激增了。)<br>词源：<br>来自拉丁语 “explodere”，意为“驱逐”，由 “ex-“（向外）+ “plaudere”（鼓掌）组成。最初用于描述戏剧中的突然响声效果，后来扩展到其他领域表示突然、剧烈的行动或事件。</li></ol><h3 id="49-orthogonal"><a href="#49-orthogonal" class="headerlink" title="49. orthogonal"></a>49. orthogonal</h3><p>[英]· &#x2F;ɔːˈθɒɡən(ə)l&#x2F; 或 &#x2F;ɔːˈθɒɡ(ə)n(ə)l&#x2F;<br>[形容词] 正交的；垂直的；互不相关的<br>例句：</p><ol><li>The two vectors are orthogonal to each other.<br>（这两个向量是正交的。）</li><li>In an orthogonal coordinate system, the axes are perpendicular to each other.<br>（在一个正交坐标系中，轴相互垂直。）</li><li>Orthogonal concepts can be difficult to understand at first.<br>（正交概念一开始可能很难理解。）<br>词源：来自希腊语“ortho-”表示“正确、直立”，加上“-gonal”表示“角度”。</li></ol><h3 id="50-whipped-cream"><a href="#50-whipped-cream" class="headerlink" title="50. whipped cream"></a>50. whipped cream</h3><p>打发奶油<br>whipped<br>[英]· &#x2F;wɪpt&#x2F;<br>[形容词] 打发过的；被鞭打的；（奶油）打发了的</p><ol><li>The whipped cream on top of the pie looked delicious. (馅饼上面的打发奶油看起来很美味。)</li><li>He was whipped by his cruel master for trying to escape. (他因试图逃跑而被残忍主人鞭打。)</li><li>She ordered a latte with extra whipped cream and caramel drizzle. (她点了一杯加多些打发奶油和焦糖淋酱的拿铁咖啡。)<br>词源：动词 whip 的过去分词形式</li></ol><h3 id="51-contestually"><a href="#51-contestually" class="headerlink" title="51. contestually"></a>51. contestually</h3><p>[英]· &#x2F;kənˈtɛkstʃuəli&#x2F;<br>[副词] 上下文地；在上下文中<br>例句：</p><ol><li>The meaning of this word can only be understood contestually. (只有在上下文中才能理解这个单词的意思。)</li><li>It is important to consider the information contestually before making a decision. (做决定前要考虑信息的上下文。)</li><li>The joke was not funny when taken out of context, but it made sense contestually. (把这个笑话从背景中拿出来就不好笑了，但是放到上下文里就有意义了。)</li></ol><p>词源：无</p><h3 id="52-intractable"><a href="#52-intractable" class="headerlink" title="52. intractable"></a>52. intractable</h3><p>[英]· &#x2F;ɪnˈtræktəbl&#x2F;  美· &#x2F;ɪnˈtræktəbl&#x2F;<br>[形] 难以处理的；倔强的；棘手的<br>例句：</p><ol><li>The problem proved to be intractable.<br>这个问题被证明是难以解决的。</li><li>He was an intractable child who refused to obey any rules.<br>他是一个不听话、拒绝遵守任何规则的顽固孩子。</li><li>The negotiations between the two countries have been intractable for years.<br>两国之间多年来一直在进行着艰难的谈判。<br>词源：<br>来自拉丁语 “intractabilis”，由 “in-“（否定前缀）和 “tractare”（处理）组成。</li></ol><h3 id="53-negligible"><a href="#53-negligible" class="headerlink" title="53. negligible"></a>53. negligible</h3><p>[英]· &#x2F;ˈneɡlɪdʒəbl&#x2F;  美· &#x2F;ˈnɛɡlədʒəb(ə)l&#x2F;<br>[形容词] 可忽略不计的，微不足道的<br>例句：</p><ol><li>The difference in price is negligible. (价格差异微不足道。)</li><li>The impact of the new policy on the economy is negligible. (新政策对经济的影响微乎其微。)</li><li>The amount of dust produced by this machine is negligible. (这台机器产生的灰尘量可以忽略不计。)<br>词源：<br>来自拉丁语“negligere”，意为“忽视”。</li></ol><h3 id="54-emulate"><a href="#54-emulate" class="headerlink" title="54. emulate"></a>54. emulate</h3><p>[英]· &#x2F;ˈɛmjʊleɪt&#x2F;  美· &#x2F;ˈɛmjəˌlet&#x2F;<br>[v] 模仿，效仿；竞争并超越<br>例句：</p><ol><li>He hoped to emulate the success of his predecessor. (他希望能够效仿他的前任成功。)</li><li>The young athlete aspired to emulate her Olympic heroes. (这位年轻的运动员渴望能够模仿她的奥林匹克偶像。)</li><li>Many artists try to emulate the style of famous painters from the past. (许多艺术家试图模仿过去著名画家的风格。)<br>词源：<br>来自拉丁语 “aemulatus”，意为“竞争”。</li></ol><h3 id="55-emit"><a href="#55-emit" class="headerlink" title="55. emit"></a>55. emit</h3><p>[英]· &#x2F;ɪˈmɪt&#x2F;<br>[v] 发出，放射；发行，发布<br>例句：</p><ol><li>The chimney emitted thick smoke. (烟囱冒出了浓烟。)</li><li>The radio station emits a strong signal. (这个广播电台发射强信号。)</li><li>The factory was found to be emitting toxic waste into the river. (工厂被发现向河里排放有毒废料。)<br>词源：<br>来自拉丁语“emittere”，意为“发送、投掷”。</li></ol><h3 id="56-guardrail"><a href="#56-guardrail" class="headerlink" title="56. guardrail"></a>56. guardrail</h3><p>[英]· &#x2F;ˈɡɑːd.reɪl&#x2F; 或 &#x2F;ˈɡɑrd.reɪl&#x2F;<br>[n.] 护栏，护栏杆<br>例句：</p><ol><li>The car crashed into the guardrail on the side of the road.<br>（汽车撞上了路边的护栏。）</li><li>The construction workers installed a new guardrail along the bridge.<br>（建筑工人在桥上安装了一道新的护栏。）</li><li>Please hold onto the guardrail while walking down the stairs.<br>（下楼时请扶着护栏走。）<br>词源：<br>由guard和rail组成，意为“守卫用的围墙”。</li></ol><h3 id="57-cruise"><a href="#57-cruise" class="headerlink" title="57. cruise"></a>57. cruise</h3><p>[英]· &#x2F;kruːz&#x2F;<br>[n] 巡航；巡游；乘船旅行<br>[v] 巡航；缓慢地巡行；开车兜风<br>例句：</p><ol><li>We went on a cruise to the Caribbean last year. (去年我们去了加勒比海的一次邮轮旅行。)</li><li>The car was cruising along the highway at 70 miles per hour. (汽车以每小时70英里的速度在高速公路上巡航。)</li><li>They decided to take a leisurely cruise down the river in their boat. (他们决定驾着小艇沿河悠闲地漫游。)<br>词源：<br>来自荷兰语 kruisen，意为“交叉、穿过”，最初指战争中的袭击和掠夺活动，后来引申为“往返于两个或多个港口之间”的商业运输活动。</li></ol><h3 id="58-pulse"><a href="#58-pulse" class="headerlink" title="58. pulse"></a>58. pulse</h3><p>[英]· &#x2F;pʌls&#x2F;<br>[n.] 脉搏；脉冲；节拍<br>[vi.] 搏动；跳动</p><p>例句：</p><ol><li>I can feel my pulse racing after running.<br>（我可以感觉到自己在跑步后心跳加速。）</li><li>The machine emits a regular pulse of light.<br>（这台机器发出规律的光脉冲。）</li><li>She took his pulse and found it was normal.<br>（她给他量了一下脉，发现正常。）</li></ol><p>词源：<br>来自拉丁语“pulsus”，意为“敲打、击打”。</p><h3 id="59-illuminate"><a href="#59-illuminate" class="headerlink" title="59. illuminate"></a>59. illuminate</h3><p>[英]· &#x2F;ɪˈluːmɪneɪt&#x2F; ; [美]· &#x2F;ɪˈluməneɪt&#x2F;<br>[v]· 照亮，照明；阐明，解释<br>例句：</p><ol><li>The streetlights illuminate the road at night. (路灯在夜间照亮了道路。)</li><li>His research illuminates some previously unknown aspects of the subject. (他的研究揭示了该主题中一些以前未知的方面。)</li><li>She used her flashlight to illuminate the dark room. (她用手电筒照亮了黑暗的房间。)<br>词源：<br>来自拉丁语“illuminatus”，意为“点亮、启迪”。</li></ol><h3 id="60-compact"><a href="#60-compact" class="headerlink" title="60. compact"></a>60. compact</h3><p>[英]· &#x2F;ˈkɒmpækt&#x2F;  美· &#x2F;kəmˈpækt&#x2F;<br>[形容词] 紧凑的；紧密的；简洁的；（机器）小巧而功能齐全的<br>[动词] 压缩，使变得更紧密；达成协议或条约<br>[名词] 合同，协议书</p><p>例句：</p><ol><li>The apartment is small but very compact.<br>（这套公寓很小但非常紧凑。）</li><li>This camera is so compact that you can easily carry it in your pocket.<br>（这款相机如此小巧，你可以轻松地放在口袋里。）</li><li>They reached a compact to share the profits equally.<br>（他们达成了一个平分利润的协议。）</li></ol><p>词源：来自拉丁语“compactum”，意为“合同、条约”。</p><h3 id="61-dilute"><a href="#61-dilute" class="headerlink" title="61. dilute"></a>61. dilute</h3><p>[英]· &#x2F;daɪˈluːt&#x2F;<br>[v.] 稀释；冲淡；削弱<br>例句：</p><ol><li>Dilute the juice with water before drinking it. (在饮用前用水稀释果汁。)</li><li>The company diluted its shares to raise more capital. (公司发行更多股票以筹集资本。)</li><li>She dilutes her criticism with humor. (她用幽默来缓和批评的语气。)<br>词源：<br>源自拉丁语”dilutus”，意为“稀薄的”。</li></ol><h3 id="62-orientation"><a href="#62-orientation" class="headerlink" title="62. orientation"></a>62. orientation</h3><p>[英]· &#x2F;ˌɔːriənˈteɪʃən&#x2F;   [美]· &#x2F;ˌɔːriənˈteɪʃən&#x2F;<br>[n.] 方向；定位；取向；适应环境的能力<br>[vt.] 使确定方向或位置</p><p>例句：</p><ol><li>The orientation of the map is north-south.<br>（地图的方向是南北。）</li><li>New employees will receive an orientation on their first day of work.<br>（新员工将在第一天上班时接受培训。）</li><li>It takes time to adjust to a new culture and develop cultural orientation.<br>（适应新文化并发展文化定位需要时间。）</li></ol><p>词源：来自拉丁语“orientare”，意为“朝东”。</p><h3 id="63-jitter"><a href="#63-jitter" class="headerlink" title="63. jitter"></a>63. jitter</h3><p>[英]· &#x2F;ˈdʒɪtə(r)&#x2F;<br>[n.] 紧张不安；抖动；毛刺声<br>[v.] 使紧张不安；使抖动</p><p>例句：</p><ol><li>The thought of giving a speech made her jitter.<br>（想到要演讲，她感到很紧张。）</li><li>The camera’s image was affected by the jitter caused by the shaking hands.<br>（相机的图像受到手颤引起的抖动影响。）</li><li>I could hear the jitter in his voice as he spoke about his fear of heights.<br>（当他谈论自己对高处恐惧时，我能听出他声音中的紧张情绪。）</li></ol><p>词源：可能来自于“jit”这个单词在美国黑人俚语中表示“神经质”。</p><h3 id="64-fusion"><a href="#64-fusion" class="headerlink" title="64. fusion"></a>64. fusion</h3><p>[英]· &#x2F;ˈfjuːʒən&#x2F;  美· &#x2F;ˈfjuʒən&#x2F;<br>[n.] 融合；结合；核聚变<br>[adj.] 融合的；熔化的<br>[例句]</p><ol><li>The fusion of different cultures can lead to new and exciting ideas. (不同文化的融合可以带来新奇有趣的想法。)</li><li>The metal was heated until it reached its fusion point. (这种金属被加热到达到了它的熔点。)</li><li>Nuclear fusion is a potential source of clean energy for the future. (核聚变是未来潜在的清洁能源来源。)<br>词源：<br>from Latin “fusio” meaning “a pouring out”, from “fundere” meaning “to pour”.</li></ol><h3 id="65-inclined"><a href="#65-inclined" class="headerlink" title="65. inclined"></a>65. inclined</h3><p>[英]· &#x2F;ɪnˈklaɪnd&#x2F;<br>[形] 倾向于；有意于；斜的<br>例句：</p><ol><li>She is inclined to be lazy. (她有点懒惰。)</li><li>He is inclined to agree with you. (他倾向于同意你的观点。)</li><li>The roof was inclined at a steep angle. (屋顶呈陡峭的斜角度。)<br>词源：<br>来自拉丁语“inclinare”，意为“弯曲，倾斜”。</li></ol><h3 id="66-collimated-·-x2F-ˈkɑːləmeɪtɪd-x2F"><a href="#66-collimated-·-x2F-ˈkɑːləmeɪtɪd-x2F" class="headerlink" title="66. collimated · &#x2F;ˈkɑːləmeɪtɪd&#x2F;"></a>66. collimated · &#x2F;ˈkɑːləmeɪtɪd&#x2F;</h3><p>在这个句子中，”collimated” 是一个形容词，意思是指光线经过透镜或反射器后变得平行的。整个句子的意思是指“聚焦光”。这个单词不是习语。</p><p>以下是三到五个具有相同含义的例子：</p><ol><li><p>parallel light</p></li><li><p>focused beam</p></li><li><p>directed rays</p></li><li><p>平行光</p></li><li><p>聚焦束</p></li><li><p>定向射线</p></li></ol><h3 id="67-scattered-·-x2F-ˈskaetərd-x2F"><a href="#67-scattered-·-x2F-ˈskaetərd-x2F" class="headerlink" title="67. scattered · &#x2F;ˈskætərd&#x2F;"></a>67. scattered · &#x2F;ˈskætərd&#x2F;</h3><p>在这个句子中，“scattered”是一个形容词，意思是“分散的”，用来描述“light”的状态。整个句子的意思是光线被分散了。</p><p>这个单词没有出现在习语中。</p><p>以下是三到五个具有相同含义的例子：</p><ol><li>The scattered leaves covered the ground.<br>（落叶遍布地面。）</li><li>She had a scattered approach to her work, which made it difficult for her to finish anything on time.<br>（她对工作采取零散的方式，这使得她很难按时完成任何事情。）</li><li>The scattered clouds in the sky created a beautiful sunset.<br>（天空中零星的云朵创造了美丽的日落景象。）</li></ol><h3 id="68-propagation"><a href="#68-propagation" class="headerlink" title="68. propagation"></a>68. propagation</h3><p>[英]· &#x2F;ˌprɒpəˈɡeɪʃ(ə)n&#x2F;   [美]· &#x2F;ˌprɑːpəˈɡeɪʃ(ə)n&#x2F;<br>[n.] 传播，扩散<br>例句：</p><ol><li>The propagation of sound waves through water is different from that through air. (声波在水中的传播方式与空气中不同。)</li><li>Social media has greatly facilitated the propagation of information in modern society. (社交媒体极大地促进了信息在现代社会的传播。)</li><li>The rapid propagation of the virus has caused widespread panic among the public. (病毒的快速传播引起了公众的广泛恐慌。)<br>词源：<br>from Latin propagatio, from propagare ‘to propagate’</li></ol><h3 id="69-pseudo"><a href="#69-pseudo" class="headerlink" title="69. pseudo"></a>69. pseudo</h3><p>[英]· &#x2F;ˈsuːdəʊ&#x2F;  或  [美]· &#x2F;ˈsuːdoʊ&#x2F;<br>[n.] 假的；伪造的；冒充的<br>[adv.] 假装地；虚假地</p><p>例句：</p><ol><li>He was living a pseudo life, pretending to be someone he wasn’t. (他过着一种虚假的生活，假装成了别人。)</li><li>The company’s website had a lot of pseudo reviews that were actually written by their own employees. (公司网站上有很多伪造评论，实际上是由他们自己的员工写的。)</li><li>She wore a pseudo fur coat that looked like real fur but was actually made from synthetic materials. (她穿了一件看起来像真皮毛但实际上是用合成材料制成的伪皮毛外套。)</li></ol><p>词源：来自希腊语 “pseudes”，意为 “谎言、欺骗”。</p><h3 id="70-bounce"><a href="#70-bounce" class="headerlink" title="70. bounce"></a>70. bounce</h3><p>[英]· &#x2F;baʊns&#x2F;<br>[v.] 弹跳；反弹；使（球等）弹起<br>[n.] 反弹，弹回；活力，精力<br>例句：</p><ol><li>The ball bounced off the wall and hit him in the face. (球从墙上反弹并打在他脸上。)</li><li>She bounced up and down with excitement. (她兴奋地上下跳动。)</li><li>He wrote a check for $500, but it bounced because he didn’t have enough money in his account. (他开了一张价值500美元的支票，但由于账户里没有足够的钱而被退回。)</li></ol><p>词源：来自中古英语“bounsen”，意为“撞击、碰撞”。</p><h3 id="71-compensate"><a href="#71-compensate" class="headerlink" title="71. compensate"></a>71. compensate</h3><p>[英]· &#x2F;ˈkɒmpənseɪt&#x2F;  美· &#x2F;ˈkɑːmpənseɪt&#x2F;<br>[v] 赔偿；补偿；抵消<br>例句：</p><ol><li>The company will compensate you for any damage caused during the delivery process. (公司将为您在交付过程中造成的任何损失进行赔偿。)</li><li>He was compensated with a bonus for his hard work. (他因辛勤工作而得到了奖金的补偿。)</li><li>The increase in salary is intended to compensate employees for their increased workload. (薪资增加旨在为员工承担更多的工作量提供补偿。)<br>词源：<br>来自拉丁语“compensare”，意思是“权衡，弥合”。</li></ol><h3 id="72-particle"><a href="#72-particle" class="headerlink" title="72. particle"></a>72. particle</h3><p>&#x2F;ˈpɑːrtɪkl&#x2F;<br>在这个句子中，”particle” 指的是微小的物质单位。整个句子 “charge particle” 的意思是带电粒子。</p><p>这个词不是习语。</p><p>以下是三到五个具有相同含义的例子：</p><ol><li><p>An atom is made up of protons, neutrons, and electrons - all particles.<br>（原子由质子、中子和电子组成-都是粒子。）</p></li><li><p>The air we breathe contains tiny particles of dust and pollen.<br>（我们呼吸的空气中含有微小的尘埃和花粉颗粒。）</p></li><li><p>Scientists have discovered a new subatomic particle that could help explain the nature of dark matter.<br>（科学家们发现了一种新型亚原子粒子，可以帮助解释暗物质的本质。）</p></li></ol><h3 id="73-constellation"><a href="#73-constellation" class="headerlink" title="73. constellation"></a>73. constellation</h3><p>[英]· &#x2F;ˌkɒnstəˈleɪʃ(ə)n&#x2F;<br>[n.] 星座；星群<br>例句：</p><ol><li>Orion is a well-known constellation in the winter sky. (猎户座是冬季天空中著名的星座。)</li><li>The Big Dipper is part of the Ursa Major constellation. (北斗七星是大熊座的一部分。)</li><li>According to Greek mythology, Cassiopeia was turned into a constellation as punishment for her vanity. (根据希腊神话，卡西奥佩娅因为虚荣被变成了一个星座作为惩罚。)<br>词源：<br>来自拉丁语“constellatio”，意思是“一组恒星”。</li></ol><h3 id="74-proposeptive"><a href="#74-proposeptive" class="headerlink" title="74. proposeptive"></a>74. proposeptive</h3><p>[英]· &#x2F;prəˈpɒzɪptɪv&#x2F;<br>[形] 建议的，提议性的<br>例句：</p><ol><li>The committee made a proposeptive plan for the project. (委员会制定了一个项目建议计划。)</li><li>His speech was full of proposeptive ideas for improving the company’s performance. (他的演讲充满了改善公司业绩的提议性想法。)</li><li>We need to come up with some more concrete and proposeptive solutions to this problem. (我们需要想出更具体和有建设性的解决方案来解决这个问题。)<br>词源：无</li></ol><h3 id="75-exteroceptive"><a href="#75-exteroceptive" class="headerlink" title="75. exteroceptive"></a>75. exteroceptive</h3><p>[英]· &#x2F;ɪkˌstɛrə(ʊ)ˈsɛptɪv&#x2F;<br>[形容词] 外感的；外部知觉的<br>例句：</p><ol><li>Exteroceptive senses include touch, temperature, and pain.<br>（外感官包括触摸、温度和疼痛。）</li><li>The exteroceptive system is responsible for detecting stimuli from the external environment.<br>（外部知觉系统负责检测来自外部环境的刺激。）</li><li>Some animals have highly developed exteroceptive abilities that allow them to navigate their surroundings with great precision.<br>（一些动物具有高度发达的外感能力，使它们能够以极大精度地导航周围环境。）<br>词源：<br>由拉丁语 exterō （“在…之外”）和 perceptiō （“察觉”）组成。</li></ol><h3 id="76-pitch"><a href="#76-pitch" class="headerlink" title="76. pitch"></a>76. pitch</h3><p>[英]· &#x2F;pɪtʃ&#x2F;<br>[n] 1. 音高；2. 投掷；3. 沥青，柏油<br>[v] 1. 投掷；2. （使）倾斜；3. （为…）定音高</p><p>例句：</p><ol><li>The pitch of the sound was too high for my ears to handle.<br>（这个声音的音高对我的耳朵来说太高了。）</li><li>He pitched the ball to his teammate.<br>（他把球投给了队友。）</li><li>The workers were laying down a fresh pitch on the road.<br>（工人们正在路上铺设新的沥青。）</li></ol><p>词源：来自古英语“picchen”，意为“刺穿、扎破”。</p><h3 id="77-proprioceptive"><a href="#77-proprioceptive" class="headerlink" title="77. proprioceptive"></a>77. proprioceptive</h3><p>[英]· &#x2F;ˌprəʊpriəˈsɛptɪv&#x2F;<br>[形容词] 本体感觉的；肌体感觉的；自我知觉的<br>例句：</p><ol><li>Proprioceptive feedback helps us maintain balance.<br>（本体感觉反馈帮助我们保持平衡。）</li><li>Athletes rely on proprioceptive awareness to improve their performance.<br>（运动员依靠本体感知来提高他们的表现。）</li><li>Physical therapy can help patients with proprioceptive deficits regain their sense of body position and movement.<br>（物理治疗可以帮助患有本体感知缺陷的患者恢复身体位置和运动方面的意识。）<br>词源：由拉丁语proprius（“自己的”）和ceptum（“捕获”）组成，意为“捕获自己”。</li></ol><h3 id="78-antenna"><a href="#78-antenna" class="headerlink" title="78. antenna"></a>78. antenna</h3><p>[英]· &#x2F;ænˈtenə&#x2F;  或  [美]· &#x2F;ænˈtɛnə&#x2F;<br>[n.] 天线；触角；（昆虫的）感觉器官<br>例句：</p><ol><li>The TV set needs a new antenna.<br>（这台电视需要一个新天线。）</li><li>The butterfly’s antennae are very sensitive to smells.<br>（蝴蝶的触角对气味非常敏感。）</li><li>Some species of ants use their antennae to communicate with each other.<br>（一些种类的蚂蚁用它们的触角相互交流。）<br>词源：<br>来自拉丁语 antemna，意为“帆杠”。</li></ol><h3 id="79-kinematic"><a href="#79-kinematic" class="headerlink" title="79. kinematic"></a>79. kinematic</h3><p>[英]· &#x2F;ˌkɪnəˈmætɪk&#x2F;<br>[形] 运动学的；运动论的<br>例句：</p><ol><li>Kinematic analysis is used to study the motion of objects without considering the forces that cause the motion.<br>（运动学分析用于研究物体的运动，而不考虑引起这种运动的力。）</li><li>The kinematic equations can be used to calculate an object’s position, velocity, and acceleration at any given time during its motion.<br>（运动方程可以用来计算物体在其运动过程中任何给定时间点上的位置、速度和加速度。）</li><li>In robotics, kinematics is concerned with studying how robots move and interact with their environment.<br>（在机器人技术中，运动学涉及研究机器人如何移动并与环境互动。）<br>词源：<br>来自希腊语“kinēma”（意为“移动”）和“-ic”后缀。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第3周)</title>
      <link href="/2023/05/15/words(2024.3)/"/>
      <url>/2023/05/15/words(2024.3)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-antecedent"><a href="#1-antecedent" class="headerlink" title="1. antecedent"></a>1. antecedent</h3><p>[英]· &#x2F;ˌæntɪˈsiːdənt&#x2F;   [美]· &#x2F;ˌæntəˈsidənt&#x2F;<br>[n.] 先例，前事；[语法学] 先行词</p><ol><li>The antecedents of the conflict lie in events that occurred years ago. (冲突的先例在于多年前发生的事件。)</li><li>In grammar, an antecedent is a word or phrase that is replaced by a pronoun in a sentence. (在语法中，先行词是一个单词或短语，在句子中被代词所替换。)</li><li>It’s important to establish the antecedents of any new technology before it becomes widely used. (在新技术广泛使用之前，建立其先例非常重要。)<br>词源：来自拉丁文“ante-”（表示“before”）和“cedere”（表示“go”）。</li></ol><h3 id="2-prune"><a href="#2-prune" class="headerlink" title="2. prune"></a>2. prune</h3><p>[英]· &#x2F;pruːn&#x2F;<br>[v.] 修剪；删减；削减<br>例句：</p><ol><li>She pruned the rose bushes in the garden. (她修剪了花园里的玫瑰灌木。)</li><li>The company is planning to prune its workforce by 10%. (公司计划裁员10%。)</li><li>He pruned his essay down to just two pages. (他把论文缩减到只有两页。)<br>词源：<br>来自古法语pruner，意为“修整、整理”。</li></ol><h3 id="3-prohibitive"><a href="#3-prohibitive" class="headerlink" title="3. prohibitive"></a>3. prohibitive</h3><p>[英]· &#x2F;prəˈhɪbɪtɪv&#x2F;<br>[形] 禁止的；过高的；抑制性的<br>例句：</p><ol><li>The cost of the tickets was prohibitive for many people. (门票价格对许多人来说太贵了。)</li><li>Smoking is strictly prohibitive in this area. (在这个区域内严禁吸烟。)</li><li>The company’s policies were deemed to be too prohibitive by some employees. (一些员工认为公司的政策过于限制了。)<br>词源：来自拉丁语 prohibitivus，意为“禁止”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第13周）</title>
      <link href="/2023/05/15/words(2024.13)/"/>
      <url>/2023/05/15/words(2024.13)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-bureaucracy"><a href="#1-bureaucracy" class="headerlink" title="1. bureaucracy"></a>1. bureaucracy</h3><p>[英]· &#x2F;bjʊəˈrɒkrəsi&#x2F;<br>[n.] 官僚主义；官僚机构<br>例句：</p><ol><li>The company’s bureaucracy slowed down the decision-making process. (公司的官僚机构拖慢了决策过程。)</li><li>He was frustrated by the endless bureaucracy involved in getting a visa. (他对申请签证所涉及的无休止的官僚主义感到沮丧。)</li><li>The government is trying to reduce bureaucracy and make services more efficient for citizens. (政府正在努力减少官僚主义，使公民服务更加高效。)<br>词源：<br>From French bureaucratie, from bureau ‘office’ + -cratie ‘-cracy’.</li></ol><h3 id="2-bureau-·-x2F-ˈbjʊərəʊ-x2F"><a href="#2-bureau-·-x2F-ˈbjʊərəʊ-x2F" class="headerlink" title="2. bureau · &#x2F;ˈbjʊərəʊ&#x2F;"></a>2. bureau · &#x2F;ˈbjʊərəʊ&#x2F;</h3><p>在这个句子中，”bureau” 指的是一个政府机构或部门。整个句子 “bureaucracy” 是指官僚主义，即过度复杂和繁琐的行政程序。</p><p>这个词不是成语中的一部分。</p><p>以下是三到五个具有相同意思的例子：</p><ol><li>The bureau of immigration is responsible for processing visa applications.<br>（移民局负责处理签证申请。）</li><li>She works in the local tax bureau.<br>（她在当地税务局工作。）</li><li>The FBI is a federal law enforcement bureau in the United States.<br>（联邦调查局是美国的联邦执法机构。）</li></ol><h3 id="3-delegate"><a href="#3-delegate" class="headerlink" title="3. delegate"></a>3. delegate</h3><p>[英]· &#x2F;ˈdelɪɡət&#x2F;   [美]· &#x2F;ˈdɛləˌɡet&#x2F;<br>[n.] 代表；委托人；被授权者<br>[v.] 委派（任务、职责等）；授权（某人做某事）<br>例句：</p><ol><li>The company decided to delegate the project to a team of experts. (公司决定将该项目委派给一组专家。)</li><li>She was delegated to represent the organization at the conference. (她被委派代表该组织参加会议。)</li><li>As a manager, it’s important to delegate tasks effectively in order to maximize productivity. (作为经理，有效地分配任务以最大化生产力是很重要的。)</li></ol><p>词源：来自拉丁语 “delegatus”，意为“已选出的”，由 “de-“ 表示“从…中”和 “legare” 表示“选择、任命”构成。</p><h3 id="4-stake"><a href="#4-stake" class="headerlink" title="4. stake"></a>4. stake</h3><p>[英]· &#x2F;steɪk&#x2F;<br>[n]1. 标桩；木桩；2. 赌注，利害关系；3. 股份，权益；<br>[v]1. 用桩支撑；2. 打赌，押注；<br>例句：</p><ol><li>The surveyors drove stakes into the ground to mark the boundaries of the property.<br>（测量员们在地面上打了标杆来标记财产的边界。）</li><li>He has a lot at stake in this business deal.<br>（他在这笔生意中有很多利害关系。）</li><li>She owns a stake in the company and receives dividends every year.<br>（她拥有该公司的股份，并每年获得分红。）<br>词源：来自古英语“staca”，意为“木桩”。</li></ol><h3 id="5-verbally"><a href="#5-verbally" class="headerlink" title="5. verbally"></a>5. verbally</h3><p>[英]· &#x2F;ˈvɜːbəli&#x2F;<br>[副词] 口头地；用言辞地<br>例句：</p><ol><li>She expressed her dissatisfaction verbally. (她口头表达了不满。)</li><li>The agreement was made verbally, not in writing. (协议是口头达成的，没有书面文件。)</li><li>He apologized verbally for his mistake. (他口头道歉了他的错误。)<br>词源：<br>来自拉丁语“verbalis”，意为“言辞的”。</li></ol><h3 id="6-pervasive"><a href="#6-pervasive" class="headerlink" title="6. pervasive"></a>6. pervasive</h3><p>[英]· &#x2F;pəˈveɪsɪv&#x2F;<br>[形] 普遍存在的；无处不在的；渗透性强的<br>例句：</p><ol><li>The pervasive influence of social media is undeniable. (社交媒体的普及影响是不可否认的。)</li><li>The smell of cigarette smoke was pervasive throughout the room. (烟味弥漫了整个房间。)</li><li>His music has had a pervasive impact on popular culture. (他的音乐对流行文化产生了广泛影响。)<br>词源：<br>来自拉丁语 pervasus，意为“穿透、渗透”。</li></ol><h3 id="7-radical"><a href="#7-radical" class="headerlink" title="7. radical"></a>7. radical</h3><p>[英]· &#x2F;ˈrædɪkl&#x2F;<br>[n] 激进分子；根本的；基础的；[数学] 根数符号<br>例句：</p><ol><li>He was a political radical in his youth. (他年轻时是一个政治激进分子。)</li><li>The new government made some radical changes to the education system. (新政府对教育系统进行了一些根本性的改变。)</li><li>In mathematics, the radical is used to indicate the square root of a number. (在数学中，根号符号用于表示一个数字的平方根。)<br>词源：<br>来自拉丁语 “radix”，意为 “root” 或 “source”。</li></ol><h3 id="8-virtuous-·-x2F-ˈvɜːrtʃuəs-x2F"><a href="#8-virtuous-·-x2F-ˈvɜːrtʃuəs-x2F" class="headerlink" title="8. virtuous · &#x2F;ˈvɜːrtʃuəs&#x2F;"></a>8. virtuous · &#x2F;ˈvɜːrtʃuəs&#x2F;</h3><p>在这个句子中，“virtuous”意为“有益的，积极的”。整个句子的意思是信息处理的良性和恶性循环。这里并没有使用任何习语。<br>virtuous and vitious circles of information processes<br>以下是三个具有相同含义的例子：</p><ol><li><p>Eating healthy food can create a virtuous cycle of good health.<br>（吃健康食品可以创造一个良性循环，带来好身体健康。）</p></li><li><p>Regular exercise leads to better sleep, which in turn creates a virtuous circle of well-being.<br>（定期锻炼会导致更好的睡眠，从而创造出幸福感的良性循环。）</p></li><li><p>Investing in education can lead to higher-paying jobs and greater financial stability, creating a virtuous cycle of success.<br>（投资于教育可能会带来高薪工作和更大的财务稳定性，从而创造成功之路上一个良性循环。）</p></li></ol><h3 id="9-versus"><a href="#9-versus" class="headerlink" title="9. versus"></a>9. versus</h3><p>[拉丁语]· &#x2F;‘vɜrsəs&#x2F;<br>[n.] 对抗，对峙；（缩写为vs.）与…相对比<br>例句：</p><ol><li>The game is Yankees versus Red Sox. (这场比赛是洋基队对阵红袜队。)</li><li>It’s a classic battle of good versus evil. (这是一场经典的善恶之战。)</li><li>In the court case, it was plaintiff versus defendant. (在法庭上，原告和被告进行了辩论。)<br>词源：<br>来自拉丁语“versus”，意为“反面、相反”。</li></ol><h3 id="10-rationality"><a href="#10-rationality" class="headerlink" title="10. rationality"></a>10. rationality</h3><p>[英]· &#x2F;ˌræʃəˈnæləti&#x2F;<br>[n.] 理性；合理性<br>例句：</p><ol><li>The decision was made based on rationality and logic. (这个决定是基于理性和逻辑做出的。)</li><li>It is important to approach problems with rationality rather than emotion. (用理智而不是情感来处理问题很重要。)</li><li>His argument lacked rationality and coherence. (他的论点缺乏合理性和连贯性。)<br>词源：来自拉丁语“rationalis”，意为“有道理的，讲道理的”。</li></ol><h3 id="11-phish"><a href="#11-phish" class="headerlink" title="11. phish"></a>11. phish</h3><p>[英]· &#x2F;fɪʃ&#x2F;<br>[n.] 钓鱼（诈骗方式）<br>例句：</p><ol><li>Be careful not to fall for a phish email. (小心不要上钓鱼邮件的当。)</li><li>The bank warned customers about a new wave of phish attacks. (银行警告客户注意新一轮的网络钓鱼攻击。)</li><li>He was caught in a phish scam and lost all his savings. (他被卷入了一个网络钓鱼诈骗中，失去了所有的积蓄。)<br>词源：来自“fish”的拼写变体，意为“用电子手段进行非法活动”。</li></ol><h3 id="12-hyphen"><a href="#12-hyphen" class="headerlink" title="12. hyphen"></a>12. hyphen</h3><p>[英]· &#x2F;ˈhaɪfən&#x2F;<br>[n.] 连字号；连字符<br>例句：</p><ol><li>Please use a hyphen to separate the words in your password. (请在密码中使用连字符分隔单词。)</li><li>The word “co-operation” is spelled with a hyphen. (单词“合作”拼写时需要加上连字符。)</li><li>In English, we often use a hyphen to join two or more words together as one adjective. (在英语中，我们经常使用连字符将两个或更多的单词连接成一个形容词。)<br>词源：<br>来自希腊语“huphen”，意为“连接”。</li></ol><h3 id="13-fancy"><a href="#13-fancy" class="headerlink" title="13. fancy"></a>13. fancy</h3><p>[英]· &#x2F;ˈfænsi&#x2F;<br>[v.] 想象；幻想；喜欢；爱好<br>[adj.] 奇特的；花哨的；昂贵的<br>[n.] 幻想，空想<br>例句：</p><ol><li>I fancy going to the beach this weekend. (我想这个周末去海滩。)</li><li>She has a fancy car and a big house. (她有一辆豪车和一个大房子。)</li><li>He has a lot of fanciful ideas about how to solve the problem. (他对如何解决问题有很多异想天开的主意。)<br>词源：<br>来自于拉丁语“fantasia”，意为“幻觉、梦幻”。</li></ol><h3 id="14-plural"><a href="#14-plural" class="headerlink" title="14. plural"></a>14. plural</h3><p>[英]· &#x2F;ˈplʊərəl&#x2F;<br>[n.] 复数；复数形式<br>例句：</p><ol><li>In English, the plural of “cat” is “cats”. (在英语中，”cat”的复数是”cats”。)</li><li>The word “sheep” is both singular and plural. (单词“sheep”既可以表示单数也可以表示复数。)</li><li>Some nouns have irregular plurals in English, such as “child&#x2F;children”, “foot&#x2F;feet”, and “mouse&#x2F;mice”. (一些名词在英语中有不规则的复数形式，例如“child&#x2F;children”，“foot&#x2F;feet”和“mouse&#x2F;mice”。)<br>词源：来自拉丁语的pluralis，“多个、更多的”。</li></ol><h3 id="15-cognitive"><a href="#15-cognitive" class="headerlink" title="15. cognitive"></a>15. cognitive</h3><p>[英]· &#x2F;ˈkɒɡnətɪv&#x2F;<br>[形] 认知的；认识的；感知的<br>例句：</p><ol><li>Cognitive psychology is the study of mental processes such as “attention, language use, perception, problem solving, memory and thinking”.<br>（认知心理学是研究注意力、语言使用、感知、问题解决、记忆和思维等心理过程的学科。）</li><li>The cognitive abilities of animals have been studied extensively.<br>（动物的认知能力已经得到了广泛研究。）</li><li>The therapist used cognitive therapy to help the patient overcome their anxiety.<br>（治疗师使用认知疗法来帮助患者克服焦虑。）<br>词源：<br>来自拉丁文”cognoscere”，意为“了解”。</li></ol><h3 id="16-deliberate"><a href="#16-deliberate" class="headerlink" title="16. deliberate"></a>16. deliberate</h3><p>[英]· &#x2F;dɪˈlɪbərət&#x2F; ; [美]· &#x2F;dɪˈlɪbərət&#x2F;<br>[形容词] 故意的；深思熟虑的；慎重的</p><ol><li>He made a deliberate attempt to provoke her. (他故意挑衅她。)</li><li>The decision was the result of a deliberate process of discussion and negotiation. (这个决定是经过深思熟虑、讨论和谈判得出的。)</li><li>She spoke in a slow, deliberate way, as if she were choosing each word carefully. (她说话缓慢而慎重，好像每个字都在精心选择。)<br>词源：来自拉丁语“deliberatus”，意为“考虑周到的”。</li></ol><h3 id="17-bass"><a href="#17-bass" class="headerlink" title="17. bass"></a>17. bass</h3><p>[英]· &#x2F;beɪs&#x2F;<br>[n] 低音；鲈鱼；男低音歌手<br>[adj] 低音的；严肃的<br>例句：</p><ol><li>He played the bass guitar in the band. (他在乐队里弹贝斯吉他。)</li><li>The bass of his voice was so deep it shook the room. (他嗓子里发出的低沉声音震动了整个房间。)</li><li>This river is full of large-mouthed bass and trout. (这条河里有很多大口黑鲈和鳟鱼。)<br>词源：<br>来自中古英语“base”，意为“底部，基础”。</li></ol><h3 id="18-trout"><a href="#18-trout" class="headerlink" title="18. trout"></a>18. trout</h3><p>[英]· &#x2F;traʊt&#x2F;<br>[n.] 鳟鱼；红点鲑<br>例句：</p><ol><li>I caught a big trout in the river yesterday. (昨天我在河里钓到了一条大鳟鱼。)</li><li>Trout is a popular fish for sport fishing. (鳟鱼是一种常见的运动钓鱼用的鱼类。)</li><li>Grilled trout with lemon and herbs is delicious. (柠檬和香草烤红点鲑非常美味。)<br>词源：<br>来自古英语 truht，意为“小溪”。</li></ol><h3 id="19-bream"><a href="#19-bream" class="headerlink" title="19. bream"></a>19. bream</h3><p>[英]· &#x2F;briːm&#x2F;<br>[n.] 鲤科鱼类；银鲳<br>例句：</p><ol><li>I caught a bream in the lake yesterday. (我昨天在湖里钓到了一条银鲳。)</li><li>The restaurant serves grilled bream with lemon and herbs. (这家餐厅供应柠檬香草烤银鲳。)</li><li>Bream is a popular fish for cooking in Europe. (银鲳是欧洲常用的食材之一。)<br>词源：<br>来自中古英语“breme”，意为“野蛮的，凶猛的”。</li></ol><h3 id="20-tuna"><a href="#20-tuna" class="headerlink" title="20. tuna"></a>20. tuna</h3><p>[英]· &#x2F;ˈtuːnə&#x2F;<br>[n.] 金枪鱼；鲔鱼<br>例句：</p><ol><li>I had a tuna sandwich for lunch. (我午餐吃了一份金枪鱼三明治。)</li><li>Tuna is a popular fish used in sushi. (金枪鱼是寿司中常用的一种流行的鱼。)</li><li>The restaurant serves grilled tuna steak with vegetables. (这家餐厅供应烤金枪鱼排配蔬菜。)<br>词源：<br>来自西班牙语 “atún”，意为“大型海洋食肉性硬骨鱼类”。</li></ol><h3 id="21-parser"><a href="#21-parser" class="headerlink" title="21. parser"></a>21. parser</h3><p>[英]· &#x2F;ˈpɑːsə(r)&#x2F;<br>[n.] 解析器，分析程序<br>例句：</p><ol><li>The parser reads the input code and converts it into a structure that can be easily understood by the computer. (解析器读取输入的代码并将其转换为计算机易于理解的结构。)</li><li>This programming language comes with its own built-in parser. (这种编程语言自带内置的解析器。)</li><li>The syntax errors were caught by the parser during compilation. (语法错误在编译期间被解析器捕获了。)<br>词源：<br>来自拉丁文 parsus（“已经剖开”），过去分词形式是 parse，加上后缀 -er 构成名词形式。</li></ol><h3 id="22-crop"><a href="#22-crop" class="headerlink" title="22. crop"></a>22. crop</h3><p>[英]· &#x2F;krɒp&#x2F;<br>[n.] 农作物；庄稼；收成<br>[v.] 种植；修剪（树木、头发等）；裁剪（照片）<br>例句：</p><ol><li>The farmers are busy harvesting the crop in the field. (农民们正在田地里忙着收获庄稼。)</li><li>She had her hair cropped short for the summer. (她为了夏天把头发剪得很短。)</li><li>He cropped the photo to focus on the main subject. (他裁剪了这张照片，以便聚焦于主题。)<br>词源：<br>Old English croppian ‘pluck, cut off’, of Germanic origin; related to Dutch kroppen ‘to crop’.</li></ol><h3 id="23-tone"><a href="#23-tone" class="headerlink" title="23. tone"></a>23. tone</h3><p>[英]· &#x2F;təʊn&#x2F;<br>[n.] 语调；音调；腔调；色调<br>[v.] （使）变成某种语气或情感的口吻，（使）有某种声音</p><p>例句：</p><ol><li>She spoke in a tone of sadness. (她说话带着悲伤的口吻。)</li><li>The teacher’s tone was stern when she scolded the students. (老师责备学生时态度严厉。)</li><li>He sang the song with a beautiful and melodious tone. (他用优美而悦耳的嗓音唱了这首歌。)</li></ol><p>词源：来自拉丁语“tonus”，意为“张力、紧张”。</p><h3 id="24-sentiment"><a href="#24-sentiment" class="headerlink" title="24. sentiment"></a>24. sentiment</h3><p>[英]· &#x2F;ˈsɛntɪmənt&#x2F;  或  [美]· &#x2F;ˈsɛntəmənt&#x2F;<br>[n.] 情感，情绪；观点，态度<br>例句：</p><ol><li>His sentiment towards the proposal was positive. (他对这个提议的态度是积极的。)</li><li>The movie evokes a strong sentiment of nostalgia in me. (这部电影在我心中引起了强烈的怀旧情感。)</li><li>She expressed her anti-war sentiment through her artwork. (她通过自己的艺术作品表达了反战立场。)</li></ol><p>词源：来自拉丁语 sentire（意为“感知”）和 -ment 后缀（表示名词化）。</p><h3 id="25-nostalgia"><a href="#25-nostalgia" class="headerlink" title="25. nostalgia"></a>25. nostalgia</h3><p>[英]· &#x2F;nɒˈstaldʒə&#x2F;<br>[n.] 怀旧之情；怀旧病；乡愁<br>例句：</p><ol><li>I often feel nostalgia for my childhood home. (我经常对我的童年家感到怀旧。)</li><li>The old photos brought back a wave of nostalgia. (那些老照片唤起了一阵怀旧之情。)</li><li>He listened to the music with nostalgia, remembering his youth. (他带着怀旧的心情听着音乐，回忆起自己的青春时光。)<br>词源：<br>来自希腊语“νόστος”（归国）和“ἄλγος”（痛苦）。</li></ol><h3 id="26-rudimentary"><a href="#26-rudimentary" class="headerlink" title="26. rudimentary"></a>26. rudimentary</h3><p>[英]· &#x2F;ˌruːdɪˈmentəri&#x2F;  美· &#x2F;ˌruːdəˈmɛntəri&#x2F;<br>[形容词] 基本的；初步的；未发展完全的<br>例句：</p><ol><li>The children were taught rudimentary arithmetic.<br>孩子们学习了基础算术。</li><li>He has only a rudimentary knowledge of French.<br>他只有一点点法语基础知识。</li><li>The company’s website is still in its rudimentary stage.<br>公司网站还处于初级阶段。<br>词源：<br>来自拉丁语 “rudimentum”，意为“开端、起始”。</li></ol><h3 id="27-trucate"><a href="#27-trucate" class="headerlink" title="27. trucate"></a>27. trucate</h3><p>[英]· &#x2F;ˈtruːkeɪt&#x2F;<br>[动词] 截短，缩短；删节<br>例句：</p><ol><li>The article was trucated to fit the magazine’s page limit. (这篇文章被截短以适应杂志的页数限制。)</li><li>The director decided to trucate the film by removing some scenes. (导演决定通过删除一些场景来缩短电影。)</li><li>The speaker had to trucate his speech due to time constraints. (由于时间限制，演讲者不得不缩减他的演讲。)<br>词源：来自拉丁语“truncatus”，意为“截去”。</li></ol><h3 id="28-musings"><a href="#28-musings" class="headerlink" title="28. musings"></a>28. musings</h3><p>[英]· &#x2F;ˈmjuːzɪŋz&#x2F;<br>[n.] 沉思，冥想；幻想，空想<br>例句：</p><ol><li>His musings on life often led him to deep philosophical questions. (他对生命的沉思常常引导他深入哲学问题。)</li><li>She was lost in her own musings and didn’t hear the phone ringing. (她陷入了自己的幻想中，没有听到电话铃声。)</li><li>The book is a collection of his personal musings on various topics, from politics to art. (这本书是他关于各种主题的个人幻想集合，从政治到艺术。)<br>词源：来自动词“muse”的现在分词形式“musing”，意为“沉思、冥想”。</li></ol><h3 id="29-muse"><a href="#29-muse" class="headerlink" title="29. muse"></a>29. muse</h3><p>[英]· &#x2F;mjuːz&#x2F;<br>[n.] 1. 缪斯女神；2. 灵感，启示；3. 冥想，沉思<br>[vi.] 沉思，冥想<br>例句：</p><ol><li>She is my muse and the inspiration for all of my paintings. (她是我的灵感源泉和我所有画作的灵魂。)</li><li>The writer sat at his desk, trying to find his muse for the day’s work. (作家坐在桌前，试图找到今天工作的灵感。)</li><li>I often muse about what life would be like if I had made different choices in the past.(我经常沉思如果过去做出不同选择生活会变成什么样子。)</li></ol><p>词源：来自希腊神话中的缪斯九姐妹（Muses），被认为是艺术、科学和文学等领域的守护女神。</p><h3 id="30-scarce"><a href="#30-scarce" class="headerlink" title="30. scarce"></a>30. scarce</h3><p>[英]· &#x2F;skɑːs&#x2F;<br>[形] 缺乏的；稀有的；罕见的</p><ol><li>Food and water were becoming scarce.<br>食物和水变得越来越缺乏。</li><li>Jobs are scarce in this area.<br>这个地区工作机会很少。</li><li>The bird is now very scarce in Britain.<br>这种鸟在英国现在非常罕见。<br>词源：<br>来自古法语“escars”，意为“荒野”。</li></ol><h3 id="31-sparse"><a href="#31-sparse" class="headerlink" title="31. sparse"></a>31. sparse</h3><p>[英]· &#x2F;spɑːs&#x2F;<br>[形] 稀疏的；稀少的；不密集的<br>例句：</p><ol><li>The trees became sparse as we climbed higher up the mountain. (随着我们爬山越高，树木变得越来越稀疏。)</li><li>The population in this area is quite sparse, with only a few small towns scattered around. (这个地区人口相当稀少，只有几个小镇分散在周围。)</li><li>She added more water to the soup because it was too thick and sparse with vegetables. (她往汤里加了更多水，因为蔬菜太少而且分布不均匀。)<br>词源：来自拉丁语“sparus”，意为“节约、简朴”。</li></ol><h3 id="32-empirically"><a href="#32-empirically" class="headerlink" title="32. empirically"></a>32. empirically</h3><p>[英]· &#x2F;ɪmˈpɪr.ɪ.kəl.i&#x2F; 或 &#x2F;ˌem.pɪr.ɪˈkæl.i&#x2F;<br>[副词] 以经验为依据地；凭经验地<br>例句：</p><ol><li>Empirically, we know that exercise is good for our health.<br>（从经验上来看，我们知道运动对健康有益。）</li><li>The theory needs to be tested empirically before it can be accepted as true.<br>（这个理论需要通过实证测试才能被接受为真实。）</li><li>She approached the problem empirically, trying different methods until she found one that worked.<br>（她采用了经验主义的方法，尝试不同的方法直到找到一个有效的解决方案。）<br>词源：来自拉丁语 “experientia” （体验、实践）</li></ol><h3 id="33-horse"><a href="#33-horse" class="headerlink" title="33. horse"></a>33. horse</h3><p>在这个句子中，“work-horse”是一个习语，意思是“勤劳的工作人员”。这个词不仅指代了马，还表示某人非常勤奋、肯干活。因此，“work-horse”可以用来形容那些一直在工作、从不懈怠的人。</p><p>其他几个例子包括：</p><ol><li><p>My dad is a real work-horse, he never stops working.<br>（我爸爸真是一个勤劳的工作人员，他从不停歇。）</p></li><li><p>She’s been the company’s work-horse for years now.<br>（多年来，她一直都是公司里最勤奋的员工。）</p></li><li><p>The team captain was a real work-horse on the field.<br>（队长在球场上表现得非常卖力。）</p></li></ol><p>“Work-horse”并不是一个普通的组合词汇，而是一个固定短语或者说成语，在英文中有着特殊含义和用法。</p><h3 id="34-discriminative"><a href="#34-discriminative" class="headerlink" title="34. discriminative"></a>34. discriminative</h3><p>[英]· &#x2F;dɪˈskrɪmɪnətɪv&#x2F;<br>[形] 区分的；有识别力的；歧视性的<br>例句：</p><ol><li>Discriminative learning is a type of supervised learning that involves assigning labels to input data.<br>（区分学习是一种监督学习，涉及将标签分配给输入数据。）</li><li>The discriminative stimulus is the cue or signal in an environment that indicates the availability of reinforcement for a particular response.<br>（区别刺激是环境中指示特定响应可获得强化的提示或信号。）</li><li>Some studies suggest that people with high levels of anxiety may have less discriminative ability when it comes to recognizing facial expressions.<br>（一些研究表明，焦虑水平较高的人在识别面部表情方面可能具有较低的区分能力。）<br>词源：来自拉丁语“discriminare”，意为“加以区分”。</li></ol><h3 id="35-deliberately"><a href="#35-deliberately" class="headerlink" title="35. deliberately"></a>35. deliberately</h3><p>[英]· &#x2F;dɪˈlɪbərətli&#x2F;<br>[副词] 故意地；蓄意地；慎重地<br>例句：</p><ol><li>He deliberately ignored her.<br>（他故意忽略了她。）</li><li>She spoke slowly and deliberately.<br>（她说话缓慢而谨慎。）</li><li>The company was accused of deliberately misleading customers.<br>（该公司被指控故意误导顾客。）<br>词源：<br>来自拉丁语“deliberatus”，过去分词形式，意为“经过深思熟虑的”。</li></ol><h3 id="36-heuristics"><a href="#36-heuristics" class="headerlink" title="36. heuristics"></a>36. heuristics</h3><p>[英]· &#x2F;hjʊəˈrɪstɪks&#x2F; 或 &#x2F;hjʊˈrɪstɪks&#x2F;<br>[n.] 启发式方法；试探性的解决办法<br>例句：</p><ol><li>The algorithm uses heuristics to find the optimal solution.<br>（该算法使用启发式方法来寻找最优解。）</li><li>He relied on heuristics rather than a systematic approach to solve the problem.<br>（他依靠试探性的解决办法而非系统化的方法来解决问题。）</li><li>The teacher taught us some heuristics for solving math problems quickly.<br>（老师教给我们一些快速解决数学问题的启发式方法。）<br>词源：<br>来自希腊语 “heuriskein”，意为“找到”。</li></ol><h3 id="37-babylonian"><a href="#37-babylonian" class="headerlink" title="37. babylonian"></a>37. babylonian</h3><p>[英]· &#x2F;ˌbæbɪləʊˈniːən&#x2F;<br>[形] 巴比伦的；巴比伦人的；巴比伦文化的</p><ol><li>The Babylonian empire was one of the most powerful empires in ancient Mesopotamia.<br>（巴比伦帝国是古代美索不达米亚最强大的帝国之一。）</li><li>The Babylonian civilization made significant contributions to mathematics and astronomy.<br>（巴比伦文明对数学和天文学做出了重要贡献。）</li><li>The cuneiform script used by the Babylonians is one of the earliest known forms of writing.<br>（巴比伦人使用的楔形文字是已知最早的书写形式之一。）<br>词源：来自拉丁语Babylonius，意为“居住在巴比伦”的。</li></ol><h3 id="38-harsh"><a href="#38-harsh" class="headerlink" title="38. harsh"></a>38. harsh</h3><p>[英]· &#x2F;hɑːʃ&#x2F;<br>[形容词] 粗糙的；刺耳的；严厉的<br>例句：</p><ol><li>The harsh winter weather made it difficult to travel. (恶劣的冬季天气使旅行变得困难。)</li><li>She spoke in a harsh tone that made everyone uncomfortable. (她用尖锐刺耳的语调说话，让所有人都感到不舒服。)</li><li>The teacher’s criticism was too harsh and demotivating for the students. (老师过于严厉批评学生，导致他们失去了动力。)<br>词源：来自中古英语“harsk”，意为“粗糙、硬”的样子或质地。</li></ol><h3 id="39-venerable"><a href="#39-venerable" class="headerlink" title="39. venerable"></a>39. venerable</h3><p>[英]· &#x2F;ˈvenərəbl&#x2F;<br>[形容词] 可尊敬的；值得崇敬的；庄严的</p><ol><li>The venerable old man was highly respected in the community. (这位可敬老人在社区中备受尊重。)</li><li>The church is a venerable institution with a long history. (这个教堂是一个历史悠久、值得尊敬的机构。)</li><li>She has become one of the most venerable figures in British politics. (她已成为英国政治界最值得尊敬的人物之一。)<br>词源：来自拉丁语“venerabilis”，意为“可崇拜的”。</li></ol><h3 id="40-plumber"><a href="#40-plumber" class="headerlink" title="40. plumber"></a>40. plumber</h3><p>[英]· &#x2F;ˈplʌmə(r)&#x2F;<br>[n.] [水管工；铅管匠]<br>例句：</p><ol><li>The plumber fixed the leaky faucet in my bathroom. (水管工修理了我浴室里漏水的龙头。)</li><li>My dad used to be a plumber before he retired. (我爸爸退休前是一名铅管匠。)</li><li>I need to call a plumber to fix the pipes in my kitchen sink. (我需要叫一个水管工来修理我厨房洗碗池的水管。)<br>词源：<br>来自拉丁语“plumbum”，意为“铅”。</li></ol><h3 id="41-proximate"><a href="#41-proximate" class="headerlink" title="41. proximate"></a>41. proximate</h3><p>[英]· &#x2F;ˈprɒksɪmət&#x2F;   [美]· &#x2F;ˈprɑːksəmət&#x2F;<br>[形容词] 直接的；最接近的；即将发生的<br>例句：</p><ol><li>The proximate cause of the accident was a mechanical failure. (事故的直接原因是机械故障。)</li><li>The proximate goal of this project is to increase sales by 20%. (这个项目的直接目标是将销售额增加20%。)</li><li>Stress is a proximate factor in many health problems. (压力是许多健康问题中最为紧要的因素之一。)<br>词源：<br>来自拉丁语 “proximatus”，意思是“靠近”。</li></ol><h3 id="42-indice"><a href="#42-indice" class="headerlink" title="42. indice"></a>42. indice</h3><p>[英]· &#x2F;ˈɪndɪsi&#x2F; ; [美]· &#x2F;ˈɪndəs&#x2F;<br>[n.] 指数；指标；（复数）索引<br>例句：</p><ol><li>The stock market indice rose sharply yesterday. (股市指数昨天大幅上涨。)</li><li>This report includes a variety of economic indices. (这份报告包括各种经济指标。)</li><li>Please refer to the indices at the back of the book for further information. (请参考书后的索引以获取更多信息。)<br>词源：来自拉丁语 “indēx”，意为“表明、显示”。</li></ol><h3 id="43-crawler"><a href="#43-crawler" class="headerlink" title="43. crawler"></a>43. crawler</h3><p>[英]· &#x2F;ˈkrɔːlə(r)&#x2F;<br>[n.] 爬行动物；爬虫机器人；网络爬虫程序<br>例句：</p><ol><li>The crawler moved slowly across the forest floor. (那只爬行动物在森林地面缓慢移动。)</li><li>The company uses crawlers to collect data from various websites. (该公司使用网络爬虫从各个网站收集数据。)</li><li>The Mars rover is essentially a sophisticated crawler with advanced scientific instruments on board. (火星探测车本质上是一种先进的带有高级科学仪器的机器人。)</li></ol><p>词源：来自crawl（匍匐前进）+ -er（表示人或事物）。</p><h3 id="44-prioritize"><a href="#44-prioritize" class="headerlink" title="44. prioritize"></a>44. prioritize</h3><p>[英]· &#x2F;praɪˈɒrɪtaɪz&#x2F;   [美]· &#x2F;praɪˈɔrəˌtaɪz&#x2F;<br>[v.] 优先考虑；使…优先<br>例句：</p><ol><li>We need to prioritize our tasks in order to meet the deadline. (我们需要把任务按重要性排序，以便在截止日期前完成。)</li><li>The company needs to prioritize customer satisfaction above all else. (公司需要把客户满意度放在首位。)</li><li>It’s important for leaders to prioritize their team’s well-being and work-life balance. (领导人有必要将团队的福祉和工作与生活平衡放在首位。)<br>词源：<br>priorit(y) + -ize</li></ol><h3 id="45-interjectively"><a href="#45-interjectively" class="headerlink" title="45. interjectively"></a>45. interjectively</h3><p>[英]· &#x2F;ˌɪntəˈdʒektɪvli&#x2F;<br>[副词] 插话地，插嘴地<br>例句：</p><ol><li>Interjectively, she added that she had a similar experience before. (她插话说她以前也有过类似的经历。)</li><li>He interjectively interrupted the speaker to ask for clarification. (他插嘴打断演讲者询问澄清。)</li><li>“Excuse me,” he said interjectively, “but I think you misunderstood what I meant.” (“对不起，”他插话道，“但我觉得你误解了我的意思。”)</li></ol><h3 id="46-irritively"><a href="#46-irritively" class="headerlink" title="46. irritively"></a>46. irritively</h3><p>[英]· &#x2F;ˈɪrɪtətɪvli&#x2F;<br>adv. 刺激地；恼人地<br>例句：</p><ol><li>She tapped her foot irritively on the floor.<br>（她不耐烦地在地板上敲着脚。）</li><li>The constant noise from the construction site was irritively distracting.<br>（建筑工地的持续噪音让人分心且十分恼人。）</li><li>He spoke irritively, clearly annoyed by the interruption.<br>（他说话时带有刺激性，显然被打断惹怒了。）<br>词源：<br>来自动词 irrite 的副词形式 irritively，意为“刺激、使愤怒”。</li></ol><h3 id="47-nasty"><a href="#47-nasty" class="headerlink" title="47. nasty"></a>47. nasty</h3><p>[英]· &#x2F;ˈnɑːsti&#x2F;  美· &#x2F;ˈnæsti&#x2F;<br>[形容词] 讨厌的；下流的；肮脏的；恶劣的<br>例句：</p><ol><li>He has a nasty habit of interrupting people when they’re speaking. (他有一个让人讨厌的习惯，就是在别人说话时打断他们。)</li><li>The food had a really nasty taste to it. (这食物味道真是难吃极了。)</li><li>She gave me a nasty look and walked away without saying anything. (她瞪了我一眼，然后走开了，什么也没说。)<br>词源：来自中古英语“nastin”，意为“卑鄙、下流”。</li></ol><h3 id="48-conspiracy"><a href="#48-conspiracy" class="headerlink" title="48. conspiracy"></a>48. conspiracy</h3><p>[英]· &#x2F;kənˈspɪrəsi&#x2F;<br>[n.] 阴谋；共谋<br>例句：</p><ol><li>The group was accused of conspiracy to commit fraud. (这个团体被指控策划欺诈行为。)</li><li>They were arrested for conspiracy to overthrow the government. (他们因策划推翻政府而被逮捕。)</li><li>The novel is about a conspiracy to assassinate the president. (这本小说讲述了一场暗杀总统的阴谋。)<br>词源：<br>from Latin conspirare “to agree, unite”</li></ol><h3 id="49-cricket"><a href="#49-cricket" class="headerlink" title="49. cricket"></a>49. cricket</h3><p>[英]· &#x2F;ˈkrɪkɪt&#x2F;<br>[n.] 板球；蟋蟀<br>例句：</p><ol><li>He is a big fan of cricket and never misses a match. (他是板球的忠实粉丝，从不错过任何一场比赛。)</li><li>The sound of crickets chirping in the night was soothing to her ears. (夜晚蟋蟀鸣叫的声音让她感到舒适。)</li><li>Playing cricket requires good hand-eye coordination and quick reflexes. (打板球需要良好的手眼协调和快速反应能力。)<br>词源：来自中古英语“crycc”或“cricke”，意为“（昆虫）吱吱作响”。</li></ol><h3 id="50-truncate"><a href="#50-truncate" class="headerlink" title="50. truncate"></a>50. truncate</h3><p>[英]· &#x2F;ˈtrʌŋkeɪt&#x2F;   [美]· &#x2F;ˈtrʌŋkeɪt&#x2F;<br>[v.] 截短，缩短；截断，删节；把小数位舍去<br>例句：</p><ol><li>The long file name will be truncated to fit the 8.3 format.<br>（长文件名将被截短以适应8.3格式。）</li><li>Truncate the decimal part of this number and round it up to the nearest integer.<br>（把这个数字的小数部分截掉并四舍五入到最近的整数。）</li><li>The director decided to truncate some scenes from the movie in order to make it shorter.<br>（导演决定从电影中删减一些场景，以使其更加简洁。）<br>词源：来自拉丁语“truncatus”，意为“被割下”。</li></ol><h3 id="51-exhaustive"><a href="#51-exhaustive" class="headerlink" title="51. exhaustive"></a>51. exhaustive</h3><p>[英]· &#x2F;ɪɡˈzɔːstɪv&#x2F; 或 &#x2F;ɛɡˈzɒstɪv&#x2F;<br>[形] 彻底的；详尽无遗的；彻头彻尾的</p><ol><li>The report provides an exhaustive analysis of the situation. (这份报告提供了对情况的详尽分析。)</li><li>She conducted an exhaustive search for her missing keys. (她进行了一次全面搜寻，以找到丢失的钥匙。)</li><li>The team made an exhaustive effort to finish the project on time. (团队做出了极大努力，以按时完成项目。)<br>词源：来自拉丁语 exhaustus（过度使用、耗竭）</li></ol><h3 id="52-saturate"><a href="#52-saturate" class="headerlink" title="52. saturate"></a>52. saturate</h3><p>[英]· &#x2F;ˈsætʃəreɪt&#x2F;  美· &#x2F;ˈsætʃəˌret&#x2F;<br>[v] 使饱和；浸透；使充满<br>[adj] 饱和的，浸透的<br>[名词] 饱和度</p><ol><li>The sponge was saturated with water.<br>这个海绵已经被水浸透了。</li><li>The market is already saturated with similar products.<br>市场上已经有太多类似产品了。</li><li>If you saturate the soil, the plants will die.<br>如果你让土壤过于湿润，植物就会死亡。</li></ol><h3 id="53-asyntop"><a href="#53-asyntop" class="headerlink" title="53. asyntop"></a>53. asyntop</h3><p>[英]· &#x2F;ə’sɪntɒp&#x2F;<br>[n.] 不相交的拱顶；不相交的山峰<br>例句：</p><ol><li>The asyntop of the two arches creates a unique visual effect. (两个拱顶的不相交形成了独特的视觉效果。)</li><li>The mountain range is characterized by its many asyntops, making it a popular destination for hikers and climbers. (这座山脉以其众多不相交的山峰而闻名，使它成为徒步旅行者和攀登者喜爱的目的地。)</li><li>The artist used the concept of asyntop in his sculpture to represent the idea of isolation and individuality. (艺术家在他的雕塑中使用了asyntop概念来代表孤立和个性化思想。)<br>词源：<br>该单词是由a-（表示“无”）+syn-（表示“共同”）+topos（希腊语，“地方”）构成，意为“没有共同点之处”。</li></ol><h3 id="54-exemplary"><a href="#54-exemplary" class="headerlink" title="54. exemplary"></a>54. exemplary</h3><p>[英]· &#x2F;ɪɡˈzempləri&#x2F; ; [美]· &#x2F;ɪɡˈzɛmpləri&#x2F;<br>[形容词] 典范的；模范的；可作楷模的<br>例句：</p><ol><li>She set an exemplary standard for others to follow.<br>（她树立了一个供他人效仿的典范。）</li><li>The company’s safety record is exemplary.<br>（该公司安全记录是值得称赞的。）</li><li>He showed exemplary courage in the face of danger.<br>（面对危险，他表现出了令人钦佩的勇气。）<br>词源：<br>来自拉丁语 exemplum，意为“榜样”。</li></ol><h3 id="55-subjective"><a href="#55-subjective" class="headerlink" title="55. subjective"></a>55. subjective</h3><p>[英]· &#x2F;səbˈdʒektɪv&#x2F;<br>[形] 主观的；个人的；主观上存在的<br>例句：</p><ol><li>His opinion on the matter is purely subjective. (他对这件事情的看法纯粹是主观的。)</li><li>The decision was based on subjective feelings rather than objective facts. (决定是基于主观感受而不是客观事实做出来的。)</li><li>Beauty is a highly subjective concept that varies from person to person. (美是一个高度主观性概念，因人而异。)<br>词源：<br>来自拉丁语“subiectivus”，意为“属于下面（即思想、感情等）”。</li></ol><h3 id="56-redundancy"><a href="#56-redundancy" class="headerlink" title="56. redundancy"></a>56. redundancy</h3><p>[英]· &#x2F;rɪˈdʌndənsi&#x2F;<br>[n.] 多余，过剩；冗余；备份系统<br>例句：</p><ol><li>The company is trying to eliminate redundancy in its workforce. (公司正在试图减少员工的冗余。)</li><li>Redundancy can be a useful feature in computer systems. (在计算机系统中，冗余可以是一个有用的特性。)</li><li>The backup system provides redundancy in case of hardware failure. (备份系统提供了硬件故障时的冗余保护。)<br>词源：<br>来自拉丁语“redundantia”，意为“过多、超出需要”。</li></ol><h3 id="57-agglomerative"><a href="#57-agglomerative" class="headerlink" title="57. agglomerative"></a>57. agglomerative</h3><p>[英]· &#x2F;əˈɡlɒmərətɪv&#x2F;<br>[形容词] 聚集的；凝聚的；团块状的<br>例句：</p><ol><li>The agglomerative growth of the city led to overcrowding and traffic congestion.<br>（城市的聚集性增长导致了人口过剩和交通拥堵。）</li><li>Agglomerative clustering is a popular method in data mining for grouping similar objects together.<br>（聚类分析是数据挖掘中一种常用方法，可以将相似对象分组。）</li><li>The agglomerative process of snowflakes creates beautiful patterns on windows during winter.<br>（雪花的凝结过程在冬季会在窗户上创造出美丽的图案。）<br>词源：<br>来自拉丁语 “agglomerare”，意为 “to wind or add onto a ball”，由 “ad-“ 表示 “to” 和 “glomus” 表示 “ball, thread, yarn” 组成。</li></ol><h3 id="58-dendrogram"><a href="#58-dendrogram" class="headerlink" title="58. dendrogram"></a>58. dendrogram</h3><p>[英]· &#x2F;ˈdɛndrəʊɡræm&#x2F;<br>[n.] 系统树图，树状图<br>例句：</p><ol><li>The dendrogram shows the hierarchical clustering of the data.<br>（系统树图显示了数据的分层聚类。）</li><li>Each branch in the dendrogram represents a cluster of similar items.<br>（系统树图中的每个分支代表一组相似的项。）</li><li>The dendrogram can be used to visualize relationships between different groups or categories.<br>（可以使用系统树图来可视化不同群体或类别之间的关系。）<br>词源：<br>由希腊语“δένδρον”（意为“树木”）和“γράμμα”（意为“写作、绘画、描绘”）组成，表示用于描述层次结构的一种方法。</li></ol><h3 id="59-linkage"><a href="#59-linkage" class="headerlink" title="59. linkage"></a>59. linkage</h3><p>[英]· &#x2F;ˈlɪŋkɪdʒ&#x2F;<br>[n.] 联系；连锁；联结物<br>例句：</p><ol><li>The linkage between the two companies will create a powerful new force in the market. (两家公司之间的联系将在市场上创造一个强大的新力量。)</li><li>The linkage of these two ideas is crucial to understanding the theory as a whole. (这两个想法的联系对于理解整个理论至关重要。)</li><li>A broken linkage caused the machine to malfunction. (一根断裂的连接件导致机器发生故障。)</li></ol><p>词源：来自于 link 的名词形式，意为“连接”。</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第12周）</title>
      <link href="/2023/05/15/words(2024.12)/"/>
      <url>/2023/05/15/words(2024.12)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-correspondence"><a href="#1-correspondence" class="headerlink" title="1. correspondence"></a>1. correspondence</h3><p>&#x2F;ˌkɔːrəˈspɒndəns&#x2F;<br>在句子中的含义：该词表示“通信”或“信函”，指书面或口头交流。在这个短语中，“in correspondence of”意味着两者之间存在联系，可以是通过电子邮件、电话、书信等方式进行沟通。</p><p>这个句子的意思是：“关于某事物的通讯”。它可能指涉到一些文件、报告或其他形式的信息传递。</p><p>这个单词不是一个习语。</p><p>以下是三到五个具有相同含义的例子：</p><ol><li><p>We have been in correspondence for several months now.<br>（我们已经互相通信了好几个月了。）</p></li><li><p>The company’s customer service department is available to answer any questions or concerns via email correspondence.<br>（公司客户服务部门可通过电子邮件来回答任何问题和顾虑。）</p></li><li><p>The two politicians were caught in a secret correspondence that was leaked to the press.<br>（两位政治家被发现有秘密往来，而此事被泄露给媒体。）</p></li></ol><p>以上例句都表达了人们之间通过书面或口头交流进行沟通和联系的情况。</p><h3 id="2-trade"><a href="#2-trade" class="headerlink" title="2. trade"></a>2. trade</h3><p>&#x2F;treɪd&#x2F;<br>在这个句子中，“trade off”是一个习语，意思是为了得到某些东西而放弃其他东西。整个句子的意思可能是指在做决策时需要考虑权衡利弊。</p><p>这里有三个例子：</p><ol><li><p>我们必须在时间和质量之间进行权衡。<br>We have to trade off time and quality.</p></li><li><p>他们不想失去自由来换取安全感。<br>They don’t want to trade off their freedom for security.</p></li><li><p>在购物时，你需要平衡价格和品质。<br>When shopping, you need to balance price and quality.</p></li></ol><p>“Trade off” 是一个常用的习语，在英文中经常被使用。</p><h3 id="3-punctuation"><a href="#3-punctuation" class="headerlink" title="3. punctuation"></a>3. punctuation</h3><p>[英]· &#x2F;ˌpʌŋktʃuˈeɪʃn&#x2F; ; [美]· &#x2F;ˌpʌŋktʃuˈeɪʃən&#x2F;<br>[n.] 标点符号；标点<br>例句：</p><ol><li>Please pay attention to the punctuation in your essay. (请注意你的文章中的标点。)</li><li>The lack of punctuation made the sentence difficult to understand. (缺乏标点使得这个句子难以理解。)</li><li>In English, there are many different types of punctuation marks, such as commas, periods, and question marks. (在英语中，有许多不同类型的标点符号，比如逗号、句号和问号。)<br>词源：来自拉丁文 punctus（“刺穿”）</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第4周）</title>
      <link href="/2023/05/15/words(2024.4)/"/>
      <url>/2023/05/15/words(2024.4)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-facilitate"><a href="#1-facilitate" class="headerlink" title="1. facilitate"></a>1. facilitate</h3><p>[英]· &#x2F;fəˈsɪlɪteɪt&#x2F;<br>[v] 促进，使便利；帮助，使容易<br>例句：</p><ol><li>The new software will facilitate the data analysis process. (新软件将有助于数据分析过程。)</li><li>The government is taking measures to facilitate foreign investment. (政府正在采取措施促进外国投资。)</li><li>The teacher’s role is to facilitate learning, not just impart knowledge. (教师的角色是促进学习，而不仅仅是传授知识。)<br>词源：<br>来自拉丁语 “facilis”（容易的）</li></ol><h3 id="2-immaterial"><a href="#2-immaterial" class="headerlink" title="2. immaterial"></a>2. immaterial</h3><p>[英]· &#x2F;ˌɪməˈtɪərɪəl&#x2F; ; [美]· &#x2F;ˌɪməˈtɪriəl&#x2F;<br>[形容词] 1. 非物质的；无形的。2. 不重要的；无关紧要的。<br>例句：</p><ol><li>The soul is immaterial and immortal.<br>（灵魂是非物质和不朽的。）</li><li>These problems are immaterial to our discussion.<br>（这些问题对我们讨论来说不重要。）</li><li>The value of friendship is often considered as something immaterial but priceless.<br>（友谊价值常被认为是一种非物质但无价之宝。）<br>词源：<br>来自拉丁语 “immaterialis”，由 “in-“ 表示否定 + “materia” 表示“材料”构成，意为“非实体”。</li></ol><h3 id="3-successive"><a href="#3-successive" class="headerlink" title="3. successive"></a>3. successive</h3><p>[英]· &#x2F;səkˈsesɪv&#x2F;<br>[形] 连续的；接连的；一连串的</p><ol><li>The company has had three successive quarters of growth.<br>(该公司已经连续三个季度实现增长。)</li><li>He was elected for a second successive term.<br>(他当选了第二个任期。)</li><li>The team won the championship for the third successive year.<br>(这支队伍已经连续三年获得冠军。)<br>词源：来自拉丁语“successivus”，意为“接替的，相继而来的”。</li></ol><h3 id="4-warranty"><a href="#4-warranty" class="headerlink" title="4. warranty"></a>4. warranty</h3><p>[英]· &#x2F;ˈwɒrənti&#x2F;<br>[n.] 保证；担保；保修期<br>例句：</p><ol><li>The product comes with a one-year warranty. (这个产品附带一年的保修期。)</li><li>The company offers a lifetime warranty on their products. (该公司对其产品提供终身保修。)</li><li>I’m not sure if the warranty covers accidental damage. (我不确定这个保修是否包括意外损坏。)<br>词源：<br>来自中古英语“warantie”，意为“担保、承诺”。</li></ol><h3 id="5-quantification"><a href="#5-quantification" class="headerlink" title="5. quantification"></a>5. quantification</h3><p>[英]· &#x2F;ˌkwɒntɪfɪˈkeɪʃ(ə)n&#x2F;   [美]· &#x2F;ˌkwɑntəfəˈkeʃən&#x2F;<br>[n.] 量化，定量化<br>例句：</p><ol><li>The quantification of the data is necessary for statistical analysis. (数据的量化对于统计分析是必要的。)</li><li>This study aims to provide a method for the quantification of subjective experiences. (这项研究旨在提供一种主观体验的量化方法。)</li><li>Quantification can help us better understand complex phenomena and make more accurate predictions. (量化可以帮助我们更好地理解复杂现象并做出更准确的预测。)</li></ol><p>词源：来自拉丁语quantificare，由quantus（多少）和facere（做）组成，意为“使数量化”。</p><h3 id="6-denote"><a href="#6-denote" class="headerlink" title="6. denote"></a>6. denote</h3><p>[英]· &#x2F;dɪˈnəʊt&#x2F;<br>[v]表示，意味着；代表<br>例句：</p><ol><li>The symbol “P” denotes the set of prime numbers. (符号“P”表示质数集合。)</li><li>A red traffic light denotes that drivers must stop their vehicles. (红色交通灯表示驾驶员必须停车。)</li><li>His silence denoted his disapproval of the plan. (他的沉默表示他不赞成这个计划。)<br>词源：<br>来自拉丁语“denotare”，由“de-”（向下）和“notare”（标记）组成。</li></ol><h3 id="7-concatenation"><a href="#7-concatenation" class="headerlink" title="7. concatenation"></a>7. concatenation</h3><p>[英]· &#x2F;kɒnkætə’neɪʃ(ə)n&#x2F;  美· &#x2F;ˌkɑːŋkætəˈneɪʃn&#x2F;<br>[n.] 连接，串联；连锁<br>例句：</p><ol><li>The concatenation of these two strings produces a new one.<br>这两个字符串的连接产生了一个新的字符串。</li><li>The story is told through a concatenation of flashbacks and present-day scenes.<br>故事通过一系列闪回和现代场景来讲述。</li><li>This theory is based on the concatenation of several different ideas.<br>这个理论基于几种不同想法的结合。<br>词源：<br>来自拉丁语“concatenare”，意为“链接”。</li></ol><h3 id="8-outermost"><a href="#8-outermost" class="headerlink" title="8. outermost"></a>8. outermost</h3><p>[英]· &#x2F;ˈaʊtəməʊst&#x2F;<br>[形] 最外层的；最远的</p><ol><li>The outermost layer of the Earth is called the crust.<br>（地球最外层被称为地壳。）</li><li>The outermost planet in our solar system is Neptune.<br>（我们太阳系中最远的行星是海王星。）</li><li>She wore her warmest coat, with the fur-lined hood pulled up to protect even her outermost extremities from the cold wind.<br>（她穿着最暖和的大衣，把毛皮帽子拉起来，保护自己甚至连身体表面都不受寒风侵扰。）<br>词源：outer（外部）+ -most（表示极端程度）</li></ol><h3 id="9-contrived"><a href="#9-contrived" class="headerlink" title="9. contrived"></a>9. contrived</h3><p>[英]· &#x2F;kənˈtraɪvd&#x2F;<br>[形] 刻意的；不自然的；牵强附会的</p><ol><li>The plot of the movie felt contrived and unrealistic.<br>（这部电影的情节感觉是刻意编造和不真实的。）</li><li>His laughter sounded contrived, as if he was trying too hard to be funny.<br>（他的笑声听起来很做作，好像他在努力想要搞笑。）</li><li>The author’s use of symbolism in the novel seemed a bit contrived and forced.<br>（作者在小说中使用象征主义似乎有点勉强和牵强附会。）<br>词源：来自拉丁语“contrivere”，意为“发明、设计”。</li></ol><h3 id="10-obliged"><a href="#10-obliged" class="headerlink" title="10. obliged"></a>10. obliged</h3><p>[英]· &#x2F;əˈblaɪdʒd&#x2F;<br>[v.] 被迫；感激；有责任的<br>例句：</p><ol><li>I am obliged to attend the meeting. (我被迫参加这个会议。)</li><li>We are much obliged for your help. (我们非常感激你的帮助。)</li><li>He felt obliged to tell her the truth. (他觉得有责任告诉她真相。)<br>词源：<br>来自拉丁语“obligare”，意为“绑定，约束”。</li></ol><h3 id="11-sketchy"><a href="#11-sketchy" class="headerlink" title="11. sketchy"></a>11. sketchy</h3><p>[英]· &#x2F;ˈsketʃi&#x2F;<br>[形容词] 不可靠的；不明确的；草率的<br>例句：</p><ol><li>His story sounds a bit sketchy to me. (他讲述的故事对我来说有点含糊。)</li><li>The plan is still in its sketchy stage and needs more details. (计划仍处于初步阶段，需要更多细节。)</li><li>I don’t trust that guy, he seems really sketchy. (我不信任那个人，他看起来很可疑。)<br>词源：<br>来自于“sketch”的形容词形式，意为“粗略地画出”。</li></ol><h3 id="12-scatter"><a href="#12-scatter" class="headerlink" title="12. scatter"></a>12. scatter</h3><p>[英]· &#x2F;ˈskætə(r)&#x2F;<br>[v.] 分散；散开；撒播；使四处分散<br>例句：</p><ol><li>The wind scattered the leaves all over the yard. (风把树叶吹得到处都是。)</li><li>She scattered some seeds in the garden and hoped they would grow into flowers. (她在花园里撒了一些种子，希望它们能长成花。)</li><li>The protesters were quickly scattered by police officers with tear gas. (抗议者很快被使用催泪瓦斯的警察驱散了。)</li></ol><p>词源：来自中古英语的“scateren”，意为“打碎、粉碎”。</p><h3 id="13-fuse"><a href="#13-fuse" class="headerlink" title="13. fuse"></a>13. fuse</h3><p>[英]· &#x2F;fjuːz&#x2F;<br>[n.] 保险丝；引信；导火线<br>[v.] 熔合，熔接；使融化</p><p>例句：</p><ol><li>The fuse blew and the lights went out. (保险丝烧断了，灯就灭了。)</li><li>He lit the fuse and ran away quickly. (他点燃了导火线然后迅速逃跑。)</li><li>The two metals were fused together to form a new alloy. (这两种金属被熔合在一起形成了新的合金。)</li></ol><p>词源：来自拉丁语”fusus”，意为“流动”。</p><h3 id="14-barrage-·-x2F-bəˈrɑːʒ-x2F"><a href="#14-barrage-·-x2F-bəˈrɑːʒ-x2F" class="headerlink" title="14. barrage · &#x2F;bəˈrɑːʒ&#x2F;"></a>14. barrage · &#x2F;bəˈrɑːʒ&#x2F;</h3><p>在这个句子中，”barrage” 指的是一连串的攻击或抨击。整个句子的意思是 “面对一连串不寻常的令人不愉快的攻击”。这里并没有使用到习语。</p><p>以下是三个与该词相同含义的例子：</p><ol><li><p>The politician faced a barrage of criticism after his controversial statement.<br>（那位政治家因其有争议言论而遭到了批评浪潮。）</p></li><li><p>The company received a barrage of complaints from dissatisfied customers.<br>（公司收到了大量来自不满顾客的投诉。）</p></li><li><p>After the scandal broke out, the celebrity was hit with a barrage of negative press coverage.<br>（丑闻曝光后，那位名人遭受了大量负面媒体报道）</p></li></ol><h3 id="15-patent"><a href="#15-patent" class="headerlink" title="15. patent"></a>15. patent</h3><p>[英]· &#x2F;ˈpeɪtənt&#x2F;<br>[n.] 专利；专利权<br>[adj.] 有专利的；受专利保护的<br>[v.] 取得…的专利权</p><p>例句：</p><ol><li>He applied for a patent on his invention.<br>（他申请了他发明的专利。）</li><li>The company holds several patents on their technology.<br>（该公司在其技术上拥有几项专利。）</li><li>She was granted a patent for her unique design.<br>（她因其独特设计而被授予一项专利。）</li></ol><p>词源：来自拉丁语“patens”，意为“显然、公开”。</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本</title>
      <link href="/2023/05/15/words(week21)/"/>
      <url>/2023/05/15/words(week21)/</url>
      
        <content type="html"><![CDATA[<p>#1.  predicate<br>[英] · &#x2F;ˈprɛdɪkət&#x2F;<br>[n.] 谓语；断言<br>[v.] 断言；预示</p><p>例句：</p><ol><li>The predicate of this sentence is “is a teacher”. (这个句子的谓语是“是一名老师”。)</li><li>She predicates her success on hard work and determination. (她认为自己的成功取决于努力和决心。)</li><li>In logic, the predicate refers to the part of a proposition that expresses what is said about the subject. (在逻辑学中，谓词指表达主语所说内容的命题部分。)</li></ol><p>#2. sparingly<br>[英] · &#x2F;ˈspeərɪŋli&#x2F;<br>[副词] 节约地，保守地</p><p>例句：</p><ol><li>She uses water sparingly when she washes dishes. (她洗碗时很节水。)</li><li>He doles out praise sparingly, so when he compliments you, it really means something. (他不轻易夸赞别人，所以当他表扬你时，真的有意义。)</li><li>The company has been spending money more sparingly since the economic downturn began. (自从经济衰退开始以来，公司一直在更加节省开支。)</li></ol><p>#3. anticipate<br>[英] · &#x2F;ænˈtɪs.ɪ.peɪt&#x2F;  美 · &#x2F;ænˈtɪs.ə.peɪt&#x2F;<br>[v] 预期；预料；期望<br>例句：</p><ol><li>I anticipate a difficult exam tomorrow. (我预计明天会有一场难考试。)</li><li>The company is anticipating an increase in profits this year. (公司预计今年利润将增加。)</li><li>She anticipated his every move and was always one step ahead of him. (她能够预见他的每一个动作，总是比他先一步。)</li></ol><p>#4. mitigate<br>[英] · &#x2F;ˈmɪtɪɡeɪt&#x2F;  [美] · &#x2F;ˈmɪtəˌgeɪt&#x2F;<br>[v] 缓和，减轻；使缓和，使减轻<br>例句：</p><ol><li>The doctor prescribed some medicine to mitigate the pain. (医生开了一些药来缓解疼痛。)</li><li>We need to take measures to mitigate the impact of climate change. (我们需要采取措施来减轻气候变化的影响。)</li><li>The company implemented policies to mitigate risks in their investments. (公司实施了政策以降低其投资风险。)</li></ol><p>#5. replication<br>[英] · &#x2F;ˌrɛplɪˈkeɪʃən&#x2F;<br>[n.] 复制；复刻；重复<br>例句：</p><ol><li>DNA replication is a fundamental process in cell division. (DNA的复制是细胞分裂中的基本过程。)</li><li>The artist made a perfect replication of the famous painting. (艺术家完美地复制了那幅著名画作。)</li><li>The study aimed to investigate the replication of previous research findings. (这项研究旨在调查之前研究结果的重现性。)</li></ol><p>#6. magnitude<br>[英] · &#x2F;ˈmæɡnɪtjuːd&#x2F;  美 · &#x2F;ˈmæɡnətuːd&#x2F;<br>[n.] 大小；量级；重要性<br>[adj.] 巨大的，重要的<br>例句：</p><ol><li>The magnitude of the earthquake was measured at 7.0 on the Richter scale. (这次地震的大小被测定为里氏7.0级。)</li><li>We cannot underestimate the magnitude of this problem. (我们不能低估这个问题的重要性。)</li><li>The company has achieved a magnitude of success that no one could have predicted. (该公司已经取得了一个无人能够预料到的巨大成功。)</li></ol><p>#7. vice-versa<br>反之亦然</p><p>#8.  高出四个数量级<br>is 4 orders of magnitude higher than</p><p>#9. • In “I&#x2F;O bound” applications the cost exclusively depends on the number of accesses to secondary memory<br>在“I&#x2F;O bound”应用程序中，成本完全取决于对辅助存储器的访问次数。</p><p>在这个句子中，“exclusively”的意思是“仅仅、唯一地”。它强调了成本只与对辅助存储器的访问次数有关，而与其他因素无关。 </p><p>举例来说，如果一个人说他只喜欢吃巧克力蛋糕，那么他就是“exclusively”喜欢吃巧克力蛋糕。 </p><p>其他类似的表达方式包括：</p><ul><li>solely: 仅仅、单独地</li><li>purely: 纯粹地、完全地</li></ul><p>例如：她纯粹是为了钱才去做那份工作。（She did the job purely for money.）</p><p>#10. make limited use of<br>#11. distinctive<br>[英] · &#x2F;dɪˈstɪŋktɪv&#x2F;<br>[形容词] 独特的；有特色的；与众不同的<br>例句：</p><ol><li>Her distinctive voice made her stand out in the crowd. (她独特的声音使她在人群中脱颖而出。)</li><li>The building’s architecture is quite distinctive and easily recognizable. (这座建筑物的建筑风格非常独特，很容易辨认。)</li><li>The company has a distinctive approach to marketing that sets it apart from its competitors. (该公司具有一种独特的营销方式，使其与竞争对手区别开来。)</li></ol><p>#12. Obsolete<br>[英] · &#x2F;ˌɒbsəˈliːt&#x2F;  美 · &#x2F;ˌɑːbsəˈliːt&#x2F;<br>[形] 过时的；废弃的；淘汰的<br>例句：</p><ol><li>The old computer system is now obsolete and needs to be replaced. (这个旧电脑系统现在已经过时了，需要被替换。)</li><li>This law has become obsolete and no longer serves its intended purpose. (这项法律已经过时了，不再起到原本预期的作用。)</li><li>Many traditional skills have become obsolete in the age of automation and technology. (在自动化和技术发展的时代，许多传统技能已经变得过时了。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.15 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第5周)</title>
      <link href="/2023/05/15/words(2024.5)/"/>
      <url>/2023/05/15/words(2024.5)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-procrastination"><a href="#1-procrastination" class="headerlink" title="1. procrastination"></a>1. procrastination</h3><p>[英]· &#x2F;prə(ʊ)ˌkrastɪˈneɪʃ(ə)n&#x2F;<br>[n.] 拖延，耽搁<br>例句：</p><ol><li>His procrastination cost him the opportunity to apply for the scholarship. (他的拖延导致错过了申请奖学金的机会。)</li><li>Procrastination is a common problem among students, especially when it comes to studying for exams. (拖延是学生们普遍存在的问题，尤其是在备考期间。)</li><li>I need to stop my procrastination and start working on this project right away. (我需要停止拖延，立刻开始着手这个项目。)<br>词源：来自拉丁语procrastinare（推迟），由pro-（向前）和cras（明天）组成</li></ol><h3 id="2-freelancing"><a href="#2-freelancing" class="headerlink" title="2. freelancing"></a>2. freelancing</h3><p>[英]· &#x2F;ˈfriː.lɑːns.ɪŋ&#x2F; 或 &#x2F;ˈfriː.læns.ɪŋ&#x2F;<br>[n.] 自由职业；自由职业者的工作状态<br>例句：</p><ol><li>She’s been freelancing as a graphic designer for five years.<br>（她已经做了五年的自由职业平面设计师。）</li><li>Freelancing can be both rewarding and challenging.<br>（自由职业既有回报，也有挑战。）</li><li>Many people choose to go into freelancing because of the flexibility it offers.<br>（许多人选择从事自由职业是因为它提供了灵活性。）<br>词源：</li><li>I became restless because I wanted to do more and learn more. So I did some freelancing.<br>free + lance （指中世纪时期一种雇佣兵士）+ -ing</li></ol><h3 id="3-tedious"><a href="#3-tedious" class="headerlink" title="3. tedious"></a>3. tedious</h3><p>[英]· &#x2F;ˈtiːdiəs&#x2F;<br>[形] 乏味的；单调的；冗长而沉闷的<br>例句：</p><ol><li>The work was tedious and boring.<br>（这项工作很乏味，令人厌烦。）</li><li>I find his lectures rather tedious.<br>（我觉得他的讲座相当枯燥。）</li><li>It’s a long and tedious process to fill out all these forms.<br>（填写所有这些表格是一个漫长而乏味的过程。）<br>词源：<br>来自拉丁语“taedium”，意为“厌倦”。</li></ol><h3 id="4-hustle"><a href="#4-hustle" class="headerlink" title="4. hustle"></a>4. hustle</h3><p>[英]· &#x2F;ˈhʌsl&#x2F;<br>[n.] 忙碌；奔忙；骗局<br>[v.] 1. 催促，催逼 2. 拼命干（尤指为了生计）3. （以欺诈手段）赚钱<br>例句：</p><ol><li>She’s always on the hustle, trying to make a quick buck.<br>（她总是在拼命地工作，试图赚点快钱。）</li><li>He hustled his way into the music industry by networking with influential people.<br>（他通过与有影响力的人建立联系，在音乐行业中闯出一片天。）</li><li>The street vendor was accused of hustling tourists with overpriced souvenirs.<br>（这个街头小贩被指控用高价纪念品欺骗游客。）<br>词源：<br>可能来自荷兰语”hutselen”，意思是“搅动、混合”。也有可能来源于美国黑人俚语”hussel”或”huzzle”，意思是“偷窃、欺骗”。</li></ol><h3 id="5-persuasion"><a href="#5-persuasion" class="headerlink" title="5. persuasion"></a>5. persuasion</h3><p>[英]· &#x2F;pəˈsweɪʒən&#x2F;<br>[n.] 说服，劝说；信念，信仰<br>例句：</p><ol><li>She used all her powers of persuasion to convince him to come with us. (她动用了所有的说服力来说服他和我们一起去。)</li><li>He was a man of strong political persuasions. (他是一个有着强烈政治信仰的人。)</li><li>The advertisement was designed to be a tool of persuasion for potential customers. (这则广告旨在成为潜在客户的一种说服工具。)<br>词源：<br>来自拉丁语“persuasio”，意为“convincing, persuading”。</li></ol><h3 id="6-spawn"><a href="#6-spawn" class="headerlink" title="6. spawn"></a>6. spawn</h3><p>[英]· &#x2F;spɔːn&#x2F;<br>[v.] 产卵；孵化；生成；引起<br>[n.] （鱼、青蛙等的）卵，（昆虫的）幼虫群<br>例句：</p><ol><li>The salmon spawn in the river every year. (每年鲑鱼在河里产卵。)</li><li>The frog laid its spawn in the pond. (那只青蛙在池塘里下了它的卵。)</li><li>The new technology has spawned many innovative products. (新技术催生了许多创新产品。)<br>词源：<br>来自古英语 spǣnan，意为“孵化”。</li></ol><h3 id="7-agnostic"><a href="#7-agnostic" class="headerlink" title="7. agnostic"></a>7. agnostic</h3><p>[英]· &#x2F;æɡˈnɒstɪk&#x2F;<br>[n.] 不可知论者；不确定论者<br>例句：</p><ol><li>He is an agnostic and doesn’t believe in any religion. (他是一个不可知论者，不信任任何宗教。)</li><li>She has an agnostic attitude towards the existence of God. (她对上帝的存在持怀疑态度。)</li><li>The scientist’s approach to the problem was purely agnostic, refusing to make any assumptions without evidence. (科学家处理问题的方法完全是以不可知论为基础，拒绝在没有证据的情况下做出任何假设。)</li></ol><p>词源：来自希腊语 a-（否定）+ gnōsis（认识、知道）。</p><h3 id="8-bundle"><a href="#8-bundle" class="headerlink" title="8. bundle"></a>8. bundle</h3><p>[英]· &#x2F;ˈbʌndl&#x2F;<br>[n.] 捆，束；一批，一群<br>[v.] 把…捆成一束；匆忙地处理或收拾（某事物）<br>双语例句：</p><ol><li>He carried a bundle of firewood on his back. (他背着一捆柴火。)</li><li>She bundled up the dirty clothes and took them to the laundry room. (她把脏衣服捆起来带到了洗衣房。)</li><li>The company offers a bundle deal for internet, phone and cable services. (该公司提供互联网、电话和有线电视服务的打包优惠。)<br>词源：来自中古英语“bundel”，意为“绑在一起的东西”。</li></ol><h3 id="9-enumeration"><a href="#9-enumeration" class="headerlink" title="9. enumeration"></a>9. enumeration</h3><p>[英]· &#x2F;ɪˌnjuːməˈreɪʃ(ə)n&#x2F;  或  [美]· &#x2F;ɪˌnumə’reʃən&#x2F;<br>[n.] 枚举，列举；计数；清点<br>例句：</p><ol><li>The enumeration of all possible outcomes took several hours. (所有可能结果的枚举花费了几个小时。)</li><li>The census is an enumeration of the population in a given area. (人口普查是对特定地区人口的计数。)</li><li>In programming, enumeration is often used to define a set of named constants with related values. (在编程中，枚举常常用于定义一组具有相关值的命名常量。)<br>词源：<br>来自拉丁语“enumeratio”，意为“清点、列出”。</li></ol><h3 id="10-probe"><a href="#10-probe" class="headerlink" title="10. probe"></a>10. probe</h3><p>[英]· &#x2F;prəʊb&#x2F;<br>[n.] 探针；探测器；调查<br>[v.] 探究，探测；审问<br>例句：</p><ol><li>The spacecraft carries a probe to study the planet’s atmosphere. (这艘宇宙飞船携带了一个探测器来研究行星的大气层。)</li><li>Police are probing allegations of corruption within the company. (警方正在调查公司内部腐败的指控。)</li><li>Scientists used a probe to measure the temperature inside the volcano. (科学家使用了一个探针来测量火山内部的温度。)<br>词源：<br>from Latin probare “to test, prove”</li></ol><h3 id="11-skeleton"><a href="#11-skeleton" class="headerlink" title="11. skeleton"></a>11. skeleton</h3><p>[英]· &#x2F;ˈskelɪtn&#x2F;<br>[n.] 骨架；骨架模型；梗概，提纲<br>例句：</p><ol><li>The skeleton of the building was all that remained after the fire. (大火后建筑的骨架是唯一留下的东西。)</li><li>She created a skeleton for her novel before beginning to write it. (她在开始写小说之前先为其创建了一个提纲。)</li><li>The museum had a complete dinosaur skeleton on display. (博物馆展出了完整的恐龙骨架。)<br>词源：<br>来自希腊语 “skeletos”，意思是“干瘦的”或“剥去肉体的”，引申为“骨头”。</li></ol><h3 id="12-tactic"><a href="#12-tactic" class="headerlink" title="12. tactic"></a>12. tactic</h3><p>[英]· &#x2F;ˈtæktɪk&#x2F;<br>[n.] 战术；策略<br>例句：</p><ol><li>The coach changed his tactics in the second half of the game. (教练在比赛的下半场改变了他的战术。)</li><li>They employed different tactics to win the negotiation. (他们采用不同的策略来赢得谈判。)</li><li>The company’s marketing tactics have been very successful. (该公司的营销策略非常成功。)<br>词源：<br>来自希腊语 “τακτικός”，意为 “有序地、安排好地”。</li></ol><h3 id="13-vulnerable"><a href="#13-vulnerable" class="headerlink" title="13. vulnerable"></a>13. vulnerable</h3><p>[英]· &#x2F;ˈvʌlnərəbl&#x2F;  美· &#x2F;ˈvʌlnərəbl&#x2F;<br>[形容词] 易受伤害的；易受攻击的；脆弱的；有弱点的<br>例句：</p><ol><li>She felt very vulnerable standing there alone at night. (她觉得自己在夜晚独自站着很容易遭到攻击。)</li><li>The company’s computer system is highly vulnerable to hacking attacks. (公司的计算机系统极易遭到黑客攻击。)</li><li>Children are particularly vulnerable to the effects of pollution. (儿童特别容易受到污染影响。)<br>词源：<br>来自拉丁语“vulnerabilis”，意为“可伤害的”。</li></ol><h3 id="14-concede"><a href="#14-concede" class="headerlink" title="14. concede"></a>14. concede</h3><p>[英]· &#x2F;kənˈsiːd&#x2F;<br>[v] 承认，让步；退让，屈服<br>例句：</p><ol><li>He finally conceded defeat and resigned from the competition. (他最终承认失败并退出了比赛。)</li><li>The company had to concede that their product was not as popular as they had hoped. (公司不得不承认他们的产品没有像他们希望的那样受欢迎。)</li><li>After a long argument, she reluctantly conceded to his demands. (经过长时间的争论，她勉强同意了他的要求。)<br>词源：<br>来自拉丁语“concedere”，意为“放弃、交出”。</li></ol><h3 id="15-intimidate"><a href="#15-intimidate" class="headerlink" title="15. intimidate"></a>15. intimidate</h3><p>[英]· &#x2F;ɪnˈtɪmɪdeɪt&#x2F;<br>[v]威吓，恐吓；使胆怯<br>例句：</p><ol><li>The bully tried to intimidate the smaller kids on the playground. (那个欺负人的孩子试图在操场上威吓小一点的孩子。)</li><li>She refused to be intimidated by his aggressive behavior. (她拒绝被他的攻击性行为所恐吓。)</li><li>The boss used intimidation tactics to control his employees. (老板使用威胁手段来控制员工。)<br>词源：<br>来自拉丁语“intimidare”，意为“使害怕”。</li></ol><h3 id="16-greed"><a href="#16-greed" class="headerlink" title="16. greed"></a>16. greed</h3><p>[英]· &#x2F;ɡriːd&#x2F;<br>[n.] 贪婪，贪心<br>例句：</p><ol><li>His greed for money led him to commit fraud. (他的贪欲让他犯了诈骗罪。)</li><li>The company’s greed resulted in environmental damage. (公司的贪婪导致环境受到损害。)</li><li>She was disgusted by his greed and lack of empathy. (她对他的贪心和缺乏同情心感到厌恶。)</li><li>Universal Music Group has put their own greed above the interests of their artists and songwriters<br>词源：<br>来自中古英语“grēd”，意为“渴望、渴求”。</li></ol><h3 id="17-traction"><a href="#17-traction" class="headerlink" title="17. traction"></a>17. traction</h3><p>[英]· &#x2F;ˈtrækʃən&#x2F;<br>[n.] 牵引；牵引力；摩擦力<br>例句：</p><ol><li>The train’s wheels slipped on the icy tracks, so the engine had to use more traction to move forward. (火车的轮子在冰上打滑，所以机车必须使用更多的牵引力才能前进。)</li><li>The athlete wore special shoes with good traction for running on wet surfaces. (这位运动员穿着有良好抓地力的特制鞋子，在湿滑表面跑步。)</li><li>The tractor’s tires dug into the muddy ground and provided enough traction to pull the heavy load up the hill. (拖拉机的轮胎陷入泥泞的土地中，并提供足够的牵引力将重载物拉上山。)<br>词源：<br>来自拉丁语“tractio”，意为“拖、拉”。</li></ol><h3 id="18-revenue"><a href="#18-revenue" class="headerlink" title="18. revenue"></a>18. revenue</h3><p>[英]· &#x2F;ˈrev.ə.njuː&#x2F;  美· &#x2F;ˈrev.ə.nu&#x2F;<br>[n.] 收入；税收<br>例句：</p><ol><li>The company’s revenue has increased by 20% this year. (公司的收入今年增长了20%。)</li><li>The government relies heavily on tax revenue to fund public services. (政府严重依赖税收来资助公共服务。)</li><li>Advertising is a major source of revenue for many websites and social media platforms. (广告是许多网站和社交媒体平台的主要收入来源。)<br>词源：<br>来自拉丁语 “revenire”，意为“返回”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(2024年第7周）</title>
      <link href="/2023/05/15/words(2024.7)/"/>
      <url>/2023/05/15/words(2024.7)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-resonant"><a href="#1-resonant" class="headerlink" title="1. resonant"></a>1. resonant</h3><p>[英]· &#x2F;ˈrezənənt&#x2F;   [美]· &#x2F;ˈrɛzənənt&#x2F;<br>[形容词] 共鸣的；洪亮的；回响的<br>例句：</p><ol><li>The room was filled with the resonant sound of his voice. (房间里充满了他洪亮的声音。)</li><li>The guitar produced a deep, resonant tone. (吉他发出深沉、共鸣的音调。)</li><li>Her words had a resonant effect on the audience. (她的话对观众产生了共鸣效应。)<br>词源：<br>来自拉丁语“resonare”，意为“回响”。</li></ol><h3 id="2-oscillation"><a href="#2-oscillation" class="headerlink" title="2. oscillation"></a>2. oscillation</h3><p>[英]· &#x2F;ˌɒs.əˈleɪ.ʃən&#x2F;  美· &#x2F;ˌɑː.səˈleɪ.ʃən&#x2F;<br>[n.] 振荡，摆动；波动；振幅变化<br>例句：</p><ol><li>The pendulum’s oscillation was measured with a stopwatch.<br>（用秒表测量了钟摆的振荡。）</li><li>The stock market experienced wild oscillations in the past week.<br>（股市在过去一周经历了疯狂的波动。）</li><li>The sound of the guitar came from the oscillation of its strings.<br>（吉他声音来自于弦的振动。）<br>词源：<br>Latin “oscillatio” (swinging)</li></ol><h3 id="3-outset"><a href="#3-outset" class="headerlink" title="3. outset"></a>3. outset</h3><p>[英]· &#x2F;ˈaʊtset&#x2F;<br>[n.] 开始，开端<br>例句：</p><ol><li>At the outset, I want to thank everyone for coming today. (一开始，我想感谢大家今天的到来。)</li><li>From the very outset, we knew this project would be challenging. (从一开始，我们就知道这个项目会很具有挑战性。)</li><li>The company has made significant progress since its outset in 2010. (自2010年创立以来，该公司已经取得了显著进展。)<br>词源：<br>from out- + set, meaning “place where something is set down,” hence “beginning.”</li></ol><h3 id="4-pervasive"><a href="#4-pervasive" class="headerlink" title="4. pervasive"></a>4. pervasive</h3><p>[英]· &#x2F;pəˈveɪsɪv&#x2F;<br>[形] 普遍存在的；无处不在的；渗透性强的<br>例句：</p><ol><li>The pervasive influence of social media is undeniable. (社交媒体的普及影响是不可否认的。)</li><li>The smell of cigarette smoke was pervasive throughout the room. (烟味弥漫了整个房间。)</li><li>His music has had a pervasive impact on popular culture. (他的音乐对流行文化产生了广泛影响。)<br>词源：<br>来自拉丁语 pervasus，意为“穿透、渗透”。</li></ol><h3 id="5-utterance"><a href="#5-utterance" class="headerlink" title="5. utterance"></a>5. utterance</h3><p>[英]· &#x2F;ˈʌtərəns&#x2F;<br>[n.] 表达，话语，言论<br>例句：</p><ol><li>She made an utterance that surprised everyone in the room. (她说了一句让房间里所有人都惊讶的话。)</li><li>The politician’s utterances were carefully crafted to appeal to his supporters. (政治家的言辞经过精心设计，以迎合他的支持者。)</li><li>The child’s first utterances were simple sounds like “ma” and “da”. (孩子最初发出的声音是像“妈”和“爸”这样简单的音节。)<br>词源：<br>来自拉丁语“utterare”，意为“表达”。</li></ol><h3 id="6-spam"><a href="#6-spam" class="headerlink" title="6. spam"></a>6. spam</h3><p>[英]· &#x2F;spæm&#x2F;<br>[n.] 邮件垃圾、广告信息；(食品)午餐肉<br>例句：</p><ol><li>I hate receiving spam emails every day. (我讨厌每天收到垃圾邮件。)</li><li>The company was fined for sending out spam messages to customers. (该公司因向客户发送垃圾短信而被罚款。)</li><li>Spam is a popular ingredient in Hawaiian cuisine. (午餐肉是夏威夷菜肴中的一种流行配料。)<br>词源：<br>可能来自于蒙提·派森（Monty Python）喜剧节目《The SPAM Skit》中对午餐肉的调侃，后来逐渐演变为指代电子邮件中的广告信息。</li></ol><h3 id="7-conspiracy"><a href="#7-conspiracy" class="headerlink" title="7. conspiracy"></a>7. conspiracy</h3><p>[英]· &#x2F;kənˈspɪrəsi&#x2F;<br>[n.] 阴谋；共谋<br>例句：</p><ol><li>The group was accused of conspiracy to commit fraud. (这个团体被指控策划欺诈行为。)</li><li>They were arrested for conspiracy to overthrow the government. (他们因策划推翻政府而被逮捕。)</li><li>The novel is about a conspiracy to assassinate the president. (这本小说讲述了一场暗杀总统的阴谋。)<br>词源：<br>from Latin conspirare “to agree, unite”</li></ol><h3 id="8-anonymisation"><a href="#8-anonymisation" class="headerlink" title="8. anonymisation"></a>8. anonymisation</h3><p>[英]· &#x2F;əˌnɒnɪmaɪˈzeɪʃ(ə)n&#x2F;<br>[n.] 匿名化，去除个人身份信息<br>例句：</p><ol><li>The anonymisation of personal data is an important step in protecting privacy.<br>（个人数据的匿名化是保护隐私的重要步骤。）</li><li>Anonymisation can be achieved through various methods, such as encryption and masking.<br>（可以通过各种方法实现匿名化，如加密和掩码。）</li><li>The company has implemented strict policies for the anonymisation of customer data.<br>（该公司已经实施了严格的政策来对客户数据进行匿名处理。）<br>词源：<br>anonymize + -ation</li></ol><h3 id="9-synthetic"><a href="#9-synthetic" class="headerlink" title="9. synthetic"></a>9. synthetic</h3><p>[英]· &#x2F;sɪnˈθetɪk&#x2F;  美· &#x2F;sənˈθɛtɪk&#x2F;<br>[形容词] 合成的；人造的；综合性的<br>例句：</p><ol><li>Synthetic fabrics are often cheaper than natural ones.<br>（合成纤维通常比天然纤维便宜。）</li><li>The company produces synthetic rubber for use in tires.<br>（该公司生产用于轮胎的合成橡胶。）</li><li>She was wearing a bright pink dress made of synthetic material.<br>（她穿着一件由合成材料制作而成的亮粉色连衣裙。）<br>词源：<br>来自希腊语“sunthetikos”，意为“组装、安排”。</li></ol><h3 id="10-veracity"><a href="#10-veracity" class="headerlink" title="10. veracity"></a>10. veracity</h3><p>[英]· &#x2F;vəˈræsəti&#x2F;<br>[n.] 真实性；诚实<br>例句：</p><ol><li>His veracity was questioned after he was caught lying about his qualifications. (他的诚实度在他被发现谎称自己的资历后受到了质疑。)</li><li>The journalist’s commitment to veracity in reporting the news is commendable. (这位记者在报道新闻时对真相的执着值得赞扬。)</li><li>The company prides itself on the veracity of its product claims. (该公司以其产品声明的真实性为傲。)</li></ol><p>词源：来自拉丁语“veracitas”，意为“真实”。</p><h3 id="11-intervene"><a href="#11-intervene" class="headerlink" title="11. intervene"></a>11. intervene</h3><p>[英]· &#x2F;ˌɪntəˈviːn&#x2F;   [美]· &#x2F;ˌɪntərˈvin&#x2F;<br>[v] 干涉，介入；调停<br>例句：</p><ol><li>The government decided to intervene in the dispute between the two companies. (政府决定干预这两家公司之间的争端。)</li><li>She intervened to stop the argument from escalating. (她出面阻止了争吵升级。)</li><li>The teacher had to intervene when the students started fighting in class. (学生们在课堂上打架时，老师不得不出面干预。)<br>词源：<br>来自拉丁语“intervenire”，意为“介入”。</li></ol><h3 id="12-interpolation"><a href="#12-interpolation" class="headerlink" title="12. interpolation"></a>12. interpolation</h3><p>[英]· &#x2F;ɪnˌtə:pəˈleɪʃ(ə)n&#x2F; 或 &#x2F;ˌɪntəpəˈleɪʃ(ə)n&#x2F;<br>[n.] 插值；内插法<br>[例句]</p><ol><li>Interpolation is a common technique used in numerical analysis and data processing.<br>（插值是数值分析和数据处理中常用的技术。）</li><li>The function uses linear interpolation to estimate the values between known points.<br>（该函数使用线性插值来估计已知点之间的值。）</li><li>In image processing, interpolation can be used to increase the resolution of an image.<br>（在图像处理中，可以使用插值来增加图像的分辨率。）<br>词源：<br>来自拉丁语“interpolare”，意为“篡改、伪造”。</li></ol><h3 id="13-seamless"><a href="#13-seamless" class="headerlink" title="13. seamless"></a>13. seamless</h3><p>[英]· &#x2F;ˈsiːmləs&#x2F;   [美]· &#x2F;ˈsimləs&#x2F;<br>[形容词] 无缝的；流畅的；自然的<br>例句：</p><ol><li>The transition between the two scenes was seamless. (两个场景之间的过渡是无缝的。)</li><li>The integration of technology into our daily lives has become almost seamless. (技术融入我们日常生活几乎已经变得毫不费力了。)</li><li>The company prides itself on providing a seamless customer experience from start to finish. (该公司以从开始到结束提供无缝客户体验而自豪。)<br>词源：<br>seam（接缝）+ -less（没有…的）→ 没有接缝的 → 无缝隙、流畅自然</li></ol><h3 id="14-halve"><a href="#14-halve" class="headerlink" title="14. halve"></a>14. halve</h3><p>[英]· &#x2F;hæv&#x2F;<br>[v] 一分为二，减半<br>例句：</p><ol><li>He halved the cake and gave me a piece. (他把蛋糕切成两半给了我。)</li><li>The company plans to halve its workforce by next year. (公司计划在明年将其员工数量减少一半。)</li><li>She decided to halve her sugar intake for health reasons. (出于健康原因，她决定将自己的糖摄入量减少一半。)<br>词源：<br>来自中古英语“halfen”，意为“分开、割断”。</li></ol><h3 id="15-populate"><a href="#15-populate" class="headerlink" title="15. populate"></a>15. populate</h3><p>[英]· &#x2F;ˈpɒpjʊleɪt&#x2F;   [美]· &#x2F;ˈpɑːpjəleɪt&#x2F;<br>[v.] 居住于；移民到；填充，占据<br>例句：</p><ol><li>The island is populated by a small community of fishermen. (这个岛上居住着一小群渔民。)</li><li>The area was originally populated by Native Americans. (这个地区最初是由美洲原住民居住的。)</li><li>The city’s downtown is densely populated with high-rise buildings. (市中心有高楼大厦密集地分布。)<br>词源：<br>来自拉丁语 “populatus”，意为 “inhabited” 或 “full”.</li></ol><h3 id="16-refracted"><a href="#16-refracted" class="headerlink" title="16. refracted"></a>16. refracted</h3><p>[英]· &#x2F;rɪˈfræktɪd&#x2F;<br>[v.] 折射，使折射<br>例句：</p><ol><li>The light is refracted as it passes through the water. (光线在穿过水时被折射。)</li><li>The lens refracts the light to focus it on the retina. (镜头将光线折射到视网膜上以聚焦。)</li><li>The prism can be used to refract white light into its component colors. (棱镜可以用来将白光折射成其组成颜色。)<br>词源：<br>re-（向后）+ Latin frangere（打破）→ re-fract（弯曲、断裂），再加-ed形成过去分词</li></ol><h3 id="17-antenna"><a href="#17-antenna" class="headerlink" title="17. antenna"></a>17. antenna</h3><p>[英]· &#x2F;ænˈtenə&#x2F;  或  [美]· &#x2F;ænˈtɛnə&#x2F;<br>[n.] 天线；触角；（昆虫的）感觉器官<br>例句：</p><ol><li>The TV set needs a new antenna.<br>（这台电视需要一个新天线。）</li><li>The butterfly’s antennae are very sensitive to smells.<br>（蝴蝶的触角对气味非常敏感。）</li><li>Some species of ants use their antennae to communicate with each other.<br>（一些种类的蚂蚁用它们的触角相互交流。）<br>词源：<br>来自拉丁语 antemna，意为“帆杠”。</li></ol><h3 id="18-compensate"><a href="#18-compensate" class="headerlink" title="18. compensate"></a>18. compensate</h3><p>[英]· &#x2F;ˈkɒmpənseɪt&#x2F;   [美]· &#x2F;ˈkɑːmpənseɪt&#x2F;<br>[v] 赔偿；补偿；抵消<br>例句：</p><ol><li>The company will compensate the workers for their overtime work.<br>（公司将为工人的加班工作进行赔偿。）</li><li>He tried to compensate for his mistake by working harder.<br>（他试图通过更努力地工作来弥补自己的错误。）</li><li>The increase in salary is intended to compensate for inflation.<br>（薪资增长旨在弥补通货膨胀带来的影响。）<br>词源：<br>源于拉丁语“compensare”，意为“称量，平衡”。</li></ol><h3 id="19-dime"><a href="#19-dime" class="headerlink" title="19. dime"></a>19. dime</h3><p>[英]· &#x2F;daɪm&#x2F;<br>[n.] 1. 十分硬币（美国和加拿大的一种十分之一美元或加元的硬币）<br>     2. 很小的东西；微不足道的事物<br>双语例句：</p><ol><li>I don’t have a dime on me right now.<br> 我现在身上没有任何零钱。</li><li>It won’t cost you a dime to come in and look around.<br> 进来看看是不需要花费你任何钱的。</li><li>He wouldn’t give her the time of day, let alone a dime.<br> 他连理都不肯理她，更别说给她什么好处了。</li></ol><p>词源：来自法语“dîme”，意为“十分之一”。<br>be worth a dime 不值一文</p><h3 id="20-integrate"><a href="#20-integrate" class="headerlink" title="20. integrate"></a>20. integrate</h3><p>[英]· &#x2F;ˈɪntɪɡreɪt&#x2F;<br>[v] 整合；使成为整体；使完整<br>例句：</p><ol><li>We need to integrate these different systems into a single platform. (我们需要将这些不同的系统整合到一个平台上。)</li><li>The company aims to integrate sustainability into all aspects of its operations. (该公司旨在将可持续性融入其运营的各个方面。)</li><li>It’s important to integrate new employees into the team culture as quickly as possible. (尽快将新员工融入团队文化非常重要。)<br>词源：<br>from Latin integratus, past participle of integrare “make whole,” from integer “whole”</li></ol><h3 id="21-differential"><a href="#21-differential" class="headerlink" title="21. differential"></a>21. differential</h3><p>[英]· &#x2F;ˌdɪfəˈrenʃl&#x2F; ; [美]· &#x2F;ˌdɪfərˈɛnʃ(ə)l&#x2F;<br>[n.] 差异的；差别的；不同的；微分的<br>[adj.] 微分的，差别的<br>例句：</p><ol><li>The differential between the two products is their quality.<br>（这两种产品之间的区别在于它们的质量。）</li><li>The differential diagnosis of these two diseases can be difficult.<br>（这两种疾病之间进行鉴别诊断可能很困难。）</li><li>This car has a limited-slip differential, which improves traction on slippery surfaces.<br>（这辆车配备了有限滑差速器，可以提高在湿滑路面上行驶时牵引力。）<br>词源：<br>from Latin differentialis “of or pertaining to difference,” from differentia (see difference).</li></ol><h3 id="22-kinematic"><a href="#22-kinematic" class="headerlink" title="22. kinematic"></a>22. kinematic</h3><p>[英]· &#x2F;ˌkɪnəˈmætɪk&#x2F;<br>[形] 运动学的；运动论的<br>例句：</p><ol><li>Kinematic analysis is used to study the motion of objects without considering the forces that cause the motion.<br>（运动学分析用于研究物体的运动，而不考虑引起这种运动的力。）</li><li>The kinematic equations can be used to calculate an object’s position, velocity, and acceleration at any given time during its motion.<br>（运动方程可以用来计算物体在其运动过程中任何给定时间点上的位置、速度和加速度。）</li><li>In robotics, kinematics is concerned with studying how robots move and interact with their environment.<br>（在机器人技术中，运动学涉及研究机器人如何移动并与环境互动。）<br>词源：来自希腊语“kinēma”（意为“移动”）和“-ic”后缀。</li></ol><h3 id="23-punctuation"><a href="#23-punctuation" class="headerlink" title="23. punctuation"></a>23. punctuation</h3><p>[英]· &#x2F;ˌpʌŋktʃuˈeɪʃn&#x2F; ; [美]· &#x2F;ˌpʌŋktʃuˈeɪʃən&#x2F;<br>[n.] 标点符号；标点<br>例句：</p><ol><li>Please pay attention to the punctuation in your essay. (请注意你的文章中的标点。)</li><li>The lack of punctuation made the sentence difficult to understand. (缺乏标点使得这个句子难以理解。)</li><li>In English, there are many different types of punctuation marks, such as commas, periods, and question marks. (在英语中，有许多不同类型的标点符号，比如逗号、句号和问号。)<br>词源：<br>来自拉丁文 punctus（“刺穿”），表示用小符号或记号来分割文字或音节。</li></ol><h3 id="24-bureaucracy"><a href="#24-bureaucracy" class="headerlink" title="24. bureaucracy"></a>24. bureaucracy</h3><p>[英]· &#x2F;bjʊəˈrɒkrəsi&#x2F;<br>[n.] 官僚主义；官僚机构<br>例句：</p><ol><li>The company’s bureaucracy slowed down the decision-making process. (公司的官僚机构拖慢了决策过程。)</li><li>He was frustrated by the endless bureaucracy involved in getting a visa. (他对申请签证所涉及的无休止的官僚主义感到沮丧。)</li><li>The government is trying to reduce bureaucracy and make services more efficient for citizens. (政府正在努力减少官僚主义，使公民服务更加高效。)<br>词源：<br>From French bureaucratie, from bureau ‘office’ + -cratie ‘-cracy’.</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exe1</title>
      <link href="/2023/05/07/Exe1/"/>
      <url>/2023/05/07/Exe1/</url>
      
        <content type="html"><![CDATA[<h1 id="Performance-Amdhal’s-Law-Pipeline"><a href="#Performance-Amdhal’s-Law-Pipeline" class="headerlink" title="Performance, Amdhal’s Law, Pipeline"></a>Performance, Amdhal’s Law, Pipeline</h1><ol><li>为什么MIPS架构五级流水线的指令译码阶段和写回阶段可以被分成两部分？</li></ol><p>在MIPS架构中，指令译码阶段的指令解码和操作数寻址可以在同一个阶段中实现。这是因为在MIPS架构中，指令的格式是固定的，指令中的寄存器编号和偏移量等操作数地址相关信息都在指令的特定位置上。</p><p>在指令译码阶段，指令解码和操作数寻址这两个小部分的执行顺序是有先后关系的。</p><p>具体来说，指令解码必须在操作数寻址之前执行，因为指令解码需要识别指令的类型和需要访问的寄存器和存储器，这些信息是操作数寻址所必需的。如果操作数寻址在指令解码之前执行，那么CPU就无法确定需要访问的寄存器和存储器，无法进行有效的操作数寻址。</p><p>因此，在指令译码阶段，指令解码和操作数寻址必须按照指定的顺序依次执行。通常情况下，指令解码和操作数寻址可以在同一个时钟周期内完成，因此它们被视为一个阶段，但是在实际的设计中，也可以将它们分别实现为两个子阶段，以便更好地控制CPU的时序和性能。</p><ol start="2"><li>MIPS有哪些指令</li></ol><p>MIPS架构定义了多种指令，包括算术指令、逻辑指令、移位指令、条件分支指令、跳转指令、访存指令等等。以下是MIPS指令的一些常见分类：</p><p>算术指令：包括加、减、乘、除等指令。例如：add、addi、addu、addiu、sub、mult、div等。</p><p>逻辑指令：包括与、或、异或、非等指令。例如：and、or、xor、nor等。</p><p>移位指令：包括左移、右移等指令。例如：sll、srl、sra等。</p><p>条件分支指令：包括条件分支和条件跳转等指令。例如：beq、bne、blez、bgtz等。</p><p>跳转指令：包括无条件跳转指令和子程序调用指令等。例如：j、jal、jr等。</p><p>访存指令：包括从内存中读取数据和将数据写入内存等指令。例如：lw、lb、sw、sb等。</p><p>此外，MIPS还支持一些特殊的指令，如异常处理指令、协处理器指令等，这些指令可以用于特殊的计算需求，例如浮点运算等。</p><ol start="3"><li>lw和sw指令</li></ol><p>lw和sw指令是MIPS架构中的访存指令，用于从内存中读取数据和将数据写入内存。它们的具体功能和用法如下：</p><ul><li><p>lw指令：从内存中读取一个字（32位数据），并将其存储到指定的寄存器中。lw指令的语法如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lw $rt, offset($rs)</span><br></pre></td></tr></table></figure><p> 其中，$rt是目标寄存器，offset是偏移量，$rs是基地址寄存器。偏移量表示目标地址相对于基地址的偏移量，可以是一个立即数或者另一个寄存器的值。</p><p> 执行过程如下：首先，CPU将基地址寄存器的值加上偏移量，计算出目标地址；然后，CPU从目标地址中读取一个字（32位数据），并将其存储到目标寄存器中。如果读取过程中发生异常，如地址错误或者访问权限错误等，CPU将产生一个异常，需要进行异常处理。</p></li><li><p>sw指令：将一个字（32位数据）存储到指定的内存地址中。sw指令的语法如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sw $rt, offset($rs)</span><br></pre></td></tr></table></figure><p> 其中，$rt是源寄存器，offset是偏移量，$rs是基地址寄存器。偏移量表示目标地址相对于基地址的偏移量，可以是一个立即数或者另一个寄存器的值。</p><p> 执行过程如下：首先，CPU将基地址寄存器的值加上偏移量，计算出目标地址；然后，CPU将源寄存器中的值存储到目标地址中。如果存储过程中发生异常，如地址错误或者访问权限错误等，CPU将产生一个异常，需要进行异常处理。</p></li></ul><p>需要注意的是，偏移量可以是一个有符号的16位整数，因此，lw和sw指令最大可以访问的内存范围是从基地址加上-32768到基地址加上32767的区间。此外，MIPS是一个大端字节序的架构，因此，读取和存储的字节顺序是从高位到低位的。</p><ol start="4"><li>在MIPS处理器中，Forwarding path怎么工作？</li></ol><p>在MIPS处理器中，Forwarding path被广泛用于解决数据冒险（Data Hazard）的问题，提高指令的执行效率。具体地，Forwarding path通常在以下两个阶段被使用：</p><ul><li>执行阶段</li></ul><p>在执行阶段，Forwarding path被用于解决数据冒险。当一个指令需要使用另一个指令的执行结果时，通常会等待前一条指令的结果被写入寄存器后才能继续执行后续指令。但是，如果前一条指令的结果可以直接传递给后续指令，就可以通过Forwarding path来避免等待寄存器的写入。</p><p>在MIPS处理器中，执行阶段的指令通常会产生数据结果，并<strong>将其存储在执行阶段的寄存器中</strong>。如果后续指令需要使用这些结果，则需要在<strong>执行阶段的输出阶段中使用Forwarding path</strong>将数据结果传递给后续指令。</p><ul><li>访存阶段</li></ul><p>在MIPS处理器中，数据访问指令，如lw和sw指令，通常需要在访存阶段中执行。这些指令涉及访问内存或外部设备，因此需要在内存或外部设备中读取或写入数据。</p><p>在访存阶段，如果后续指令需要使用lw指令加载的数据，则需要使用Forwarding path将数据传递给后续指令。类似地，如果后续指令需要将数据存储到内存中，则需要在执行sw指令时使用Forwarding path，以便将数据直接传递给存储器，<strong>而不是等待其被写入寄存器。</strong></p><p>总之，Forwarding path是MIPS处理器中解决数据冒险的重要技术，可以在不需要等待寄存器写入的情况下加速指令的执行，并提高CPU的效率。</p><ol start="5"><li>具体讲一下指令译码阶段要完成哪些工作</li></ol><p>在MIPS五级流水线中，指令译码阶段是第二个阶段，也被称为ID（Instruction Decode）阶段。在这个阶段，处理器会执行以下操作：</p><p>从指令寄存器中取出当前指令，然后将其解码，确定指令类型和操作数。<br>读取寄存器文件中的操作数寄存器的值，并将其存储在指令中的寄存器操作数字段中。<br><em>执行分支和跳转指令的目标地址计算</em>。对于分支指令，需要判断分支是否应该被执行，即判断条件码寄存器中的标志位是否符合指令中的条件码要求；对于跳转指令，需要计算跳转目标地址，并将其存储在指令中的目标地址字段中。<br>为执行阶段准备数据，将指令中的操作数传递给执行阶段，以便执行阶段可以进行操作。<br>总之，<strong>指令译码阶段是将指令翻译成处理器可以理解的指令格式，并将操作数准备好</strong>，以便执行阶段能够使用它们。在这个阶段，处理器还会进行分支和跳转指令的处理，以便指令流能够正确地执行。</p><ol start="6"><li>sw的指令译码阶段要做什么</li></ol><p>在MIPS五级流水线中，sw指令是一种存储数据的指令，它将一个寄存器的值存储到内存中。在指令译码阶段，sw指令需要完成以下工作：</p><ul><li>解码指令，确定指令类型和操作数。对于sw指令，指令类型为存储型指令，其中操作数包括要存储的数据和内存地址。</li><li>读取源寄存器中的数据，即要存储的数据。这需要访问寄存器文件，并从指定的寄存器中读取数据。</li><li>计算内存地址，这需要访问寄存器文件，并从指定的寄存器中读取基地址，然后将偏移量添加到基地址上得到内存地址。偏移量存储在指令的立即数字段中。</li><li>将存储数据和内存地址传递给执行阶段，以便执行阶段能够将数据存储到内存中。<br>需要注意的是，由于存储操作需要访问内存，因此存储操作可能会发生数据冒险问题。如果前面的指令已经修改了要存储的数据，那么该值将不会正确地存储到内存中。为了解决这个问题，MIPS处理器使用了一些技术，如前向传递和暂停插入，以确保数据在正确的时间传递到存储阶段。</li></ul><ol start="7"><li>MIPS写回阶段要完成哪些工作</li></ol><p>在MIPS五级流水线中，写回阶段是最后一个阶段，也是整个指令执行过程的最后一步。在写回阶段，需要完成以下工作：</p><ul><li>读取执行阶段中计算得出的结果，即要写回的数据。这些数据可能来自寄存器或内存，具体取决于执行的指令类型。</li><li>将数据写回到寄存器文件中。要写回的寄存器编号和数据都来自执行阶段。写回操作通常是一个简单的操作，它只需要将数据写入寄存器文件中的指定位置即可。</li><li>如果存在异常，将异常信号传递到控制器中，以便控制器可以采取适当的措施，如中断执行流程或跳转到异常处理程序。</li></ul><ol start="8"><li>写回阶段不是要把数据写回内存吗</li></ol><p>在MIPS架构中，数据存储在寄存器文件或内存中。写回阶段主要是将计算得出的结果写回到<strong>寄存器文件</strong>中，而不是写回到内存中。写回到内存的指令是存储器访问指令，例如sw指令，它们的写回操作在执行阶段中完成。在执行阶段中，存储器访问指令需要计算内存地址、读取要存储的数据，并将它们写回到内存中。当这些操作完成后，执行阶段就结束了，接下来就是写回阶段。在写回阶段，执行阶段计算得出的结果会被写回到寄存器文件中，以便后续的指令可以使用这些结果。所以，写回阶段主要是负责将数据写回到寄存器文件中，而不是写回到内存中。</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec3</title>
      <link href="/2023/05/07/Lec3/"/>
      <url>/2023/05/07/Lec3/</url>
      
        <content type="html"><![CDATA[<h1 id="Branch-Hazards-and-Static-Branch-Prediction-Techniques"><a href="#Branch-Hazards-and-Static-Branch-Prediction-Techniques" class="headerlink" title="Branch Hazards and Static Branch Prediction Techniques"></a>Branch Hazards and Static Branch Prediction Techniques</h1><h2 id="Three-classes-of-hazards"><a href="#Three-classes-of-hazards" class="headerlink" title="Three classes of hazards"></a>Three classes of hazards</h2><p>现在来看Control Hazards</p><ol><li>Branch Target Address指向else地址</li><li>在EXE阶段末尾算出BTA<br> 在ME结段末更新PC，此时才能取回指令</li><li>Taken&#x2F;Not taken<br>If the branch is <strong>not taken</strong>, the pipeline execution is OK<br>If the branch is <strong>taken</strong>, it is necessary to flush the next <strong>3</strong> instructions<br>in the pipeline and fetched the lw instruction at the branch target<br>address (L1)</li><li><strong>Branch Stalls without Forwarding</strong> 等待3个cycle<br><strong>Branch Stalls with Forwarding</strong> 等待2个cycle</li><li>MIPS processor <code>compares registers</code>, <code>computes branch target address</code> and <code>updates PC</code> during <strong>ID stage</strong>. 只需要stall一个cycle</li></ol><h2 id="Branch-Prediction-Techniques"><a href="#Branch-Prediction-Techniques" class="headerlink" title="Branch Prediction Techniques"></a>Branch Prediction Techniques</h2><h3 id="Static-Branch-Prediction-Techniques-offline"><a href="#Static-Branch-Prediction-Techniques-offline" class="headerlink" title="Static Branch Prediction Techniques(offline)"></a>Static Branch Prediction Techniques(offline)</h3><p>Branch Always Not Taken (Predicted-Not-Taken)<br>Branch Always Taken (Predicted-Taken)<br>Backward Taken Forward Not Taken (BTFNT)<br>Profile-Driven Prediction</p><p><strong>Delayed Branch</strong> : </p><ol><li>From before</li><li>From target</li><li>From fall-through</li></ol><h3 id="Dynamic-Branch-Prediction-Techniques"><a href="#Dynamic-Branch-Prediction-Techniques" class="headerlink" title="Dynamic Branch Prediction Techniques"></a>Dynamic Branch Prediction Techniques</h3><p><strong>Branch Outcome and Branch Target Address are ready at the end of EX statge(3th stage). Conditional branches are solved when PC is updated at the end of the ME stage(4th Stage).The branch decision is taken during the MEM stage(Taken or Not Taken)</strong></p><hr><ol><li>beq和bne指令具体的结构是什么样的</li></ol><p>beq和bne指令的具体结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beq $rs, $rt, offset</span><br><span class="line">bne $rs, $rt, offset</span><br></pre></td></tr></table></figure><p>其中，$rs和$rt是两个要比较的寄存器，offset是要跳转的相对地址。</p><p>这两个指令的作用分别是比较$rs和$rt的值是否相等或不相等，如果相等或不相等则跳转到当前PC值加上offset后的地址。</p><p>例如，如果要比较寄存器$4和$5的值是否相等，如果相等则跳转到当前PC加上8个字节（即2条指令）后的地址，可以使用以下beq指令：</p><p>beq $4, $5, 8</p><p>如果要比较寄存器$6和$7的值是否不相等，如果不相等则跳转到当前PC加上16个字节（即4条指令）后的地址，可以使用以下bne指令：</p><p>bne $6, $7, 16</p><p>这两个指令在程序控制流程中应用广泛，可以用于实现if-else语句、while循环等程序控制结构。</p><ol start="2"><li>beq指令在MIPS处理器中的执行需要经过多个阶段。下面是beq指令在不同阶段的具体工作：</li></ol><ul><li><p>指令获取阶段（Instruction Fetch，IF）：<br>在这个阶段，处理器从指令存储器（Instruction Memory，IM）中读取指令。对于beq指令，处理器将PC（程序计数器）加上4得到当前指令的地址，然后从IM中读取该地址的指令。</p></li><li><p>指令译码阶段（Instruction Decode，ID）：<br>在这个阶段，处理器对指令进行解码，确定需要比较的两个寄存器（$rs和$rt）和跳转的偏移量（offset）。处理器从寄存器堆中读取$rs和$rt的值，将这两个值进行比较。</p></li><li><p>执行阶段（Execute，EX）：<br>在这个阶段，处理器执行比较操作。如果$rs和$rt的值相等，则将PC加上偏移量（offset）后的地址作为下一条指令的地址；否则，继续执行下一条指令。注意，在这个阶段可能会出现数据冒险，需要使用forwarding path来解决。</p></li><li><p>访存阶段（Memory Access，MEM）：<br>在这个阶段，处理器不需要进行任何操作。beq指令不涉及内存的读写操作，因此这个阶段可以省略。</p></li><li><p>写回阶段（Write Back，WB）：<br>在这个阶段，处理器不需要进行任何操作。beq指令不需要将结果写回到寄存器堆中，因此这个阶段也可以省略。</p></li></ul><p>需要注意的是，当beq指令的条件成立时，跳转目标是PC加上偏移量后的地址。因此，偏移量应该是一个相对地址，可以是一个负数。跳转目标的地址计算应该在执行阶段完成，同时需要注意指令地址应该按4字节对齐，因此偏移量需要乘以4。</p><ol start="3"><li>beq指令的执行阶段可以分成两个小阶段吗</li></ol><p>beq指令的执行阶段可以分成两个小阶段：执行和分支判断。具体来说：</p><ul><li><p>执行阶段：将第一个操作数和第二个操作数相减，得到运算结果。这个阶段与其他指令的执行阶段类似，不需要特别的处理。</p></li><li><p>分支判断阶段：在执行阶段得到的运算结果为0时，表示两个操作数相等，此时需要跳转。因此，在分支判断阶段，需要判断执行阶段得到的运算结果是否为0，如果是，就需要进行跳转。为了实现这个功能，需要在<strong>执行阶段</strong>将跳转地址保存在流水线寄存器中，并在<strong>分支判断阶段从流水线寄存器中取出跳转地址并判断是否需要跳转</strong>。如果需要跳转，就将取出的跳转地址送到PC（程序计数器）中，更新下一条指令的地址。如果不需要跳转，就继续执行下一条指令。</p></li></ul><ol start="4"><li>EXE2的PPT第19页为什么i5要阻塞一个周期？<br>为了等t0<br>那为什么$t2不需要等WB结束呢？<br>第17页为什么MEM&#x2F;ID是灰色的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/04/23/leetcode(%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)/"/>
      <url>/2023/04/23/leetcode(%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">self, nums: [<span class="built_in">int</span>]</span>) -&gt; [<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span> - i):</span><br><span class="line">        <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:</span><br><span class="line">          nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">          flag = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span>  <span class="title function_">sortArray</span>(<span class="params">self, nums: [<span class="built_in">int</span>]</span>) -&gt; [<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> self.bubbleSort(nums)</span><br></pre></td></tr></table></figure><ol><li>破解闯关密码</li></ol>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表和链表</title>
      <link href="/2023/04/23/leetcode(%E9%93%BE%E8%A1%A8)/"/>
      <url>/2023/04/23/leetcode(%E9%93%BE%E8%A1%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="快慢指针，双指针"><a href="#快慢指针，双指针" class="headerlink" title="快慢指针，双指针"></a>快慢指针，双指针</h1><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="1-哈希表"><a href="#1-哈希表" class="headerlink" title="1. 哈希表"></a>1. 哈希表</h2><p>C++: </p><ul><li>UnOrderedMap UnSortedMap &#x2F;&#x2F;Key-Value<br><a href="https://blog.csdn.net/ai_faker/article/details/117714959">unordered_map用法及成员方法</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">m[<span class="string">&#x27;I&#x27;</span>] = <span class="number">1</span>; <span class="comment">//m[key] = value;</span></span><br></pre></td></tr></table></figure></li><li>UnorderedSet UnSortedSet &#x2F;&#x2F;Key</li></ul><p>Java:<br>HashSet<Integer>        &#x2F;&#x2F;Key<br>HashMap&lt;Integer,String&gt; &#x2F;&#x2F;Key-Value<br>增改: put 删: remove 查: containsKey(Key), get(Key)<br>时间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Character, Integer&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">m.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">ans = ans - m.get(s.charAt(i));</span><br></pre></td></tr></table></figure><h2 id="2-有序表"><a href="#2-有序表" class="headerlink" title="2. 有序表"></a>2. 有序表</h2><p>C++:</p><ul><li>OrderedSet &#x2F;&#x2F;Key</li><li>OrderedMap &#x2F;&#x2F;Key-Value<br>Java:<br>TreeMap&lt;Integer,String&gt; &#x2F;&#x2F;Key-Value</li></ul><p>put:增改<br>get:查key对应的value<br>containsKey:<br>firstKey():<br>lastKey():<br>floorKey():<br>ceilingKey():<br>remove()</p><p>时间复杂度: O(logn)</p><h2 id="3-单链表"><a href="#3-单链表" class="headerlink" title="3. 单链表"></a>3. 单链表</h2><p>class Node<V>{<br>    V value;<br>    Node next;<br>}</p><h2 id="4-双链表"><a href="#4-双链表" class="headerlink" title="4. 双链表"></a>4. 双链表</h2><p>class Node<V>{<br>    V value;<br>    Node next;<br>    Node previous;<br>}</p><h1 id="刷题心得"><a href="#刷题心得" class="headerlink" title="刷题心得"></a>刷题心得</h1><ol><li>&#x2F;&#x2F; 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListNode *dummyNode = new ListNode(-1);</span><br><span class="line">dummyNode-&gt;next = head;</span><br></pre></td></tr></table></figure></li></ol><p><strong>单链表和双链表结构都只需要给定一个头部节点head，就可以找到剩下的所有的节点</strong></p><p>待练：</p><ol><li><p>怎么反转单链表和双链表，时间复杂度为O(n), 空间复杂度为O(1)</p></li><li><p>打印两个有序链表的公共部分(两个指针，谁小谁移动，相等时先打印再共同移动)</p></li><li><p>判断一个链表是否是回文结构。<br>笔试做法：把链表存到栈里，遍历链表，弹出栈，看两者是否匹配。如果链表长度为N，时间复杂度为O(N)，空间复杂度为O(1)<br>稍微省一点的做法：只把右半部分放到栈里，然后比对——怎么找到右半部分？用快慢指针。快指针走两步，慢指针走一步。慢指针根据要求的不同，可能会有细微的差别。要把这个写熟。<br>面试的时候一定要考虑空间复杂度。</p></li><li><p>将单向链表按某值划分成左边小，中间相等，右边大的形式。<br>小于区，等于区，大于区。<br>头指针，尾指针</p></li><li><p>复制含有随即指针节点的链表<br>如果开辟额外空间：哈希表<br>不用哈希表：克隆每个节点，挂在对应节点后面，先不管随机指针，一对一对遍历，设置</p></li><li><p>两个单链表相交的一系列问题<br>相交：共用结点<br>先判断有没有环，找到第一个入环结点，<br>用一个hashset<br>用快慢指针：快慢指针一定能相遇，快指针不会转两圈以上<br>相遇后快指针回到开头，慢指针不变，快慢指针都一次走一步，它们一定在环入口相遇</p></li></ol><ul><li>两个链表都无环：相交后面的结点都是公共结点。遍历两个链表，找到 end1 和 length1，end2 和 length2<br>– end1 &#x3D;&#x3D; end2: 长链表先走差值步，两个链表一起走，找到第一个公用结点<br>– end1 !&#x3D; end2: 不相交</li><li>两个链表有一个有环一个无环：不可能相交</li><li>两个链表都有环：<br>– 各自独立<br>– 入环结点是一个<br>– 入环结点不是同一个</li></ul><hr><h2 id="1-翻转单链表："><a href="#1-翻转单链表：" class="headerlink" title="1. 翻转单链表："></a>1. 翻转单链表：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">            ListNode *prev = <span class="literal">NULL</span>;</span><br><span class="line">            ListNode * curr = head;</span><br><span class="line">            <span class="keyword">while</span>(curr != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                head = curr;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">                head-&gt;next = prev;</span><br><span class="line">                prev = head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-翻转链表的某个区间"><a href="#2-翻转链表的某个区间" class="headerlink" title="2. 翻转链表的某个区间"></a>2. 翻转链表的某个区间</h2><p>为什么最后输出dummyNode-&gt;next?<br>在函数中需要创建一个虚拟头结点dummyNode，最后返回dummyNode-&gt;next即可返回反转后的链表的头节点</p><h2 id="2-翻转双链表"><a href="#2-翻转双链表" class="headerlink" title="2. 翻转双链表"></a>2. 翻转双链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>&#x2F;**</p><ul><li>Definition for singly-linked list.</li><li>public class ListNode {</li><li><pre><code>int val;</code></pre></li><li><pre><code>ListNode next;</code></pre></li><li><pre><code>ListNode() &#123;&#125;</code></pre></li><li><pre><code>ListNode(int val) &#123; this.val = val; &#125;</code></pre></li><li><pre><code>ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</code></pre></li><li>}<br> *&#x2F;</li></ul><ul><li>链表怎么遍历</li><li>怎么解决位数不同的问题。我好像知道了，从低位开始加。一开始没考虑到位数比较小的数后期指向空指针的问题，可能需要分类讨论。如果l1没空，l2空了，</li></ul><ol><li>链表要用 -&gt;</li><li>链表定义：ListNode *l3&#x3D;l1,*l4&#x3D;l2;</li><li>链表和数组不同，可以在函数体内定义新的指针并返回</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        int index=0;</span><br><span class="line">        int sum=0;</span><br><span class="line"></span><br><span class="line">        ListNode *l3=l1,*l4=l2;//遍历指针</span><br><span class="line">        ListNode *l5=l1;//用来存放准备输出的指针</span><br><span class="line"></span><br><span class="line">        while (l3!=NULL &amp;&amp; l4!=NULL) //l3和l4不为空，两数相加，存入l1中</span><br><span class="line">        &#123;</span><br><span class="line">            sum=l3-&gt;val+l4-&gt;val+index;</span><br><span class="line">            index=0;//想加完以后要把index即使设置成0</span><br><span class="line">            if(sum&lt;10) </span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125;//这个用取余</span><br><span class="line">            l1=l1-&gt;next;//准备l1的下一个结点赋值</span><br><span class="line">            l3=l3-&gt;next;//遍历l3和l4</span><br><span class="line">            l4=l4-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，肯定有一个链表已经被遍历完了(也就是说，l3或l4==NULL)</span><br><span class="line">        while(l3==NULL&amp;&amp;l4!=NULL)//l4没有遍历完，说明l2比l1长，说明l3和l1被遍历完了，说明我们需要添加新的节点给l3和l1</span><br><span class="line">        &#123; </span><br><span class="line">            sum=l4-&gt;val+index;</span><br><span class="line">            index=0; </span><br><span class="line">                    </span><br><span class="line">            if(sum&lt;10) l1-&gt;val=sum;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125; </span><br><span class="line">            ListNode *newNode1=new ListNode();</span><br><span class="line">            l1-&gt;next=l4-&gt;next=newNode1;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">            l4=l4-&gt;next; </span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，l4也被遍历完了，l4==NULL</span><br><span class="line">        while(l3!=NULL&amp;&amp;l4==NULL)//l3没有被遍历完</span><br><span class="line">        &#123;</span><br><span class="line">            sum=l3-&gt;val+index;</span><br><span class="line">            index=0;</span><br><span class="line"></span><br><span class="line">            if(sum&lt;10) </span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum;</span><br><span class="line">                //index=0;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125;  </span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">            l3=l3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，l3和l4肯定都遍历完了</span><br><span class="line">        if(index)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode *newNode2=new ListNode(1);</span><br><span class="line">            l1-&gt;next=newNode2;</span><br><span class="line">        &#125;</span><br><span class="line">        return l5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="comment">//从头结点开始遍历，正好从低位开始加</span></span><br><span class="line">        <span class="comment">//两个链表的长度可能不一样</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> sum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l3</span> <span class="operator">=</span> l1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l4</span> <span class="operator">=</span> l2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l3!=<span class="literal">null</span> || l4!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l3 != <span class="literal">null</span> &amp;&amp; l4 != <span class="literal">null</span>)&#123;</span><br><span class="line">                sum.val = (l3.val + l4.val + carry) % <span class="number">10</span>;</span><br><span class="line">                carry = (l3.val + l4.val + carry) / <span class="number">10</span>;</span><br><span class="line">                l3 = l3.next;</span><br><span class="line">                l4 = l4.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l3 != <span class="literal">null</span>) &#123;</span><br><span class="line">                sum.val = (l3.val + carry) % <span class="number">10</span>;</span><br><span class="line">                carry = (l3.val + carry) / <span class="number">10</span>;</span><br><span class="line">                l3 = l3.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l4 != <span class="literal">null</span>) &#123;</span><br><span class="line">                sum.val = (l4.val + carry) % <span class="number">10</span>;</span><br><span class="line">                carry = (l4.val + carry) / <span class="number">10</span>;</span><br><span class="line">                l4 = l4.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">            sum.next = node;</span><br><span class="line">            sum = sum.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>)&#123;</span><br><span class="line">            sum.val = <span class="number">1</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="literal">null</span>; <span class="comment">//这样只是sum这个指针指向了null，但尾结点的后继结点还是0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码依旧有问题。既然不能直接删除sum，那就需要遍历，最后一个结点值为0，删除它。</p><h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h1><p>现在要找到那个结点，最简单的办法是遍历两遍，<del>第一遍先把它放在数组里</del>，然后得到那个结点在链表中的位置，然后再次遍历，并删除相应的结点<br>不用放到数组里，只需要记个结点数就行。<br>需要考虑的特殊情况(不能使用ptr-&gt;next &#x3D; ptr1-&gt;next)</p><ol><li>空链表或单结点链表，直接返回NULL</li><li>如果要删除的是结点正好是尾结点，这种情况下ptr-&gt;next &#x3D; ptr1-&gt;next仍然适用</li><li>如果要删除的是头结点，这种情况就找不到ptr(待删除结点的前一个结点)，直接返回head-&gt;next。</li><li>这种算法的复杂度很差，这种算法里要遍历两遍链表，有没有只需要遍历一遍链表的方法？The challenge of the problem is to find a sollution in only one pass.<br>有没有更高效的算法？有，用快慢指针。</li></ol><h1 id="1721-Swapping-Nodes-in-a-Linked-List"><a href="#1721-Swapping-Nodes-in-a-Linked-List" class="headerlink" title="1721. Swapping Nodes in a Linked List"></a>1721. Swapping Nodes in a Linked List</h1><p>怎么使用双指针解决问题？<br>前两个是不是也可以并入循环体？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个用快慢指针好像很好</span></span><br><span class="line">        <span class="comment">//慢指针指向下一组，快指针指向慢指针</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *fast = head-&gt;next;</span><br><span class="line">        ListNode *slow = head;</span><br><span class="line">        slow-&gt;next = fast-&gt;next;</span><br><span class="line">        fast-&gt;next = slow;</span><br><span class="line">        head = fast;</span><br><span class="line">        ListNode *temp = slow;</span><br><span class="line">        <span class="keyword">while</span>(slow-&gt;next != <span class="literal">NULL</span> &amp;&amp; slow-&gt;next-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="comment">//向后遍历，temp指针指向的结点要指向第一个结点</span></span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = slow-&gt;next;</span><br><span class="line">            <span class="comment">//换位置，换完位置以后要让temp指针指向第二个节点</span></span><br><span class="line">            slow-&gt;next = fast-&gt;next;</span><br><span class="line">            fast-&gt;next = slow;</span><br><span class="line">            temp-&gt;next = fast;</span><br><span class="line">            temp = slow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>**这种做法不简洁，可以考虑用一个dummyNode，就可以把前两个并入循环体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* dummyNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">        ListNode* prev = dummyNode;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curr &amp;&amp; curr-&gt;next)&#123;</span><br><span class="line">            prev-&gt;next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev-&gt;next-&gt;next;</span><br><span class="line">            prev-&gt;next-&gt;next = curr;</span><br><span class="line"></span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表(Linked list) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本</title>
      <link href="/2023/04/19/new%20words/"/>
      <url>/2023/04/19/new%20words/</url>
      
        <content type="html"><![CDATA[<h1 id="agnostic"><a href="#agnostic" class="headerlink" title="agnostic"></a>agnostic</h1><p>[英] · &#x2F;æɡˈnɒstɪk&#x2F;</p><p>[n.] 不可知论者，不可知论的</p><p>例句：</p><ul><li><p>He was raised in a religious family, but now considers himself an agnostic. (他在一个宗教家庭中长大，但现在认为自己是个不可知论者。)</p></li><li><p>The debate between the atheist and the agnostic became quite heated. (无神论者和不可知论者之间的辩论变得非常激烈。)</p></li><li><p>She has always been curious about different religions, but remains agnostic herself. (她一直对不同的宗教很好奇，但自己仍然是个不可知论者。)</p></li></ul><h1 id="improve-and-squeeze-the-performance"><a href="#improve-and-squeeze-the-performance" class="headerlink" title="improve and squeeze the performance"></a>improve and squeeze the performance</h1><p>“squeeze” 在这个句子中的意思是“挤压”，指通过紧缩或压缩来提高表现。整个句子的意思是“改善并挤压表现”。</p><p>这里的 “squeeze” 可以理解为一种习语，表示尽可能地利用资源或时间来达到最佳效果。类似的英文例句有：</p><ol><li>We need to squeeze every last drop of performance out of our team.</li></ol><p>（我们需要从团队中挤出每一滴性能）</p><ol start="2"><li>The coach is trying to squeeze more speed out of the athlete’s running technique.</li></ol><p>（教练正在试图从运动员跑步技术中挤出更多速度）</p><ol start="3"><li>I’m going to have to squeeze in a workout before my meeting this afternoon.</li></ol><p>（我得在今天下午开会前抽空做一次锻炼）</p><h1 id="go-beyond"><a href="#go-beyond" class="headerlink" title="go beyond"></a>go beyond</h1><p>Go beyond” 在这个句子中是一个动词短语，意思是“超越、突破”。整个句子的意思是“我们如何能够超越现有的限制或者达到更高的目标”。</p><p>举几个相同意思的例句：</p><ol><li><p>We need to go beyond our comfort zone if we want to achieve success.（如果想要成功，我们需要突破自己舒适区）</p></li><li><p>The company is trying to go beyond its competitors by offering better services.（公司正在通过提供更好的服务来超越竞争对手）</p></li><li><p>To truly understand a culture, you must go beyond the surface level and delve deeper into its history and traditions.（要真正理解一种文化，你必须深入了解其历史和传统）</p></li></ol><h1 id="arguerarchy"><a href="#arguerarchy" class="headerlink" title="arguerarchy"></a>arguerarchy</h1><p>[英语] · &#x2F;ˌɑːɡjuˈærki&#x2F;</p><p>[n.] 争论统治，以争辩为基础的领导方式</p><p>例句：</p><ol><li><p>The company’s decision-making process is often slowed down by the arguerarchy among its top executives. (公司的决策过程常常被高管之间的争论所拖延。)</p></li><li><p>Some people believe that democracy is just another form of arguerarchy, where those who are loudest and most persuasive get their way. (有些人认为民主只是另一种形式的争论统治，在这里最响亮和最有说服力的人能够得到他们想要的。)</p></li><li><p>In an arguerarchy, it can be difficult for new ideas or perspectives to gain traction if they don’t fit with the prevailing opinions of those in power. (在一个以争辩为基础的领导方式中，如果新思想或观点与当权者普遍持有的意见不符，它们很难获得支持。)</p></li></ol><h1 id="coarse-grained-multithreading"><a href="#coarse-grained-multithreading" class="headerlink" title="coarse grained multithreading"></a>coarse grained multithreading</h1><p>“coarse”的意思是“粗糙的”或者“粗略的”。整个句子指的是一种多线程技术，其中任务被分成较大、较粗糙的块来执行。</p><p>类似含义的tl例句有：</p><ul><li><p>Fine-grained multithreading（细粒度多线程）</p></li><li><p>Coarse-grained parallelism（粗略并行）</p></li></ul><p>简单解释一下这些例句：Fine-grained multithreading 指将任务划分为更小、更细致的块以实现多线程；Coarse-grained parallelism 则指使用相对较大和不太详细地定义任务来实现并行处理。</p><h1 id="salvation"><a href="#salvation" class="headerlink" title="salvation"></a>salvation</h1><p>[英] &#x2F;sælˈveɪʃən&#x2F;<br>[n.] 拯救，救赎<br>例句：</p><ol><li>The church teaches that salvation comes through faith in Jesus Christ. (教会认为拯救来自于对耶稣基督的信仰。)</li><li>He felt a sense of salvation after confessing his sins to the priest. (向神父忏悔后，他感到一种解脱感。)</li><li>Many people seek salvation from their problems through meditation or prayer. (许多人通过冥想或祷告寻求摆脱问题的拯救。)</li></ol><h1 id="utilization"><a href="#utilization" class="headerlink" title="utilization"></a>utilization</h1><p>[英] · &#x2F;juːtɪlaɪ’zeɪʃ(ə)n&#x2F;</p><p>[n.] 利用，使用</p><p>例句：</p><ol><li><p>The company aims to increase the utilization of its resources. (公司旨在提高其资源的利用率。)</p></li><li><p>Proper utilization of time is essential for success. (合理利用时间对于成功至关重要。)</p></li><li><p>The government is promoting the utilization of renewable energy sources. (政府正在推广可再生能源的利用。)</p></li></ol><h1 id="furious"><a href="#furious" class="headerlink" title="furious"></a>furious</h1><p>[英语] · &#x2F; ˈfjʊəriəs &#x2F;</p><p>[形容词] 狂怒的；暴怒的；猛烈的</p><p>例句：</p><ol><li>She was absolutely furious when she found out.</li></ol><p>（她发现后非常愤怒。）</p><ol start="2"><li>The fans were furious at the team’s performance.</li></ol><p>（球迷对队伍表现感到非常愤怒。）</p><ol start="3"><li>He slammed the door in a furious rage.</li></ol><p>（他勃然大怒，砰地一声关上了门。）</p><h1 id="taxonomy"><a href="#taxonomy" class="headerlink" title="taxonomy"></a>taxonomy</h1><p>[英] &#x2F;tækˈsɒnəmi&#x2F;</p><p>[n.] 分类学</p><p>例句：</p><ol><li><p>The taxonomy of this species is still under debate. (这个物种的分类学仍在争议中。)</p></li><li><p>She specializes in the taxonomy of marine organisms. (她专攻海洋生物的分类学。)</p></li><li><p>Taxonomy is an important field in biology and ecology. (分类学是生物和生态学中重要的领域。)</p></li></ol><h1 id="decrement"><a href="#decrement" class="headerlink" title="decrement"></a>decrement</h1><p>[英] &#x2F;ˈdɛkrɪmənt&#x2F;<br>[n.] 递减，减少<br>[v.] 减少，逐渐变小</p><p>例句：</p><ol><li><p>The company’s profits have been in a state of decrement for the past year. (公司的利润在过去一年里一直处于下降状态。)</p></li><li><p>We need to decrement our expenses if we want to save money. (如果我们想要省钱，就需要减少开支。)</p></li><li><p>The population of this town has been decrementing steadily over the years. (这个城镇的人口数量多年来一直在稳步下降。</p></li></ol><h1 id="elaborate"><a href="#elaborate" class="headerlink" title="elaborate"></a>elaborate</h1><p>[英] &#x2F;ɪˈlæbərət&#x2F;<br>[动词] 详细阐述；精心制作；详尽阐明<br>[形容词] 精心制作的；复杂的<br>例句：</p><ol><li>She elaborated on her plans for the future. (她详细阐述了自己未来的计划。)</li><li>The cake was beautifully elaborate. (这个蛋糕做得非常精美。)</li><li>He gave an elaborate explanation of his theory. (他对自己的理论进行了详尽的解释。)</li></ol><h1 id="chronologically"><a href="#chronologically" class="headerlink" title="chronologically"></a>chronologically</h1><p>[英] · &#x2F;ˌkrɒnəˈlɒdʒɪkli&#x2F;<br>[副词] 按时间顺序地<br>例句：</p><ol><li>The events were presented chronologically in the history book. (这本历史书按照时间顺序呈现了事件。)</li><li>Please arrange the documents chronologically before submitting them. (请在提交前按时间顺序排列文件。)</li><li>The professor explained the development of the theory chronologically during his lecture. (教授在讲座中按照时间顺序解释了理论的发展。)</li></ol><h1 id="ancestor"><a href="#ancestor" class="headerlink" title="ancestor"></a>ancestor</h1><p>[英] &#x2F;ˈæn.ses.tər&#x2F;<br>[n] 祖先，祖宗<br>例句：</p><ol><li>My ancestors came from Ireland. (我的祖先来自爱尔兰。)</li><li>We should respect our ancestors and their traditions. (我们应该尊重我们的祖先和他们的传统。)</li><li>The study of genealogy helps people trace their ancestors and family history. (家谱研究帮助人们追溯他们的祖先和家族历史。)</li></ol><h1 id="ellipse"><a href="#ellipse" class="headerlink" title="ellipse"></a>ellipse</h1><p>[英语] · &#x2F; ɪˈlɪps &#x2F;<br>[n.] 椭圆形<br>例句：</p><ol><li>The planet’s orbit is an ellipse.<br>（这颗行星的轨道是一个椭圆。）</li><li>The shape of the pool was an elongated ellipse.<br>（游泳池的形状是一个细长的椭圆形。）</li><li>She drew an ellipse on the paper to demonstrate its shape.<br>（她在纸上画了一个椭圆来展示它的形状。）</li></ol><h1 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate"></a>concatenate</h1><p>[英] &#x2F;kən’kætɪneɪt&#x2F;<br>[v] 连接，串联<br>例句：</p><ol><li>You can concatenate two strings using the “+” operator. (你可以使用“+”运算符连接两个字符串。)</li><li>The program will concatenate all the files in the folder into one document. (该程序将把文件夹中的所有文件连接成一个文档。)</li><li>In Excel, you can use the CONCATENATE function to combine text from different cells into one cell. (在Excel中，您可以使用CONCATENATE函数将来自不同单元格的文本组合到一个单元格中。)</li></ol><h1 id="compatible"><a href="#compatible" class="headerlink" title="compatible"></a>compatible</h1><p>[英] &#x2F;kəmˈpætəbl&#x2F;<br>[形] 兼容的；能共存的；和谐相处的<br>例句：</p><ol><li>The software is compatible with both Windows and Mac operating systems. (这个软件可以在Windows和Mac操作系统上运行。)</li><li>Their personalities are very compatible, which makes them great friends. (他们性格非常合得来，所以成为了好朋友。)</li><li>This printer is not compatible with older versions of the software. (这台打印机不兼容旧版本的软件。)</li></ol><h1 id="recast"><a href="#recast" class="headerlink" title="recast"></a>recast</h1><p>[英语] · &#x2F;riːˈkæst&#x2F;<br>[v.] 重新铸造；重塑；改写<br>例句：</p><ol><li>The director recast the lead role with a more experienced actor. (导演用更有经验的演员重新选角了主角。)</li><li>She decided to recast her novel as a screenplay. (她决定将自己的小说改编成剧本。)</li><li>The company had to recast their budget after unexpected expenses arose. (公司不得不在出现意外开支后重新制定预算。)</li></ol><h1 id="motif"><a href="#motif" class="headerlink" title="motif"></a>motif</h1><p>[英] · &#x2F;məʊˈtiːf&#x2F;<br>[n.] 主题；图案；动机<br>例句：</p><ol><li>The motif of the painting is a beautiful sunset over the ocean. (这幅画的主题是海洋上美丽的日落。)</li><li>The fabric has a floral motif that adds a touch of elegance to the dress. (这种面料有花卉图案，为裙子增添了一份优雅。)</li><li>The writer often uses the same motif in his novels, exploring different aspects of it each time. (这位作家经常在他的小说中使用相同的主题，在每次探索不同方面。)</li></ol><h1 id="usualization"><a href="#usualization" class="headerlink" title="usualization"></a>usualization</h1><p>[英] · &#x2F;ˌjuːʒʊəlaɪ’zeɪʃ(ə)n&#x2F;<br>[n.] 通常化，标准化<br>例句：</p><ol><li>The usualization of this process will greatly improve efficiency. (这个过程的标准化将极大地提高效率。)</li><li>Usualization is an important step in quality control. (通常化是质量控制中的重要步骤。)</li><li>The company has implemented a policy of usualization across all departments. (公司已在所有部门实施了通常化政策。)</li></ol><h1 id="divergent"><a href="#divergent" class="headerlink" title="divergent"></a>divergent</h1><p>[英] · &#x2F;daɪˈvɜːdʒənt&#x2F;<br>[形容词] 1. 分歧的；不同的 2. 发散的；分叉的<br>例句：</p><ol><li>The opinions of the two experts are divergent on this issue.<br>（这个问题上，两位专家意见不一。）</li><li>The rays of light are divergent after passing through the lens.<br>（光线通过透镜后会发散。）</li><li>Their paths in life were becoming increasingly divergent.<br>（他们人生道路越来越分岔了。）</li></ol><h1 id="priest"><a href="#priest" class="headerlink" title="priest"></a>priest</h1><p>[英] &#x2F;priːst&#x2F;  美 &#x2F;prist&#x2F;<br>[n] &lt;宗&gt;神父；牧师<br>例句：</p><ol><li>The priest led the congregation in prayer. (神父带领教众祷告。)</li><li>He was ordained as a Catholic priest last year. (他去年被任命为天主教神父。)</li><li>The young couple asked the priest to marry them in the church. (这对年轻夫妇请求牧师在教堂里为他们举行婚礼。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIDA问题</title>
      <link href="/2023/04/18/MIDA/"/>
      <url>/2023/04/18/MIDA/</url>
      
        <content type="html"><![CDATA[<h2 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h2><ul><li><p>什么是steady_state output?</p></li><li><p>什么是POLES和ZEROS?</p></li><li><p>γ是什么?</p></li><li><p>什么是predictor?</p></li><li><p>y(t)&#x3D;w(z)e(t)是什么？</p></li><li><p>为什么过去的现在的sample相乘等于0</p></li><li><p>笔记第5页y(t+k|t,s)为什么是stochastic process？</p></li><li><p>为什么prediction error是stochastic process？</p></li><li><p>MA的Variance为什么是平方和？为什么会收敛？</p></li><li><p>笔记第6页为什么y(t+k|t)&#x3D;那个</p></li><li><p>为什么Non-zero mean arma是那样的格式？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> MIDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIDA复习</title>
      <link href="/2023/04/18/MIDA%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/04/18/MIDA%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>到明天下午三点应该能看完，之后就开始每天三个exe。明天开始。<br>DB把concurrency做了<br>.<br>stochastic process<br>相当于扔了一百次色子的实验<br>两个signal等价如果他们是同一个stochastic process的实现<br>怎么描述一个S.P.: 用mean和covariance<br>γ(t1,t2)&#x3D;</p><p>0221: 为什么正态分布的随机过程中E[v(t,s)]是关于s的函数，因为正态分布实验的结果和事件无关，早上做，晚上做不会影响结果</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> MIDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入renren-fast包</title>
      <link href="/2023/04/17/2.%20%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%B7%91%E4%B8%8D%E9%80%9A/"/>
      <url>/2023/04/17/2.%20%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%B7%91%E4%B8%8D%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个error"><a href="#第一个error" class="headerlink" title="第一个error"></a>第一个error</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\JDK\jdk-17\bin\java.exe -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always &quot;-javaagent:D:\IntelliJ IDEA 2021.3.1\lib\idea_rt.jar=7270:D:\IntelliJ IDEA 2021.3.1\bin&quot; -Dfile.encoding=UTF-8 com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line"></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.</span><br><span class="line">错误: 找不到或无法加载主类 com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line">原因: java.lang.ClassNotFoundException: com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>##chatgpt回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这个错误信息包含两个部分：</span><br><span class="line"></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release. 这个警告信息是在运行Java虚拟机时出现的，提示你使用的是已经被弃用的选项。这两个选项-Xverify:none和-noverify在JDK 13中已经被弃用，未来的版本可能会被移除。</span><br><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类 com.shinwhy.freemall.coupon.FreemallCouponApplication 原因: java.lang.ClassNotFoundException: com.shinwhy.freemall.coupon.FreemallCouponApplication。 这个错误是在运行Java应用程序时出现的。它表示Java虚拟机无法找到或加载名为com.shinwhy.freemall.coupon.FreemallCouponApplication的主类。这可能是由于类路径问题或者缺少依赖库等原因导致的。</span><br><span class="line"></span><br><span class="line">针对这个错误，你可以考虑以下几个方面：</span><br><span class="line"></span><br><span class="line">检查类路径是否正确。在运行Java应用程序时，Java虚拟机会按照类路径查找类文件。如果类路径设置不正确，那么Java虚拟机就无法找到对应的类文件。你可以通过检查类路径是否包含了com.shinwhy.freemall.coupon.FreemallCouponApplication类文件的目录或jar包来确认类路径是否正确。</span><br><span class="line"></span><br><span class="line">检查是否缺少依赖库。如果程序依赖于其他的库文件，那么需要将这些库文件加入到类路径中，否则Java虚拟机也无法找到对应的类文件。你可以检查应用程序的依赖库，确保依赖库已经正确安装，并且类路径中包含了这些依赖库。</span><br><span class="line"></span><br><span class="line">如果问题仍然存在，你可以尝试使用其他版本的Java虚拟机来运行程序，或者更新程序的依赖库版本。同时，你可以考虑升级到最新版本的JDK，以避免使用已经被弃用的选项。</span><br></pre></td></tr></table></figure><p>第一个问题我尝试装JDK8试试看能不能解决<br>今天突然想到去查一下renren-fast对应的JDK版本，官网上说只支持JDK8，所以我安装JDK8，并修改所有pom.xml文件，好像解决了。<br>##一些小error:</p><blockquote><p><code>找不到符号：.allowedOriginPatterns(&quot;*&quot;)</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/little___ant/article/details/126885567</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>找不到符号：&lt;fork&gt;true&lt;/fork&gt;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我遇到了几乎同样的问题。</span><br><span class="line"></span><br><span class="line">我使用的是 jdk 16、maven 编译器 3.8.1 和 IntelliJ 版本 2021.1.3。</span><br><span class="line"></span><br><span class="line">对 pom.xml 进行任何更改后，右侧会显示一个小图标（Load Maven Changes）。单击该按钮后，问题就解决了。</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>Error:(3, 29) java: 程序包org.junit.jupiter.api不存在</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/littlehaes/article/details/104088317</span><br></pre></td></tr></table></figure><blockquote><p><code>&#39;parent.relativePath&#39; of POM com.qianbao:hermes_account_service:1.0.0-SNAPSHOT (/Users/wangyonglin/company/blyl/codes/codespackage_foruse/hermes_account_service_v1/pom.xml) points at com.qianbao:hermes_account_service instead of org.springframework.boot:spring-boot-starter-parent, please verify your project structure</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/453547775</span><br></pre></td></tr></table></figure><h1 id="第二个error"><a href="#第二个error" class="headerlink" title="第二个error"></a>第二个error</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Web server failed to start. Port 8080 was already in use.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Identify and stop the process that&#x27;s listening on port 8080 or configure this application to listen on another port.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>第二个问题我给每个文件夹配置了不同的端口，暂时解决了<br>后来又尝试了另一种做法，结束占用8080端口的任务，也解决了，占用8080端口的是tomcat<br><code>https://blog.csdn.net/Coder_ljw/article/details/129332755</code></p><p>第一个问题好像是因为tomcat版本不对，我重新配置了tomcat，但目前端口不对，我先试一下改端口号，改端口号不行，仍然显示同样的错误。<br>我在StackOverflow上提交了问题，希望有用，没等到回答</p><blockquote><p>重新下载renren-fast并导入，跟着视频一步步做，终于解决了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Freemall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pictr</title>
      <link href="/2023/04/14/pictr/"/>
      <url>/2023/04/14/pictr/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.wallpapermaiden.com/image/2023/01/08/red-eyes-wink-pointy-ears-vampire-crescent-wings-anime-girl-anime-53264.jpeg" alt="图片加载失败" title="壁纸"></p><p><img src="https://www.google.com/imgres?imgurl=https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg/270px-Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg&tbnid=tiz4kC8bF4l3LM&vet=12ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ..i&imgrefurl=https://zh.wikipedia.org/wiki/%25E7%258F%25A0%25E7%25A9%2586%25E6%259C%2597%25E7%2591%25AA%25E5%25B3%25B0&docid=H7j-p9vjqtKRLM&w=270&h=180&q=%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0&ved=2ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ" alt="图片加载失败" title="壁纸"></p><img decoding="async" src="https://s1.wallpapermaiden.com/image/2023/01/08/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" width="20%"><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/pictr/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" alt="图片加载失败"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/source/_posts/pictr/futuristic-city-industrial-skyscrapers-sci-fi-53198.jpeg" alt="图片加载失败"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/./pictr/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" alt="图片加载失败"></p><p><img src="https://t7.baidu.com/it/u=2168645659,3174029352&fm=193&f=GIF" alt="RUNOOB 图标"></p><p><img src="https://cdn.mos.cms.futurecdn.net/NddgAz7AfjNsbsPiM72Ek6-1600-80.jpg.webp" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="https://s1.wallpapermaiden.com/image/2023/01/01/demon-cityscape-wings-mountains-fantasy-53158-resized.jpeg" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><a href="https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg">https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg</a></p><p><img src="https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg" alt="pipi"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大功告成</title>
      <link href="/2023/04/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90/"/>
      <url>/2023/04/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>《渡荆门送别》</p><p>渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。</p><p>渡远荆门外，来从楚国游。山随平野尽，江入大荒流。<br>月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。</p><p>山随平野尽，江入大荒流。</p><p>月下飞天镜，云生结海楼。</p><p>仍怜故乡水，万里送行舟。</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  Person()</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; &quot;调用构造函数&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Person()//对象销毁前，自动调用</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; &quot;析构函数的调用&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">  //创建对象</span><br><span class="line">  Person  p;//这是一个局部变量，test执行完毕后会释放该对象 进而调用析构函数</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  Person  p1;//如果在main函数创建对象，析构函数会在按任意键后再调用</span><br><span class="line">  test();</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hello</code></p><p><code>he</code></p><p><img src="https://s1.wallpapermaiden.com/image/2023/01/08/red-eyes-wink-pointy-ears-vampire-crescent-wings-anime-girl-anime-53264.jpeg" alt="图片加载失败" title="壁纸"></p><p><img src="https://www.google.com/imgres?imgurl=https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg/270px-Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg&tbnid=tiz4kC8bF4l3LM&vet=12ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ..i&imgrefurl=https://zh.wikipedia.org/wiki/%25E7%258F%25A0%25E7%25A9%2586%25E6%259C%2597%25E7%2591%25AA%25E5%25B3%25B0&docid=H7j-p9vjqtKRLM&w=270&h=180&q=%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0&ved=2ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ" alt="图片加载失败" title="壁纸"></p><img decoding="async" src="https://s1.wallpapermaiden.com/image/2023/01/08/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" width="20%">]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2013 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/2023/04/14/Docker%E5%AE%89%E8%A3%85/"/>
      <url>/2023/04/14/Docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>#Docker容器文件挂载和端口映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line">参数说明</span><br><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</span><br></pre></td></tr></table></figure><p>这里有报错，使用<code>docker logs -f &lt;container ID&gt;</code>查看日志，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2023-04-15 13:31:09+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.41-1.el7 started.</span><br><span class="line">2023-04-15 13:31:09+00:00 [ERROR] [Entrypoint]: mysqld failed while attempting to check config</span><br><span class="line">  command was: mysqld --verbose --help --log-bin-index=/tmp/tmp.F82QFTNxFF</span><br><span class="line">  mysqld: Can&#x27;t read dir of &#x27;/etc/mysql/conf.d/&#x27; (Errcode: 2 - No such file or directory)</span><br><span class="line">mysqld: [ERROR] Fatal error in defaults handling. Program aborted!</span><br></pre></td></tr></table></figure><p>修改配置文件的docker容器目录解决问题解决问题</p><p><strong>容器和容器之间相互隔离，相当于一个独立的运行环境</strong></p><p>访问容器内部：<br><code>docker exec -it mysql /bin/bash</code><br>这里还有另一种直接进入的方法<br><code>docker exec -it redis redis-cli</code><br>查看运行的容器<br><code>docker ps</code></p><p>1.查看所有运行中的容器 <code>docker ps</code>；<br>2.停止容器运行 <code>docker stop &lt;container-id&gt;</code>；<br>3.删除这个容器 <code>docker rm &lt;container-id&gt;</code>；<br>4.删除这个镜像 <code>docker rmi &lt;image-id&gt;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Freemall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemall </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大衰退</title>
      <link href="/2023/01/13/%E5%A4%A7%E8%A1%B0%E9%80%80/"/>
      <url>/2023/01/13/%E5%A4%A7%E8%A1%B0%E9%80%80/</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-“宏观经济学的另一半”导论"><a href="#第1章-“宏观经济学的另一半”导论" class="headerlink" title="第1章: “宏观经济学的另一半”导论"></a>第1章: “宏观经济学的另一半”导论</h2><p>每个人都储蓄，其结果是无人能够储蓄<br>合成谬误问题<br>利润最大化-&gt;<strong>债务最小化</strong>——-诱发资产负债表衰退<br>利润最小化条件：必须拥有清洁的资产负债表，必有存在具有吸引力的投资机会<br>节俭悖论：人们努力储蓄，但是，人们的行为和想法使国民经济保持在萧条状态<br>状态2：出借人(储户）面对不良贷款问题，(如金融危机、信用紧缩)，导致有借款人(投资人)，但没有出借人(储户)。但一旦通货膨胀得到控制，中央采取宽松货币政策，经济重新回到状态1<br>信用紧缩：银行的不良贷款过量，银行资本不充足，从而限制银行出借资金。<br>怎么解决出借人短缺的原因？1. 政府向银行注入资本，回复银行的借钱能力 2. 政府放松阻碍金融机构作为金融中介的监管 3. 银行间市场失去功能，中央银行可以担当最后贷款人的角色 4. 政府采取宽松货币政策<br>借款人消失的原因：1.没有投资机会 2.财务健康状况受损到一定的临界点</p><h2 id="第2章：造成借款人短缺的资产负债表问题"><a href="#第2章：造成借款人短缺的资产负债表问题" class="headerlink" title="第2章：造成借款人短缺的资产负债表问题"></a>第2章：造成借款人短缺的资产负债表问题</h2><p>日本陷入资产负债表衰退<br>西方陷入资产负债表衰退</p><h3 id="借款人消失的第一个受害者：货币"><a href="#借款人消失的第一个受害者：货币" class="headerlink" title="借款人消失的第一个受害者：货币"></a>借款人消失的第一个受害者：货币</h3><p>基础货币：也称货币基数、高能货币，它是中央银行发行的债务凭证——或说欠条，表现为商业银行持有的基础货币，和公众持有的流通中的现金。简单地说，就是央行发行的钱<br>货币供给量(M2)：经济体中全部银行账户、票据 + 流通中的货币<br>信用：金融机构借给私人部门的货币数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M1 M2 M3 指的是什么？</span><br><span class="line">M1则包括了现金和银行活期存款，能立即变现。 M2也就是广义货币，包括了M1和准货币。 准货币涵盖了定期存款，居民储蓄存款和其他金融机构的存款，比如证券公司客户保证金，住房公积金中心存款。 另外还有M3，就是M2外加其他短期流动资产，比如国库券、商业票据、银行承兑票据</span><br></pre></td></tr></table></figure><p>通过从金融机构买入资产，央行总是能向银行体系注入流动性，<br>但是，对于流动性注入实体经济来说，银行必须借出这些资金，银行不能送钱，因为这些资金根本上是储蓄者所有的。</p><p>具体表现：基础货币增加，货币供给量和信用几乎没有增加。货币总量和实体经济脱钩<br>政府要充当最后借款人的角色，让去杠杆化的资金重新回到经济体，避免货币供给收缩。这样的政策应当持续，知道私人部门重新借款位置<br>债券收益率降到极低水平，鼓励政府借款，这是建设社会基础设施的好机会。<br>经济危机来临时，政府不应该想着减少财政赤字，要确保：(1)借入并花掉所有被储蓄的资金；(2)这种政策维持到私人部门的财务健康得以恢复<br>量化宽松政策并没有增加日本、英国和欧洲的货币供给。<br>当私人部门存在强烈的资金需求时， 通货膨胀是货币现象，但是，即使在零利率或负利率下，私人部门也拒绝借款，事情就不是那么回事了<br>伯南克和耶伦判断准确，在资产负债表衰退中，量化宽松政策不会导致通货膨胀<br>欧英搞财政紧缩，从财政悬崖坠落。日本提高消费税率，把日本经济重新抛向衰退，对于安倍经济学人们彻底失去热情<br>弗里德曼传统观点：认为利率足够低，总有借款人，但实际上不是这样。<br>欧元《马斯特里赫特条约》规定了各国财政赤字不能超过GDP的3%<br>财政刺激计划：减税:No 政府支出:Yes。如果国内投资机会缺乏爱，正确的回应是组合拳，即减税，为鼓励创新而取消管制以及增大政府开支，提高承担风险能力。<br>在资产负债表衰退时，油价下跌，人们拿省下的钱去还债。同理，减税也没啥效果。</p><p>什么是<strong>名义GDP</strong>？<br>中国的总储蓄占GDP的比重差不多是欧洲的2倍，为什么中国经济还能继续发展？<br>什么是<strong>财政乘数</strong>？<br><img src="/images/dashuaitui/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%BB%99%E7%99%BE%E5%A7%93%E5%8F%91%E9%92%B1.png"><br>政府是可以通过增加财政支出来度过难关，但债务过高该怎么办？</p><h2 id="第3章：阻退借款人的投资机会缺乏问题"><a href="#第3章：阻退借款人的投资机会缺乏问题" class="headerlink" title="第3章：阻退借款人的投资机会缺乏问题"></a>第3章：阻退借款人的投资机会缺乏问题</h2><p>刘易斯拐点（英语：Lewis turning point）是指经济发展中的一种状态，即乡村劳动力投身制造业导致乡村劳动力减少，并导致农民工和非熟练工人的工资上涨。这种现象通常由劳动力短缺引起。直到再次达到劳动力剩余的状态后工资不再上涨。<br>简：即劳动力过剩向短缺的转折点，是指在工业化过程中，随着农村富余劳动力向非农产业的逐步转移，农村富余劳动力逐渐减少，最终枯竭。城市工厂最终吸收了全部的剩余劳动力<br>根据投资机会的可得性，可以将工业化过程分为三阶段。</p><ul><li>城市化经济阶段，在这个阶段中没经济还没达到刘易斯拐点</li><li>成熟经济阶段，在这个阶段，经济已经跨越了刘易斯拐点</li><li>被追赶的经济阶段，在这个阶段中，海外的资本收益率高于国内。<br><img src="/images/dashuaitui/%E4%B8%89%E9%98%B6%E6%AE%B5.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 扩展阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eco </tag>
            
            <tag> 辜朝明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现Browser</title>
      <link href="/2023/01/08/browserENG/"/>
      <url>/2023/01/08/browserENG/</url>
      
        <content type="html"><![CDATA[<h2 id="Downloading-Web-Pages"><a href="#Downloading-Web-Pages" class="headerlink" title="Downloading Web Pages"></a>Downloading Web Pages</h2><p><a href="https://browser.engineering/http.html">https://browser.engineering/http.html</a><br>Scheme  hostname            path</p><h3 id="1-separate-the-scheme-from-the-URL"><a href="#1-separate-the-scheme-from-the-URL" class="headerlink" title="1. separate the scheme from the URL"></a>1. separate the scheme from the URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">URL</span>:</span><br><span class="line">  <span class="comment"># 类的构造函数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, url</span>):</span><br><span class="line">    <span class="comment"># 使用assert语句来确保self.scheme的值为&quot;http&quot;，如果不是的话会抛出AssertionError异常。</span></span><br><span class="line">    self.scheme, url = url.split(<span class="string">&quot;://&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">assert</span> self.scheme == <span class="string">&quot;http&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-separate-the-host-from-the-path"><a href="#2-separate-the-host-from-the-path" class="headerlink" title="2. separate the host from the path"></a>2. separate the host from the path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">URL</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, url</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">      url = url + <span class="string">&quot;/&quot;</span></span><br><span class="line">    self.host, url = url.split(<span class="string">&quot;/&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    self.path = <span class="string">&quot;/&quot;</span> + url</span><br></pre></td></tr></table></figure><h3 id="3-download-the-web-page-at-that-URL"><a href="#3-download-the-web-page-at-that-URL" class="headerlink" title="3. download the web page at that URL."></a>3. download the web page at that URL.</h3><ol><li><p>connect to the host(create a socket)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">URL</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self</span>):</span><br><span class="line">    s = socket.socket(</span><br><span class="line">      family = socket.AF_INET,</span><br><span class="line">            <span class="built_in">type</span> = socket.SOCK_STREAM,</span><br><span class="line">            proto = socket.IPPROTO_TCP,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li><li><p>tell the socket you create to connect to the other computer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">URL</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    s.connect((self.host, <span class="number">80</span>))</span><br></pre></td></tr></table></figure></li><li><p>Request and response</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">URL</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        s.send((<span class="string">&quot;GET &#123;&#125; HTTP/1.0\r\n&quot;</span>.<span class="built_in">format</span>(self.path) + \</span><br><span class="line">                <span class="string">&quot;Host: &#123;&#125;\r\n\r\n&quot;</span>.<span class="built_in">format</span>(self.host)) \</span><br><span class="line">               .encode(<span class="string">&quot;utf8&quot;</span>))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> BuildYourOwnX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> BuildYourOwnX </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
