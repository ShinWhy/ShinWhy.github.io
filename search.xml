<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nodejs笔记</title>
      <link href="/2023/08/07/Nodejs%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/07/Nodejs%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-为什么要学习Nodejs"><a href="#1-为什么要学习Nodejs" class="headerlink" title="1. 为什么要学习Nodejs?"></a>1. 为什么要学习Nodejs?</h2><p>可以让其他人访问我们的编写的网页<br>为后续的框架学习打基础(Vue, React,Angular)</p><h2 id="2-什么是Nodejs"><a href="#2-什么是Nodejs" class="headerlink" title="2. 什么是Nodejs?"></a>2. 什么是Nodejs?</h2><p>通俗来讲：他是一款应用程序，是一款软件，它可以运行JavaScript代码</p><h2 id="3-Node-js的作用？"><a href="#3-Node-js的作用？" class="headerlink" title="3. Node.js的作用？"></a>3. Node.js的作用？</h2><ol><li>开发服务器端应用</li><li>开发工具类应用(Webpack, Vite, Babel)</li><li>开发桌面端应用(VSCode, Figma, Postman &lt;- electron &lt;- Node.js)</li></ol><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li>Node.js中不能使用<code>BOM</code>和<code>DOM</code>的API，可以使用console和定时器API</li><li>Node.js中的顶级对象为<code>global</code>，也可以用<code>globalThis</code>访问顶级对象</li></ol><h1 id="二、模块"><a href="#二、模块" class="headerlink" title="二、模块"></a>二、模块</h1><h2 id="1-Buffer"><a href="#1-Buffer" class="headerlink" title="1. Buffer"></a>1. Buffer</h2><div class="row">    <embed src="/pdfs/NodejsPDF/01_Buffer.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="2-fs模块"><a href="#2-fs模块" class="headerlink" title="2. fs模块"></a>2. fs模块</h2><div class="row">    <embed src="/pdfs/NodejsPDF/02_fs模块.pdf" width="100%" height="550" type="application/pdf"></div><ol><li>写入文件应用场景<br>下载文件<br>安装软件<br>保存程序日志，如 Git<br>编辑器保存文件<br>视频录制</li><li>读取文件应用场景<br>电脑开机<br>程序运行<br>编辑器打开文件<br>查看图片<br>播放视频<br>播放音乐<br>Git 查看日志<br>上传文件<br>查看聊天记录</li></ol><h2 id="3-path模块"><a href="#3-path模块" class="headerlink" title="3. path模块"></a>3. path模块</h2><div class="row">    <embed src="/pdfs/NodejsPDF/03_path模块.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4. HTTP协议"></a>4. HTTP协议</h2><div class="row">    <embed src="/pdfs/NodejsPDF/04_HTTP协议.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/08/05/leetcode(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/"/>
      <url>/2023/08/05/leetcode(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/</url>
      
        <content type="html"><![CDATA[<ol><li>确定dp数组下标含义 eg: 分拆数字i，可以得到的最大乘积为dp[i];</li><li>递推公式 eg: dp[i] &#x3D; max(dp[i], (i - j) * j, dp[i - j] * j);</li><li>初始化 eg: dp[2] &#x3D; 1;</li><li>遍历顺序 eg: 从前向后遍历就可以;</li><li>推导结果</li></ol><h1 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343. Integer Break"></a>343. Integer Break</h1><p>新知：max()只能比较两个数的值</p><h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h1><p>疑惑：</p><ul><li>递推公式怎么写？如果出现 3，-1，-1，9的情况， 阁下应该如何应对呢？</li><li>抛弃了前面的元素，重新开始算的情况是怎么样的？对于每一个i，无非只有两种情况：dp[i]&#x3D;max(nums[i]+dp[i+1],nums[i])<br>心得：</li><li>注意变量名不要和已经存在的函数名撞车</li><li>注意确定dp数组下标含义以后，要严格按照那个来思考问题。 这样就不会出现第一个疑惑</li></ul><h1 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a>54. Spiral Matrix</h1>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2023/08/03/MybatisPlus/"/>
      <url>/2023/08/03/MybatisPlus/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/relationship-with-mybatis.png" alt="img"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4.框架结构"></a>4.框架结构</h2><img src="https://baomidou.com/img/mybatis-plus-framework.jpg" alt="framework" style="zoom:50%;" /><h2 id="5-官方地址"><a href="#5-官方地址" class="headerlink" title="5.官方地址"></a>5.官方地址</h2><blockquote><p><strong>官方网站：</strong><a href="https://baomidou.com/">https://baomidou.com/</a></p><p><strong>官方文档：</strong><a href="https://baomidou.com/pages/24112f/">https://baomidou.com/pages/24112f/</a></p></blockquote><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><ul><li><strong>IDE：IDEA 2019.3.5</strong></li><li><strong>JDK：JDK8+</strong></li><li><strong>构建工具：Maven 3.5.4</strong></li><li><strong>MySQL：MySQL 8.0.24</strong></li><li><strong>Navicat：Navicat Premium 15</strong></li><li><strong>Spring Boot：2.6.7</strong></li><li><strong>MyBatis-Plus：3.5.1</strong></li></ul><h2 id="2-建库建表"><a href="#2-建库建表" class="headerlink" title="2.建库建表"></a>2.建库建表</h2><ul><li><p><strong>打开Navicat运行以下SQL脚本进行建库建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>; </span><br><span class="line">use `mybatis_plus`; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` ( </span><br><span class="line">    `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>, </span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>, </span><br><span class="line">    `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li><li><p><strong>插入几条测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h2><ul><li><p><strong>使用<code>Spring Initializer</code>快速初始化一个 Spring Boot 工程</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519140839640.png" alt="image-20220519140839640" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141335981.png" alt="image-20220519141335981" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141737405.png" alt="image-20220519141737405" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141849937.png" alt="image-20220519141849937" style="zoom:80%;" /></li><li><p><strong>引入<code>MyBatis-Plus</code>的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安装<code>Lombok</code>插件</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519143257305.png" alt="image-20220519143257305" style="zoom:80%;" /></li></ul><h2 id="4-配置编码"><a href="#4-配置编码" class="headerlink" title="4.配置编码"></a>4.配置编码</h2><ul><li><p><strong>配置<code>application.yml</code>文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置连接数据库的信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> &#123;<span class="string">username</span>&#125;</span><br><span class="line">    <span class="attr">password:</span> &#123;<span class="string">password</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;指定Mapper接口所在的包&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusDemoApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MybatisPlusDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写实体类 <code>User.java</code>（此处使用了 Lombok 简化代码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写 Mapper 包下的 <code>UserMapper</code>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-测试查询"><a href="#5-测试查询" class="headerlink" title="5.测试查询"></a>5.测试查询</h2><ul><li><p><strong>编写一个测试类<code>MyBatisPlusTest.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>控制台打印查询结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519150454211.png" alt="image-20220519150454211"></p></li></ul><h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="1-BaseMapper-lt-T-gt"><a href="#1-BaseMapper-lt-T-gt" class="headerlink" title="1.BaseMapper&lt;T&gt;"></a>1.BaseMapper&lt;T&gt;</h2><blockquote><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为条件构造器</li></ul></blockquote><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，因此我们继承该接口以后可以直接使用。</p><p>本次演示的CRUD操作不包含参数带有条件构造器的方法，关于条件构造器将单独在一个章节进行演示。</p><hr><blockquote><p><strong>BaseMapper中提供的CRUD方法：</strong></p></blockquote><ul><li><p><strong>增加：Insert</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除：Delete</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改：Update</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询：Selete</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-调用Mapper层实现CRUD"><a href="#2-调用Mapper层实现CRUD" class="headerlink" title="2.调用Mapper层实现CRUD"></a>2.调用Mapper层实现CRUD</h2><h3 id="2-1插入"><a href="#2-1插入" class="headerlink" title="2.1插入"></a>2.1插入</h3><hr><blockquote><p><strong>最终执行的结果，所获取的id为1527206783590903810</strong></p><p><strong>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试插入一条数据</span></span><br><span class="line"><span class="comment">  * MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Vz&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;vz@oz6.cn&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;添加成功！&quot;</span> : <span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">    <span class="comment">//1527206783590903810（当前 id 为雪花算法自动生成的id）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;id自动获取&quot;</span> + user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2删除"><a href="#2-2删除" class="headerlink" title="2.2删除"></a>2.2删除</h3><hr><h4 id="a、根据ID删除数据"><a href="#a、根据ID删除数据" class="headerlink" title="a、根据ID删除数据"></a>a、根据ID删除数据</h4><blockquote><p><strong>调用方法：int deleteById(Serializable id);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id删除一条数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1527206783590903810L</span>);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、根据ID批量删除数据"><a href="#b、根据ID批量删除数据" class="headerlink" title="b、根据ID批量删除数据"></a>b、根据ID批量删除数据</h4><blockquote><p><strong>调用方法：int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试通过id批量删除数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">6L</span>,<span class="number">7L</span>,<span class="number">8L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c、根据Map条件删除数据"><a href="#c、根据Map条件删除数据" class="headerlink" title="c、根据Map条件删除数据"></a>c、根据Map条件删除数据</h4><blockquote><p><strong>调用方法：int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 测试根据Map集合中所设置的条件删除数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//当前演示为根据name和age删除数据</span></span><br><span class="line">    <span class="comment">//执行SQL为：DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Vz&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3修改"><a href="#2-3修改" class="headerlink" title="2.3修改"></a>2.3修改</h3><blockquote><p><strong>调用方法：int updateById(@Param(Constants.ENTITY) T entity);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id修改用户信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为： UPDATE user SET name=?, age=?, email=? WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;VzUpdate&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;Vz@sina.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4查询"><a href="#2-4查询" class="headerlink" title="2.4查询"></a>2.4查询</h3><hr><h4 id="a、根据ID查询用户信息"><a href="#a、根据ID查询用户信息" class="headerlink" title="a、根据ID查询用户信息"></a>a、根据ID查询用户信息</h4><blockquote><p><strong>调用方法：T selectById(Serializable id);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据id查询用户数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、根据多个ID查询多个用户信息"><a href="#b、根据多个ID查询多个用户信息" class="headerlink" title="b、根据多个ID查询多个用户信息"></a>b、根据多个ID查询多个用户信息</h4><blockquote><p><strong>调用方法：List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据多个id查询用户数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(ids);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c、根据Map条件查询用户信息"><a href="#c、根据Map条件查询用户信息" class="headerlink" title="c、根据Map条件查询用户信息"></a>c、根据Map条件查询用户信息</h4><blockquote><p><strong>调用方法：List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据Map所设置的条件查询用户</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE age = ?</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d、查询所有用户信息"><a href="#d、查询所有用户信息" class="headerlink" title="d、查询所有用户信息"></a>d、查询所有用户信息</h4><blockquote><p><strong>调用方法：List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试查询所有数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-通用Service"><a href="#3-通用Service" class="headerlink" title="3.通用Service"></a>3.通用Service</h2><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装<code>IService</code>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 条件构造器</li></ul></blockquote><p>MyBatis-Plus中有一个接口 **<code>IService</code>**和其实现类 **<code>ServiceImpl</code>**，封装了常见的业务层逻辑，详情查看源码IService和ServiceImpl</p><p>因此我们在使用的时候仅需在自己定义的**<code>Service</code><strong>接口中继承</strong><code>IService</code><strong>接口，在自己的实现类中实现自己的Service并继承</strong><code>ServiceImpl</code>**即可</p><hr><blockquote><p><strong>IService中的CRUD方法</strong></p></blockquote><ul><li><p><strong>增加：Save、SaveOrUpdate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除：Remove</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改：Update</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询：Get、List、Count</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>分页：Page</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-调用Service层操作数据"><a href="#4-调用Service层操作数据" class="headerlink" title="4.调用Service层操作数据"></a>4.调用Service层操作数据</h2><blockquote><p>我们在自己的Service接口中通过继承MyBatis-Plus提供的IService接口，不仅可以获得其提供的CRUD方法，而且还可以使用自身定义的方法。</p></blockquote><ul><li><p><strong>创建<code>UserService</code>并继承<code>IService</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * UserService继承IService模板提供的基础功能 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建<code>UserService</code>的实现类并继承<code>ServiceImpl</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ServiceImpl实现了IService，提供了IService中基础功能的实现 </span></span><br><span class="line"><span class="comment">  * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试查询记录数</strong></p><blockquote><p><strong>调用方法：int count();</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询总记录数</span></span><br><span class="line">    <span class="comment">//执行的SQL为：SELECT COUNT( * ) FROM user</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试批量插入数据</strong></p><blockquote><p><strong>调用方法：boolean saveBatch(Collection<T> entityList);</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;Vz&quot;</span>+i);</span><br><span class="line">        user.setAge(<span class="number">20</span>+i);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(list);</span><br><span class="line">    System.out.println(b ? <span class="string">&quot;添加成功！&quot;</span> : <span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><blockquote><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p></blockquote><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表，由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致。</p></blockquote><h3 id="1-1引出问题"><a href="#1-1引出问题" class="headerlink" title="1.1引出问题"></a>1.1引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520093844842.png" alt="image-20220520093844842"></p></li><li><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520094126411.png" alt="image-20220520094126411"></p></li></ul><h3 id="1-2解决问题"><a href="#1-2解决问题" class="headerlink" title="1.2解决问题"></a>1.2解决问题</h3><hr><h4 id="a、使用注解解决问题"><a href="#a、使用注解解决问题" class="headerlink" title="a、使用注解解决问题"></a>a、使用注解解决问题</h4><blockquote><p><strong>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b、使用全局配置解决问题"><a href="#b、使用全局配置解决问题" class="headerlink" title="b、使用全局配置解决问题"></a>b、使用全局配置解决问题</h4><blockquote><p><strong>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</strong></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p><strong>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</strong></p></blockquote><h3 id="2-1引出问题"><a href="#2-1引出问题" class="headerlink" title="2.1引出问题"></a>2.1引出问题</h3><hr><blockquote><p><strong>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</strong></p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100939157.png" alt="image-20220520100939157"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100715109.png" alt="image-20220520100715109"></p></li><li><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520101317761.png" alt="image-20220520101317761"></p></li></ul><h3 id="2-2解决问题"><a href="#2-2解决问题" class="headerlink" title="2.2解决问题"></a>2.2解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-TableId的value属性"><a href="#2-3-TableId的value属性" class="headerlink" title="2.3@TableId的value属性"></a>2.3@TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId(&quot;uid&quot;)</code>或<code>@TableId(value=&quot;uid&quot;)</code></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520103030977.png" alt="image-20220520103030977"></p><h3 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4@TableId的type属性"></a>2.4@TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IdType.ASSIGN_ID（默认）</td><td align="center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td align="center">IdType.AUTO</td><td align="center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#配置mp的主键策略为自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h2 id="3-TbaleField"><a href="#3-TbaleField" class="headerlink" title="3.@TbaleField"></a>3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="3-1情况一"><a href="#3-1情况一" class="headerlink" title="3.1情况一"></a>3.1情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="3-2情况二"><a href="#3-2情况二" class="headerlink" title="3.2情况二"></a>3.2情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;uid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><h3 id="4-1逻辑删除"><a href="#4-1逻辑删除" class="headerlink" title="4.1逻辑删除"></a>4.1逻辑删除</h3><hr><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="4-2实现逻辑删除"><a href="#4-2实现逻辑删除" class="headerlink" title="4.2实现逻辑删除"></a>4.2实现逻辑删除</h3><hr><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134529809.png" alt="image-20220520134529809"></p></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134636112.png" alt="image-20220520134636112"></p></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1527472864163348482L</span>);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520135637388.png" alt="image-20220520135637388"></p></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520140036445.png" alt="image-20220520140036445"></p></li></ul><h1 id="五、条件构造器"><a href="#五、条件构造器" class="headerlink" title="五、条件构造器"></a>五、条件构造器</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521092812125.png" alt="image-20220521092812125"></p><ul><li><p><code>Wrapper</code> ： 条件构造抽象类，最顶端父类</p><ul><li><p><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</p><ul><li><p><code>QueryWrapper </code>： 查询条件封装</p></li><li><p><code>UpdateWrapper </code>： Update 条件封装</p></li><li><p><code>AbstractLambdaWrapper </code>： 使用Lambda 语法</p><ul><li><p><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</p></li><li><p><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</p></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><ul><li><p><strong>组装查询条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>).isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装排序条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>).orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装删除条件</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted&#x3D;1 WHERE is_deleted&#x3D;0 AND (email IS NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//删除邮箱地址为null的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>条件的优先级</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET user_name&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).or().isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Oz&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@oz6.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET username&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;Vz7797&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@ss8o.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组装select子句</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted&#x3D;0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户的用户名、年龄、邮箱信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现子查询</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (uid IN (select uid from t_user where uid &lt;&#x3D; 100))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询id小于等于100的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;uid&quot;</span>, <span class="string">&quot;select uid from t_user where uid &lt;= 100&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><blockquote><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>).and( i -&gt; i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>)).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;svip@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result &gt; <span class="number">0</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h2><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><ul><li><p><strong>思路一</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (user_name LIKE ? AND age &lt;&#x3D; ?)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">        <span class="comment">//isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span></span><br><span class="line">        queryWrapper.like(<span class="string">&quot;user_name&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ageBegin != <span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ageEnd != <span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>思路二</strong></p><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), <span class="string">&quot;user_name&quot;</span>, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">        .le(ageEnd != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><blockquote><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">        .le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><blockquote><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i -&gt; i.gt(User::getAge, <span class="number">20</span>).or().isNull(User::getEmail));</span><br><span class="line">    updateWrapper.set(User::getName, <span class="string">&quot;小黑&quot;</span>).set(User::getEmail,<span class="string">&quot;abc@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、常用插件"><a href="#六、常用插件" class="headerlink" title="六、常用插件"></a>六、常用插件</h1><h2 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h2><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><ul><li><p><strong>添加配置类<code>MyBatisPlusConfig</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new Page()中的两个参数分别是当前页码，每页显示数量</span></span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>), <span class="literal">null</span>);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-自定义分页"><a href="#2-自定义分页" class="headerlink" title="2.自定义分页"></a>2.自定义分页</h2><blockquote><p>上面调用的是MyBatis-Plus提供的带有分页的方法，那么我们自己定义的方法如何实现分页呢？</p></blockquote><ul><li><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据年龄查询用户列表，分页显示 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> age 年龄 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page,<span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id,username as name,age,email from t_user where age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageVo</span><span class="params">()</span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = userMapper.selectPageVo(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;User&gt;(<span class="number">1</span>,<span class="number">2</span>), <span class="number">20</span>);</span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><blockquote><p><strong>作用：当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h3 id="3-1场景"><a href="#3-1场景" class="headerlink" title="3.1场景"></a>3.1场景</h3><hr><ul><li>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</li><li>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</li><li>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</li></ul><h3 id="3-2乐观锁与悲观锁"><a href="#3-2乐观锁与悲观锁" class="headerlink" title="3.2乐观锁与悲观锁"></a>3.2乐观锁与悲观锁</h3><hr><ul><li>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</li><li>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</li></ul><h3 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h3><hr><ul><li><p><strong>数据库中增加商品表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product ( </span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>, </span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>, </span><br><span class="line">    VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一条数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一个实体类<code>Product</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加一个Mapper接口<code>ProductMapper</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.小李获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productLi.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.小王获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productWang.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.小李修改商品价格+50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.小王修改商品价格-30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板获取的商品价格为：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521225803162.png" alt="image-20220521225803162"></p></li></ul><h3 id="3-4乐观锁解决问题"><a href="#3-4乐观锁解决问题" class="headerlink" title="3.4乐观锁解决问题"></a>3.4乐观锁解决问题</h3><hr><ul><li><p><strong>实体类<code>version</code>字段添加注解<code>@Version</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加乐观锁插件配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    <span class="comment">//添加分页插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="comment">//添加乐观锁插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>再次执行测试方法</strong></p><blockquote><p>小李查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小王查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小李修改商品价格，自动将version+1</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>最终，小王修改失败，查询价格：150</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p></blockquote></li><li><p><strong>优化执行流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.小李获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productLi.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.小王获取商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李获取的商品价格为：&quot;</span> + productWang.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.小李修改商品价格+50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.小王修改商品价格-30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//操作失败，重试</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productNew</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productNew.setPrice(productNew.getPrice()-<span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(productNew);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板获取的商品价格为：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521230448577.png" alt="image-20220521230448577"></p></li></ul><h1 id="七、通用枚举"><a href="#七、通用枚举" class="headerlink" title="七、通用枚举"></a>七、通用枚举</h1><blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><ul><li><p><strong>数据库表添加字段<code>sex</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521231317777.png" alt="image-20220521231317777"></p></li><li><p><strong>创建通用枚举类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">//将注解所标识的属性的值存储到数据库中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>User实体类中添加属性sex</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> isDeleted;  <span class="comment">//逻辑删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置扫描通用枚举</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MyBatis-Plus相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#指定mapper文件所在的地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="string">off</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#配置mp的主键策略为自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">  <span class="comment">#配置类型别名所对应的包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.mybatisplus.pojo</span></span><br><span class="line">  <span class="comment"># 扫描通用枚举的包</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.atguigu.mybatisplus.enums</span></span><br></pre></td></tr></table></figure></li><li><p><strong>执行测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">33</span>);</span><br><span class="line">    user.setSex(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="八、多数据源"><a href="#八、多数据源" class="headerlink" title="八、多数据源"></a>八、多数据源</h1><blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p></blockquote><p>场景说明：</p><p>我们创建两个库，分别为：<code>mybatis_plus</code>（以前的库不动）与<code>mybatis_plus_1</code>（新建），将mybatis_plus库的<code>product</code>表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1-创建数据库及表"><a href="#1-创建数据库及表" class="headerlink" title="1.创建数据库及表"></a>1.创建数据库及表</h2><ul><li><p><strong>创建数据库<code>mybatis_plus_1</code>和表&#96;product</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus_1` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line">use `mybatis_plus_1`; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product ( </span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>, </span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>, </span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>, </span><br><span class="line">    version <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>添加测试数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>删除<code>mybatis_plus</code>库中的<code>product</code>表</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mybatis_plus; </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> product;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-新建工程引入依赖"><a href="#2-新建工程引入依赖" class="headerlink" title="2.新建工程引入依赖"></a>2.新建工程引入依赖</h2><blockquote><p><strong>自行新建一个Spring Boot工程并选择MySQL驱动及Lombok依赖</strong></p></blockquote><p><strong>引入MyBaits-Plus的依赖及多数据源的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">132537</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">132537</span></span><br></pre></td></tr></table></figure><h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><ul><li><p>新建一个<code>User</code>实体类（如果数据库表名有t_前缀记得配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建一个实体类<code>Product</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-创建Mapper及Service"><a href="#5-创建Mapper及Service" class="headerlink" title="5.创建Mapper及Service"></a>5.创建Mapper及Service</h2><ul><li><p>新建接口<code>UserMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建接口<code>ProductMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建Service接口<code>UserService</code>指定操作的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定操作的数据源，master为user表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建Service接口<code>ProductService</code>指定操作的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>自行建立Service的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-编写测试方法"><a href="#6-编写测试方法" class="headerlink" title="6.编写测试方法"></a>6.编写测试方法</h2><blockquote><p><strong>记得在启动类中添加注解<code>@MapperScan()</code></strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDatasourceApplicationTests</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">ProductService productService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">1L</span>);</span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(<span class="number">1L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;User = &quot;</span> + user);</span><br><span class="line">System.out.println(<span class="string">&quot;Product = &quot;</span> + product);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522113049945.png" alt="image-20220522113049945"></p><h1 id="九、MyBatisX插件"><a href="#九、MyBatisX插件" class="headerlink" title="九、MyBatisX插件"></a>九、MyBatisX插件</h1><blockquote><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率。</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="1-安装MyBatisX插件"><a href="#1-安装MyBatisX插件" class="headerlink" title="1.安装MyBatisX插件"></a>1.安装MyBatisX插件</h2><blockquote><p><strong>打开IDEA，File-&gt; Setteings-&gt;Plugins-&gt;MyBatisX，搜索栏搜索MyBatisX然后安装。</strong></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522115718361.png" alt="image-20220522115718361"></p><h2 id="2-快速生成代码"><a href="#2-快速生成代码" class="headerlink" title="2.快速生成代码"></a>2.快速生成代码</h2><ul><li><p>新建一个Spring Boot项目引入依赖（创建工程时记得勾选lombok及mysql驱动）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置数据源信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">132537</span></span><br></pre></td></tr></table></figure></li><li><p>在IDEA中与数据库建立链接</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522120758740.png" alt="image-20220522120758740"></p></li><li><p>填写数据库信息并保存</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121434468.png" alt="image-20220522121434468"></p></li><li><p>找到我们需要生成的表点击右键</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121613909.png" alt="image-20220522121613909"></p></li><li><p>填写完信息以后下一步</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122127649.png" alt="image-20220522122127649"></p></li><li><p>继续填写信息</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122525598.png" alt="image-20220522122525598"></p></li><li><p><strong>大功告成（真特么好用yyds）</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122612334.png" alt="image-20220522122612334"></p></li></ul><h2 id="3-快速生成CRUD"><a href="#3-快速生成CRUD" class="headerlink" title="3.快速生成CRUD"></a>3.快速生成CRUD</h2><blockquote><p>MyBaitsX可以根据我们在Mapper接口中输入的方法名快速帮我们生成对应的sql语句</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123143852.png" alt="image-20220522123143852"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123202310.png" alt="image-20220522123202310"></p><h1 id="十、致谢"><a href="#十、致谢" class="headerlink" title="十、致谢"></a>十、致谢</h1><p>感谢尚硅谷杨博超老师：<a href="https://www.bilibili.com/video/BV12R4y157Be?p=1">https://www.bilibili.com/video/BV12R4y157Be?p=1</a></p><p>感谢MyBatis-Plus作者苞米豆：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>感谢自己又坚持学习了一门课程：<a href="https://www.oz6.cn/">https://www.oz6.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> EasyPan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/08/02/MyBatis%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/02/MyBatis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li></ul><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul><li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li><li><img src="/images/Resources/MyBatis%E4%B8%8B%E8%BD%BD.png"></li></ul><h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul><li>JDBC  <ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  </li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高  </li><li>程序中的长难复杂 SQL 需要绕过框架  </li><li>内部自动生产的 SQL，不容易做特殊优化  </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色  </li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IDE：idea 2019.2  </li><li>构建工具：maven 3.5.4  </li><li>MySQL版本：MySQL 5.7  </li><li>MyBatis版本：MyBatis 3.5.7</li></ul><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul><li>打包方式：jar</li><li>引入依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 添加用户信息  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  <ul><li>对象：Java的实体类对象  </li><li>关系：关系型数据库  </li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><ul><li>映射文件的命名规则<ul><li>表所对应的实体类的类名+Mapper.xml</li><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li></ul></li><li>MyBatis中可以面向接口操作数据，要保证两个一致<ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">    <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol><li>加入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>加入log4j的配置文件<ul><li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><img src="/images/Resources/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png"></li></ul><h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="/images/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png"><br><img src="/images/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png"></p><h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol><li>添加 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>删除 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">       delete from t_user where id = 6</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">       update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>查询一个实体类对象 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>查询集合 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中<ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</li><li>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul><li>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 <ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建议分成两种情况进行处理<ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul><h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li></ul><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul><li>只能使用${}，因为表名不能加单引号<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li>使用场景<ul><li>t_clazz(clazz_id,clazz_name)  </li><li>t_student(student_id,student_name,clazz_id)</li></ul><ol><li>添加班级信息  </li><li>获取新添加的班级的id  </li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol></li><li>在mapper.xml中设置两个属性<ul><li>useGeneratedKeys：设置使用自增的主键</li></ul><ul><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">mapper.insertUser(user);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul><li>resultMap：设置自定义映射  <ul><li>属性：  <ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型</li></ul></li><li>子标签：  <ul><li>id：设置主键的映射关系  </li><li>result：设置普通字段的映射关系  </li><li>子标签属性：  <ul><li>property：设置映射关系中实体类中的属性名  </li><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  <ol><li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line"><span class="keyword">private</span> Integer eid;  </span><br><span class="line"><span class="keyword">private</span> String empName;  </span><br><span class="line"><span class="keyword">private</span> Integer age;  </span><br><span class="line"><span class="keyword">private</span> String sex;  </span><br><span class="line"><span class="keyword">private</span> String email;  </span><br><span class="line"><span class="keyword">private</span> Dept dept;</span><br><span class="line"><span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"><span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  </li><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li></ul></li><li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭延迟加载，两条SQL语句都运行了<img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png"></li><li>开启延迟加载，只运行获取emp的SQL语句<br><img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp.getEmpName());</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/images/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png"></li><li>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code><ul><li>这个恒成立条件并不会影响查询的结果</li><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时<ul><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：<ul><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </li><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>注意：where标签不能去掉条件后多余的and&#x2F;or  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容  </li><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125; or</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li></ul><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">did = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li>属性：  <ul><li>collection：设置要循环的数组或集合  </li><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li>批量删除  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/images/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li><li>批量添加  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/images/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li></ul><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引用sql片段：<code>&lt;include&gt;</code>标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul><li>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </li><li>使一级缓存失效的四种情况：  <ol><li>不同的SqlSession对应不同的一级缓存  </li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul><li>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </li><li>二级缓存开启的条件<ol><li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<cache /></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性</li><li>eviction属性：缓存回收策略  <ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li></ul></li><li>size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly属性：只读，true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul><li>名字必须叫<code>ehcache.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul><li>在xxxMapper.xml文件中设置二级缓存类型<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  <ul><li>Java实体类  </li><li>Mapper接口  </li><li>Mapper映射文件</li></ul></li></ul><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul><li>文件名必须是：<code>generatorConfig.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul><li><img src="/images/Resources/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误<ul><li>dependency中的驱动<img src="/images/Resources/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>mybatis-generator-maven-plugin插件中的驱动<img src="/images/Resources/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="/images/Resources/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></li></ul><h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="/images/Resources/example%E7%9A%84%E6%96%B9%E6%B3%95.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line"><span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//或者did不为空</span></span><br><span class="line">example.or().andDidIsNotNull();</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/Resources/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></li></ul><h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null<ul><li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/images/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段<ul><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="/images/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li></ul></li></ul><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="/images/Resources/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能<ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/images/Resources/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p><h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分页相关数据：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul><li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据<ul><li>list：分页之后的数据  </li><li>navigatePages：导航分页的页码数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>分页相关数据：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure></li><li>其中list中的数据等同于方法一中直接输出的page数据</li></ul><h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数  </li><li>size：当前页显示的真实条数  </li><li>total：总记录数  </li><li>pages：总页数  </li><li>prePage：上一页的页码  </li><li>nextPage：下一页的页码</li><li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页  </li><li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页  </li><li>navigatePages：导航分页的页码数  </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
      
      
      <categories>
          
          <category> EasyPan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>口语表达</title>
      <link href="/2023/07/19/SE2_research/"/>
      <url>/2023/07/19/SE2_research/</url>
      
        <content type="html"><![CDATA[<ol><li>Introduction<br>microservices: 每个服务在其进程中运行并使用轻量级机制进行通信，不同服务之间的通信需要时间<br>Mainstream approaches to performance assessment：passive monitoring of the response time and resource utilization.</li></ol><p>This paper: enabling <strong>automated decision gates</strong> in performance testing of microservices that allow requirements traceability.</p><p>Methodology: integrating load testing and Bayesian inference</p><ol><li>目标操作的设计时分析：multiple user categories<br>analysis of the operational setting</li><li>通过负载测试和推断进行性能模型学习<br>指定一些关于SUT的先验知识，自动执行多个负载测试，并逐步学习系统行为。在此过程中，逐步完善DTMC模型，最后得到一个CTMC模型（第三阶段的输入）</li><li>验证要求并计算配置得分(PRISM)<br>verification<blockquote><p>什么是Discrete Time Markov Chain(DTMC): 状态空间中经过<strong>从一个状态到另一个状态的转换的随机过程</strong>。 该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关</p></blockquote></li></ol><blockquote><p>CTMC: 连续时间的马尔科夫链，其中状态转移发生的速率是随机的，并且每个状态转移的速率可以用指数分布来描述。CTMC模型可以用于描述系统中不同组件之间的交互，并且可以使用概率模型检查器对其进行形式化验证。</p></blockquote><p>key contributions</p><ol><li><p>一种新颖的方法论，通过<strong>自动化负载测试、贝叶斯推理和概率模型检查</strong>，在不同部署方案下对微服务系统进行模型学习和验证。</p></li><li><p>在代表性微服务系统基准测试中评估我们的方法论，指出其优点、成本和有效性威胁。</p></li></ol><blockquote><p>steady-state operator S: 停留在特定状态集的概率<br>transient operator P: 发生特定路径的概率</p></blockquote><blockquote><p>sock shop 是本论文要测试的系统</p></blockquote><p>workload intensity:  the number of (active) concurrent users in the SUT.<br>usage profile:  different groups of users</p><p>matrix C &#x3D; (cij) defining the transition counts for each pair of services (i, j).<br>pij: As an example, the transition probability p3,7 (i.e., getCatalogue → getItem) is equal to P(getCatalogue → getItem | buyer) · P(buyer)</p><p>Inference process<br>Termination condition</p><h1 id="Locust"><a href="#Locust" class="headerlink" title="Locust"></a>Locust</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><p>-P PORT被测系统的端口号<br>-f LOCUSTFILE 脚本文件<br>。。。</p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><h3 id="常用脚本增强技术"><a href="#常用脚本增强技术" class="headerlink" title="常用脚本增强技术"></a>常用脚本增强技术</h3><ol><li>关联：解决请求之间的依赖关系，将脚本中某些写死的数据，变成来自服务器的动态的每次不一样的数据<br>先存：通过一定的手段将服务器返回的数据进行捕获并且保存<br>后用：在需要关联的地方，调用保存的数据<br>正则表达式&#x2F;jsonpath&#x2F;lxml<br>参数化：<br>断点（检查点）<br>思考时间(等待时间)<br>事务(task)<br>集合点</li></ol>]]></content>
      
      
      <categories>
          
          <category> POLIMI </category>
          
          <category> SE2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> STUDY </tag>
            
            <tag> SE2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/07/11/leetcode(%E6%95%B0%E7%BB%84)/"/>
      <url>/2023/07/11/leetcode(%E6%95%B0%E7%BB%84)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>两个月刷<strong>500</strong>道题, 一天10道题</p></blockquote><h1 id="1920-Build-Array-from-Permutation"><a href="#1920-Build-Array-from-Permutation" class="headerlink" title="1920. Build Array from Permutation"></a>1920. Build Array from Permutation</h1><blockquote></blockquote><p>vector相关的一些成员：<a href="https://cplusplus.com/reference/vector/vector/">https://cplusplus.com/reference/vector/vector/</a></p><ol><li>Capacity<br>size() 返回数组的长度<br>max_size() 返回最大程度<br>resize() 改变长度</li><li>Modifiers<br>push_back(): 在末尾增加元素<br>pop_back(): 删除最后一个元素<br>reverse(): 翻转整个数组</li><li>构造函数</li></ol><ul><li>vector<int> first;</li><li>vector<int> second(4,100) &#x2F;&#x2F;four ints with value 100</li><li>vector<int> third(second.begin(), second.end());&#x2F;&#x2F;iterating through the second</li><li>vector<int> fourth(third); &#x2F;&#x2F;a copy of the third</li><li>int ans[]&#x3D;new int[nums.length];</li></ul><ol start="4"><li>Iterators<br>begin()<br>end()<br>frontAccess first element (public member function)<br>backAccess last element (public member function)<blockquote></blockquote>这道题可以新建一个数组存放新数据，也可以原地修改(类似高低位的思想)<br>题目中提到<code>nums[]</code>的元素的范围是0到999，所以我们可以将<code>nums[nums[i]]</code>中的元素取模再乘以1000加在<code>nums[i]</code>上。这时数组里保存的元素除以1000得到的除数就是我们想到的答案，余数是原值。</li></ol><h1 id="1929-Concatenation-of-Array"><a href="#1929-Concatenation-of-Array" class="headerlink" title="1929. Concatenation of Array"></a>1929. Concatenation of Array</h1><p>要注意不要忘了<code>*</code></p><h1 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a>31. Next Permutation</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。</span><br><span class="line"></span><br><span class="line">同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。</span><br><span class="line">具体地，我们这样描述该算法，对于长度为 n 的排列 a：</span><br><span class="line"></span><br><span class="line">首先从后向前查找第一个顺序对 (i,i+1)，满足 a[i]&lt;a[i+1]。这样「较小数」即为 a[i]。此时 [i+1,n) 必然是下降序列。</span><br><span class="line"></span><br><span class="line">如果找到了顺序对，那么在区间 [i+1,n) 中从后向前查找第一个元素 jjj 满足 a[i]&lt;a[j]。这样「较大数」即为 a[j]。</span><br><span class="line"></span><br><span class="line">交换 a[i] 与 a[j]，此时可以证明区间 [i+1,n) 必为降序。我们可以直接使用双指针反转区间 [i+1,n) 使其变为升序，而无需对该区间进行排序</span><br></pre></td></tr></table></figure><p><strong>现在的问题是没注意到【3，2，1】的情况</strong></p><hr><h1 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a>34. Find First and Last Position of Element in Sorted Array</h1><h2 id="要求时间复杂度是O-logn-用二分查找注意：1-如果没有找到，则返回-1-1-，那么我们可以在一开始初始化的时候就把result-2-设置成-1-1-2-关于二分查找要注意的一些点：-high要初始化为nums-size-1-最后关于mid的值：最后的截止条件是left-gt-right，此时可能没有找到target，那么此时nums-mid-x3D-target-如果没找到-if-left-gt-right"><a href="#要求时间复杂度是O-logn-用二分查找注意：1-如果没有找到，则返回-1-1-，那么我们可以在一开始初始化的时候就把result-2-设置成-1-1-2-关于二分查找要注意的一些点：-high要初始化为nums-size-1-最后关于mid的值：最后的截止条件是left-gt-right，此时可能没有找到target，那么此时nums-mid-x3D-target-如果没找到-if-left-gt-right" class="headerlink" title="要求时间复杂度是O(logn), 用二分查找注意：1. 如果没有找到，则返回[-1, -1]，那么我们可以在一开始初始化的时候就把result[2]设置成[-1,-1]2. 关于二分查找要注意的一些点：- high要初始化为nums.size()-1;- 最后关于mid的值：最后的截止条件是left &gt; right，此时可能没有找到target，那么此时nums[mid] !&#x3D; target;- 如果没找到: if(left &gt; right)"></a>要求时间复杂度是O(logn), 用二分查找<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int binarySearch(int[] nums, int target) &#123;</span><br><span class="line">    int left = 0, right = nums.size()-1;</span><br><span class="line"></span><br><span class="line">    while(left &lt;= right) &#123;</span><br><span class="line">        int mid = (right + left) / 2;</span><br><span class="line">        if (nums[mid] == target) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else if (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + 1;  </span><br><span class="line">        &#125; else if (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意：<br>1. 如果没有找到，则返回[-1, -1]，那么我们可以在一开始初始化的时候就把result[2]设置成[-1,-1]<br>2. 关于二分查找要注意的一些点：<br>- high要初始化为nums.size()-1;<br>- 最后关于mid的值：最后的截止条件是left &gt; right，此时可能没有找到target，那么此时nums[mid] !&#x3D; target;<br>- 如果没找到: if(left &gt; right)</h2><p>&#x2F;&#x2F;参数必须是begin()和end()<br>lower_bound(intervals.begin(),intervals.end(), target); &#x2F;&#x2F;找到的是第一个等于或大于 target 的位置<br>upper_bound(intervals.begin(),intervals.end(), target); &#x2F;&#x2F;找到的是第一个大于 target 的位置</p><h2 id="278-First-Bad-Version-二分查找相似题目"><a href="#278-First-Bad-Version-二分查找相似题目" class="headerlink" title="278. First Bad Version(二分查找相似题目)"></a>278. First Bad Version(二分查找相似题目)</h2><p>这道题的亮点在于要找到下标最小的target，在每次循环的时候，如果mid是不合格产品，就把high设为mid, 如果mid是合格产品，就把low设为mid+1</p><h2 id="2089-Find-Target-Indices-After-Sorting-Array-二分查找相似题目"><a href="#2089-Find-Target-Indices-After-Sorting-Array-二分查找相似题目" class="headerlink" title="2089. Find Target Indices After Sorting Array(二分查找相似题目)"></a>2089. Find Target Indices After Sorting Array(二分查找相似题目)</h2><p>这道题和34题极为相似，但用34题的解法效率不高，尤其是空间复杂度，明天看看怎么改善。</p><hr><h1 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a>33. Search in Rotated Sorted Array</h1><p>要求time complexity为O(logn), 所以采用二分查找法。<br>二分查找法要先设置low,high,mid，然后接一个while循环，先判断nums[mid]是不是要找的值，如果不是,调整low和high，计算出新的mid</p><h1 id="36-Valid-Sudoku"><a href="#36-Valid-Sudoku" class="headerlink" title="36. Valid Sudoku"></a>36. Valid Sudoku</h1><ol><li>java有一个数据结构叫hashset，<br>创建一个 HashSet 对象 sites，用于保存字符串元素：HashSet<String> sites &#x3D; new HashSet<String>();</li></ol><ul><li>contains() 方法来判断元素是否存在于集合当中: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sites.add(&quot;Runoob&quot;);  // 重复的元素不会被添加</span><br><span class="line">System.out.println(sites.contains(&quot;Taobao&quot;));</span><br></pre></td></tr></table></figure></li><li>remove() 方法来删除集合中的元素:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sites.add(&quot;Runoob&quot;);     // 重复的元素不会被添加</span><br><span class="line">sites.remove(&quot;Taobao&quot;);  // 删除元素，删除成功返回 true，否则为 false</span><br></pre></td></tr></table></figure></li><li>删除集合中所有元素可以使用 clear 方法：<br><code>sites.clear();  </code></li><li>如果要计算 HashSet 中的元素数量可以使用 size() 方法：<br><code>System.out.println(sites.size()); </code></li></ul><ol start="2"><li>unordered_set<br><a href="https://blog.csdn.net/qq_40286920/article/details/124731777">unordered_set详细介绍</a><br><a href="https://en.cppreference.com/w/cpp/container/unordered_set">cppreference.com</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">    public:</span><br><span class="line">    //All we need to do is check if there is any repitition in row, column, and subbox. To support quick lookups, we can use hashmap, unordered_set specifically</span><br><span class="line">    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt; &amp;board)&#123;</span><br><span class="line">        // 1. check row equality</span><br><span class="line">        for(int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">            unordered_set&lt;char&gt; check_row;</span><br><span class="line">            for(int col = 0; col &lt; 9; col++)&#123;</span><br><span class="line">                if(board[row][col] != &#x27;.&#x27; &amp;&amp; check_row.contains(board[row][col])) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                else </span><br><span class="line">                    check_row.insert(board[row][col]);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2. check column quality</span><br><span class="line">        for (int col=0; col &lt; 9; col++)&#123;</span><br><span class="line">            unordered_set&lt;char&gt; check_col;</span><br><span class="line">            for(int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">                if(board[row][col] != &#x27;.&#x27; &amp;&amp; check_col.contains(board[row][col])) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                else check_col.insert(board[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 3. check subbox equality</span><br><span class="line">        /*</span><br><span class="line">        for (int row = 0; row &lt; 7; row++)&#123;</span><br><span class="line">            for (int col = 0; col &lt; 7; col++)&#123;</span><br><span class="line">                unordered_set&lt;char&gt; check_box;</span><br><span class="line">                for (int i = row; i&lt;(row + 3); i++)&#123;</span><br><span class="line">                    for (int j = col; j &lt; (col+3); j++)&#123;</span><br><span class="line">                        if(board[i][j] != &#x27;.&#x27; &amp;&amp; check_box.contains(board[i][j]))&#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else check_box.insert(board[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">        vector&lt;unordered_set&lt;char&gt;&gt; check_subbox(9);</span><br><span class="line">        for (int row = 0; row &lt; 9; row++)&#123;</span><br><span class="line">            for (int col = 0; col &lt; 9; col++)&#123;</span><br><span class="line">                int loc = (row / 3) *  3 + col / 3;</span><br><span class="line">                if(board[row][col]!=&#x27;.&#x27; &amp;&amp; check_subbox[loc].contains(board[row][col]) ) return false;</span><br><span class="line">                else check_subbox[loc].insert(board[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h1><h1 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a>54. Spiral Matrix</h1><ol><li>可以通过设置<code>currentAdderX</code>和<code>currentAdderY</code>控制遍历的方向；</li><li>每次转向的时候改变boundary，例如向下走直到转向时，要改变Y-方向上的上限值，向右转向时，要改变X-方向上的下限值；</li><li>二维vector的下标：<blockquote><p>明天研究用DFS算法改进解决方案</p></blockquote></li></ol><h1 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a>56. Merge Intervals</h1><p>sort(intervals.begin(),intervals.end());</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组(Array) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ILP</title>
      <link href="/2023/07/11/FOR_ILP/"/>
      <url>/2023/07/11/FOR_ILP/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-Branch-and-bound-method"><a href="#5-1-Branch-and-bound-method" class="headerlink" title="5.1 Branch-and-bound method"></a>5.1 Branch-and-bound method</h1><p>把feasible region X分成X1和X2两个subregion<br>Branching Tree</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>德语学习</title>
      <link href="/2023/07/02/German/"/>
      <url>/2023/07/02/German/</url>
      
        <content type="html"><![CDATA[<h1 id="字母"><a href="#字母" class="headerlink" title="字母"></a>字母</h1><p>啊 A a<br>杯 B b<br>C c [tse:]<br>D d [de:]<br>E e [e:]<br>F f<br>G g [ge:]<br>H h [ha:]<br>I i [i:]<br>J j<br>K a [Ka:]<br>L l<br>M m<br>N n<br>O o<br>P p [pe:]<br>Q q [ku:]<br>R r<br>S s<br>T t<br>U u<br>V v<br>W w<br>X x<br>Y y<br>Z z</p><h2 id="元音字母"><a href="#元音字母" class="headerlink" title="元音字母"></a>元音字母</h2><table><thead><tr><th align="center">a</th><th align="center">e</th><th align="center">i</th><th align="center">o</th><th align="center">u</th></tr></thead><tbody><tr><td align="center">啊</td><td align="center">A</td><td align="center">衣</td><td align="center">欧</td><td align="center">乌</td></tr></tbody></table><p>啥时候读</p><ol><li>单音节词以元音字母结尾时</li><li>元音字母之后有不发音的字母”h”作为延长音符号时，如ah,eh,ih,oh,uh,geht,Kuh等等</li><li>元音字母重叠时，即aa,ee,ie,oo, 如：Aal, Maat, Tee, See, die, Sie, Boot等等<br>德语单词里没有ii重叠的现象，以<strong>ie</strong>的形式代替。也没有<strong>uu</strong>重叠的现象，所以uh读u的长音，如Uhr, Uhren等</li><li>元音字母之后只有一个辅音字母时，该元音通常也读长音，如 gut, Tat, tun, tut, Kino, Kinos, Politik等</li><li>双音节或多音节单词中以元音字母单独作为一个音节时，如：Oma, Omi, Opa, Opi, Alu, Ameisen等</li></ol><p>hhhhwwww<br><img src="/images/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> German </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> German </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习简记</title>
      <link href="/2023/06/30/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/30/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Hello, 世界&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$ go build helloworld.go</code><br>在win下生成exe可执行文件</p><p>package：类似于其它语言里的库或模块，一个package由多个.go组成，每个文件都要写package XXX</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Review Plan</title>
      <link href="/2023/06/26/%E6%AF%8F%E6%97%A5%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2023/06/26/%E6%AF%8F%E6%97%A5%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TCS：<br>DB2：13号前把所有的例题都看完<br>CI：<br>ACA：每天三个小时复习大题<br>FOR：8号之前看完所有的例题<br>MIDA<br>CS<br>MIDA2<br>AAPP<br>AN2DL<br>SE2</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2023/06/25/Go%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E5%99%A8/"/>
      <url>/2023/06/25/Go%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="1-1-新语言简介"><a href="#1-1-新语言简介" class="headerlink" title="1.1 新语言简介"></a>1.1 新语言简介</h2><ul><li>名称：FWJ<br>弗雷格-维特根斯坦-乔姆斯基</li><li>类型：一门动态类型多范式高级编程语言</li></ul><h2 id="1-2-第一个FWJ程序"><a href="#1-2-第一个FWJ程序" class="headerlink" title="1.2 第一个FWJ程序"></a>1.2 第一个FWJ程序</h2><p>文件: hello.fwj</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><h2 id="1-3-FWJ解释器"><a href="#1-3-FWJ解释器" class="headerlink" title="1.3 FWJ解释器"></a>1.3 FWJ解释器</h2><ul><li>实现语言：Go</li><li>原生开发：不依赖第三方库</li><li>代码-词法分析器-语法分析器-求值</li></ul><h2 id="1-4-为什么要做一个语言解释器"><a href="#1-4-为什么要做一个语言解释器" class="headerlink" title="1.4 为什么要做一个语言解释器"></a>1.4 为什么要做一个语言解释器</h2><h1 id="词法分析-Lexing"><a href="#词法分析-Lexing" class="headerlink" title="词法分析(Lexing)"></a>词法分析(Lexing)</h1>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ranking Queries</title>
      <link href="/2023/06/15/DB_Ranking%20queries/"/>
      <url>/2023/06/15/DB_Ranking%20queries/</url>
      
        <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><p>Multi-objective optimization<br>• Main approaches:<br>– Ranking (aka top-k) queries<br>• Top k objects according to a given scoring function<br>– Skyline queries<br>• Set of non-dominated objects</p><h1 id="老办法"><a href="#老办法" class="headerlink" title="老办法"></a>老办法</h1><ol><li>Rank aggregation<br>Borda’s(candidate with the lowest penalty) and Condorcet’s proposals(A candidate who defeats every other candidate in pairwise majority rule election)</li></ol><ul><li>Axiomatic approach</li><li>Metric approach<br>Finding a new ranking R whose total distance to the initial rankings R1,…, Rn is minimized</li></ul><h1 id="Ranking-aka-top-k-queries"><a href="#Ranking-aka-top-k-queries" class="headerlink" title="Ranking (aka top-k) queries"></a>Ranking (aka top-k) queries</h1><ul><li>Combining opaque rankings<br>有多个表，求top-k<br>eg. hotel<br><strong>MedRank</strong> is not optimal<br>§ However, it is instance-optimal</li></ul><h2 id="Top-k-join-queries"><a href="#Top-k-join-queries" class="headerlink" title="Top-k join queries"></a>Top-k join queries</h2><p>SELECT E.*<br>FROM EMP E, DEPT D<br>WHERE E.DNO &#x3D; D.DNO<br>ORDER BY E.Salary &#x2F; D.Budget DESC<br>FETCH FIRST 1 ROW ONLY</p><h2 id="Top-k-1-1-join-queries"><a href="#Top-k-1-1-join-queries" class="headerlink" title="Top-k 1-1 join queries"></a>Top-k 1-1 join queries</h2><p>SELECT *<br>FROM EatWell EW, BreadAndWine BW<br>WHERE EW.Name &#x3D; BW.Name<br>ORDER BY EW.Score + BW.Score DESC<br>FETCH FIRST 1 ROW ONLY</p><h3 id="Common-scoring-functions"><a href="#Common-scoring-functions" class="headerlink" title="Common scoring functions"></a>Common scoring functions</h3><ol><li>SUM (AVG): used to weigh preferences equally<br>SUM(o) º SUM(p(o)) &#x3D; p1(o) + p2(o) + … + pm(o)</li><li>WSUM (Weighted sum): to weigh the ranking attributes differently<br>WSUM(o) º WSUM(p(o)) &#x3D; w1<em>p1(o) + w2</em>p2(o) + … + wm*pm(o)</li><li>MIN (Minimum): just considers the worst partial score<br>MIN(o) º MIN(p(o)) &#x3D; min{p1(o),p2(o), …, pm(o)}</li><li>MAX (Maximum): just considers the best partial score<br>MAX(o) º MAX(p(o)) &#x3D; max{p1(o),p2(o), …, pm(o)}</li></ol><h3 id="The-B0-algorithm-using-a-scoring-function-S"><a href="#The-B0-algorithm-using-a-scoring-function-S" class="headerlink" title="The B0 algorithm(using a scoring function S)"></a>The B0 algorithm(using a scoring function S)</h3><p>B0 only works for MAX<br>有m个排好序的list，在每个list上做k次有序访问，把对象和对应的分数存在buffer里，计算buffer里的每个对象的最大分数，返回topk</p><h3 id="Fagin’s-Algorithm-FA"><a href="#Fagin’s-Algorithm-FA" class="headerlink" title="Fagin’s Algorithm (FA)"></a>Fagin’s Algorithm (FA)</h3><p>at least k objects in common, 找到k个以后在目前遇到的object里面挑</p><h3 id="Threshold-Algorithm-TA"><a href="#Threshold-Algorithm-TA" class="headerlink" title="Threshold Algorithm (TA)"></a>Threshold Algorithm (TA)</h3><p>Threshold(把当前行代入Score函数中)<br>给定Score函数，停止直到top-k的score不比threshold差</p><h3 id="The-NRA-algorithm-preliminaries"><a href="#The-NRA-algorithm-preliminaries" class="headerlink" title="The NRA algorithm: preliminaries"></a>The NRA algorithm: preliminaries</h3><p>| id | lbscore | ubscore |</p><table><thead><tr><th align="center">Algorithm</th><th align="center">Scoring function</th><th align="center">Data access</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">B0</td><td align="center">MAX</td><td align="center">sorted</td><td align="center">instance-optimal</td></tr><tr><td align="center">FA</td><td align="center">monotone</td><td align="center">sorted and random</td><td align="center">cost independent of scoring function</td></tr><tr><td align="center">TA</td><td align="center">monotone</td><td align="center">sorted and random</td><td align="center">instance-optimal</td></tr><tr><td align="center">NRA</td><td align="center">monotone</td><td align="center">sorted</td><td align="center">instance-optimal, no exact scores</td></tr></tbody></table><h1 id="Skyline-queries"><a href="#Skyline-queries" class="headerlink" title="Skyline queries"></a>Skyline queries</h1><p>首先根据某些单调函数来排序，然后画线</p><table><thead><tr><th align="center"></th><th align="center">Ranking queries</th><th align="center">Skyline queries</th></tr></thead><tbody><tr><td align="center">Simplicity</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center">Overall view of interesting results</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center">Control of cardinality</td><td align="center">Yes</td><td align="center">No</td></tr><tr><td align="center">Trade-off among attributes</td><td align="center">Yes</td><td align="center">No</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phiscal Databases</title>
      <link href="/2023/06/15/DB_JPA/"/>
      <url>/2023/06/15/DB_JPA/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>Goals: understanding database development in the context of architecture and application development</p><h2 id="有哪些架构"><a href="#有哪些架构" class="headerlink" title="有哪些架构"></a>有哪些架构</h2><ul><li>Two-tier architectures (client-server)</li><li>Three-tier architectures<br>New element: à middle tier(更好地分离client和server)</li><li>Web “pure HTML” 3-tier architectures<br>The client is a standard Web browser(Thin client)</li><li>Rich Internet Applications<br>Enabling technology: client side scripting (with JavaScript) Fat client</li></ul><h2 id="什么是JPA"><a href="#什么是JPA" class="headerlink" title="什么是JPA"></a>什么是JPA</h2><p><strong>Java Persistence API</strong><br>The specification of an interface for mapping relational data to object oriented data in Java<br>在Java中映射<strong>关系数据</strong>到<strong>面向对象数据</strong>的接口规范。</p><ul><li>Java Transaction API (JTA)<br>• An API for managing transactions in Java</li></ul><h3 id="main-concept"><a href="#main-concept" class="headerlink" title="main concept"></a>main concept</h3><ul><li>Entity</li><li>Persistence Unit(like db schema)</li><li>Persistence Context(like db instance)</li><li>Managed entity</li><li>Entity manager</li><li>Client</li></ul><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><p>The technique of bridging the gap between the** object model** and the <strong>relational model</strong></p><h2 id="Entity-Constraints"><a href="#Entity-Constraints" class="headerlink" title="Entity Constraints"></a>Entity Constraints</h2><ol><li>The entity class must have a public or protected no-arg constructor(无参构造函数)</li><li>The entity class must not be final(实体类不能被继承，重写或修改)</li><li><strong>No method or persistent instance variables</strong> of the entity class may be final</li><li>If an entity instance is to be passed by value as a detached object, the Serializable interface must be implemented</li></ol><h2 id="Entity-Identification"><a href="#Entity-Identification" class="headerlink" title="Entity Identification"></a>Entity Identification</h2><p>• Simple Primary key &#x3D; persistent field of the bean<br>used to represent its identity<br>• Composite Primary key &#x3D; set of persistent fields<br>used to represent its identity<br>• Remark: with respect to the POJOs, the persistent<br>identity is a new concept. POJOS do not have a<br>durable identity</p><h2 id="Identifier-generation-options"><a href="#Identifier-generation-options" class="headerlink" title="Identifier generation options"></a>Identifier generation options</h2><ul><li>AUTO<br>The provider generates identifiers by using whatever strategy it wants</li><li>TABLE<br>Identifiers are generated according to a generator table</li><li>SEQUENCE<br>If the underlying DB supports sequences, the provider will use this feature for generating IDs</li><li>IDENTITY<br>If the underlying DB supports primary key identity columns, the provider will use this feature for generating IDs</li></ul><h2 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h2><ol><li>All relationships in JPA are unidirectional</li><li>Based on directionality, one entity plays the role of source and one the role of target.</li><li>Cardinality(基数)</li><li>Ownership</li></ol><p>@joincolumn vs mappedBy</p><h2 id="Join-Table"><a href="#Join-Table" class="headerlink" title="Join Table"></a>Join Table</h2><p>Relationship fetch mode<br>Cascading operations<br>Orphan removal</p><h2 id="ManyToOne-annotation-in-Employee-java"><a href="#ManyToOne-annotation-in-Employee-java" class="headerlink" title="@ManyToOne annotation in Employee.java**"></a>@ManyToOne annotation in Employee.java**</h2><p>@Entity<br>public class Employee {<br>@Id private int id;<br>@ManyToOne<br>@JoinColumn(name&#x3D;”dept_fk”)<br>private Department dept;<br>…<br>}</p><h1 id="EM-The-Entity-Manager"><a href="#EM-The-Entity-Manager" class="headerlink" title="EM(The Entity Manager)"></a>EM(The Entity Manager)</h1><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(25周)</title>
      <link href="/2023/06/13/words(week25)/"/>
      <url>/2023/06/13/words(week25)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-The-global-space-economy-is-coming-of-age"><a href="#1-The-global-space-economy-is-coming-of-age" class="headerlink" title="1. The global space economy is coming of age"></a>1. The global space economy is coming of age</h1><p>在这个句子中，“coming of age”是一个习语，意思是某事物已经成熟或发展到了一定的阶段。在这个句子中，“coming of age”表示全球太空经济正在迅速发展并变得更加成熟。</p><p>例如：</p><ul><li>After years of hard work, the young artist’s talent finally came of age and he became famous.（经过多年的努力，这位年轻艺术家终于成名了。）</li><li>The internet has come of age as a powerful tool for communication and commerce.（互联网作为一种强大的通信和商业工具已经越来越成熟。）</li></ul><h1 id="2-Italians-divided-over-Berlusconi-legacy"><a href="#2-Italians-divided-over-Berlusconi-legacy" class="headerlink" title="2. Italians divided over Berlusconi legacy"></a>2. Italians divided over Berlusconi legacy</h1><p>在这个句子中，”divide” 的意思是分裂或分开，”legacy” 指的是某人或某事物留下来的遗产、传统或影响。整个句子的意思是：意大利人对贝卢斯科尼的遗产持不同看法。</p><p>在这里，“divided over” 是一个习语，表示人们对某件事情有不同的观点或立场。以下是一些类似用法的例子：</p><ol><li>The country is divided over the issue of gun control. (全国就枪支管制问题存在分歧)</li><li>Our team was divided over whether to accept the offer or not. (我们团队内部因是否接受那份报价而存在争议)</li></ol><h1 id="3-intrinsically"><a href="#3-intrinsically" class="headerlink" title="3. intrinsically"></a>3. intrinsically</h1><p>[英]· &#x2F;ɪnˈtrɪnsɪkli&#x2F;<br>[副词] 本质上；内在地；固有地<br>例句：</p><ol><li>The value of art is intrinsically linked to its cultural context. (艺术的价值与其文化背景密不可分。)</li><li>Happiness cannot be found in material possessions, it must come from within, intrinsically. (幸福不能从物质拥有中获得，它必须来自内心，是内在的。)</li><li>The beauty of nature is intrinsically connected to the health and well-being of our planet. (大自然的美丽与我们星球的健康和福祉息息相关。)<br>词源：<br>intrinsecus（拉丁语），意为“内部的、本质上的”。</li></ol><h1 id="4-fortiori"><a href="#4-fortiori" class="headerlink" title="4. fortiori"></a>4. fortiori</h1><p>[拉丁语]· &#x2F;fɔːtiˈoʊraɪ&#x2F;<br>[adv.] 更加强有力地；更为明显地；更进一步地<br>例句：</p><ol><li>The evidence against him is strong, and fortiori, he should be found guilty. (对他的指控证据很充分，因此他应该被判有罪。)</li><li>If the government cannot even provide basic necessities for its citizens, then fortiori it has failed in its duty to protect them. (如果政府连基本生活必需品都无法提供给公民，那么它在保护公民方面就更是失败了。)</li><li>He was already a skilled musician before attending music school, so fortiori he excelled in his studies there. (他在上音乐学校之前已经是一位熟练的音乐家，因此在那里表现得尤为出色。)<br>词源：<br>来自拉丁语“fortius”，意为“更强大”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.6.6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec14</title>
      <link href="/2023/06/12/Lec14/"/>
      <url>/2023/06/12/Lec14/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec15</title>
      <link href="/2023/06/12/Lec15/"/>
      <url>/2023/06/12/Lec15/</url>
      
        <content type="html"><![CDATA[<p>CPU的速度超过了内存的速度，内存无法跟上处理器的速度<br>引进cache</p><p>Q1: Where can a block be placed in the cache?<br>(Block placement)<br>Fully Associative, (2-way) Set Associative, Direct mapped<br>Q2: How is a block found if it is in the cache?<br>(Block identification)<br>Q3: Which block should be replaced on a miss?<br>(Block replacement)<br>Random, LRU, FIFO<br>Q4: What happens on a write?<br>(Write strategy)<br>Write through, Write back<br>no write allocate(直接将数据写入内存), write allocate(写时取回)</p><p><strong>Cache performance：</strong><br>AMAT &#x3D; Average Memory Access Time<br>CPIALUOps does not include memory instructions</p><p>AMAT &#x3D; Hit time + miss rate x miss penalty</p><ol><li>Reduce the miss rate<br>Hardware Prefetching</li><li>Reduce the miss penalty<br>to introduce a second level cache</li><li>Reduce the time to hit in the cache</li></ol><h1 id="1-Memory-Hierarchy-Review"><a href="#1-Memory-Hierarchy-Review" class="headerlink" title="1. Memory Hierarchy Review"></a>1. Memory Hierarchy Review</h1><h1 id="2-MIMD-Architectures"><a href="#2-MIMD-Architectures" class="headerlink" title="2. MIMD Architectures"></a>2. MIMD Architectures</h1><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p>Memory Address Space Model<br>Single logically shared address space: Shared Memory Architectures<br>Multiple and private address spaces: Message Passing Architectures</p><p>Address Space vs. Physical Memory</p><p>Shared Memory &amp; Message Passing</p><p>解决coherency问题：<br>Two classes of protocols:<br>Snooping Protocols(嗅探)<br>Directory-Based Protocols(基于目录)</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末考试复习心得</title>
      <link href="/2023/06/11/ACA_Review/"/>
      <url>/2023/06/11/ACA_Review/</url>
      
        <content type="html"><![CDATA[<ol><li>怎么找RAW？<br>对于同一个寄存器，先找到W，再往下看，看有没有R，如果下面有新的W，RAW到此为止</li><li>关于VLIW的题，<br>先找到conflicts，</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec12:Parallel Architectures:SIMD and intro to MIMD</title>
      <link href="/2023/06/09/Lec13/"/>
      <url>/2023/06/09/Lec13/</url>
      
        <content type="html"><![CDATA[<ol><li>SISD<br>Only one instruction stream, only one data stream</li><li>SIMD<br>Same instruction executed by multiple processors using different data streams.<br>每个处理器都有自己的memory, 只有一个控制单元，只有一个代码副本</li><li>MISD<br>A single data stream is fed into multiple processing units.</li><li>MIMD<br>• Multiple Instruction: every processor may be executing a different instruction stream<br>• Multiple Data: every processor may be working with a different data stream</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec12:ILP Limits and Superscalar Architecture</title>
      <link href="/2023/06/09/Lec12/"/>
      <url>/2023/06/09/Lec12/</url>
      
        <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol><li>Review<br>ILP Journey<br>ILP Definition<br>Superscalar Architectures, Static and Dynamic<br>Schedulers</li><li>Limits to ILP<br>Ideal machine<br>Limits<br>Examples of real architectures</li></ol><h1 id="Superscalar-Execution-为什么多个指令不在同一个时钟周期开始执行呢"><a href="#Superscalar-Execution-为什么多个指令不在同一个时钟周期开始执行呢" class="headerlink" title="Superscalar Execution(为什么多个指令不在同一个时钟周期开始执行呢)"></a>Superscalar Execution(为什么多个指令不在同一个时钟周期开始执行呢)</h1><ol><li>在每个时钟周期fetch多条指令</li><li>Decide on data and control dependencies:<br>dynamic scheduling and dynamic branch<br>prediction</li></ol><h1 id="Modern-Supercalar"><a href="#Modern-Supercalar" class="headerlink" title="Modern Supercalar"></a>Modern Supercalar</h1><p>Dynamic scheduling + multiple issue + speculation</p><h1 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h1><ol><li>Window size</li><li>N. of functional units</li><li>N. of busses</li><li>N. of ports for the register file</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec11:Explicit Register Renaming</title>
      <link href="/2023/06/09/Lec11/"/>
      <url>/2023/06/09/Lec11/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是renaming"><a href="#什么是renaming" class="headerlink" title="什么是renaming"></a>什么是renaming</h1><p>Key insight: Allocate a new physical destination register for every instruction that writes<br>Very similar to a compiler transformation called Static Single Assignment (SSA) form — but in hardware!</p><p>Mechanism? Keep a translation table:<br>ISA register ➔ physical register mapping</p><p>在decode阶段rename寄存器(Mapping)，但不读取寄存器的值<br>function units从统一的寄存器文件中读写数据，包括已经提交的和临时的寄存器<br>Commit仅仅是改变一下Architectural和Phiscal寄存器的映射关系</p><p>Tomasulo提供Implicit Register Renaming(寄存器被重命名为Reservation Station的标签)<br>现在讨论Explicit Register Renaming:<br>用physical register file(这个比寄存器的数量多得多)<br>ISA register &lt;&#x3D;&gt; physical register mapping<br>当寄存器被写好后，从freelist里找一个新的寄存器来代替表的entry，一个指令有一个entry</p><p>有什么好处？<br>可以消除WAR和WAW<br>和Tomasulo一样，允许out-of-order完成</p><h1 id="Stage-of-Scoreboard-Control-With-Explicit-Renaming"><a href="#Stage-of-Scoreboard-Control-With-Explicit-Renaming" class="headerlink" title="Stage of Scoreboard Control With Explicit Renaming"></a>Stage of Scoreboard Control With Explicit Renaming</h1><ol><li>ISSUE<br>解码 + 检查structural hazards + 为结果分配新的physical register<br>指令按program order来issue，没有空闲的physical register就别issue，有structural hazard别issue</li><li>Read operands<br>等到没有hazard, 再读操作数。所有的dependencies(RAW)都在这个阶段解决</li><li>Execution<br>Function unit一收到操作数就开始执行。当结果都准备好，通知scoreboard</li><li>Write result<br>完成执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">不用检测WAR和WAW</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1><ol><li>什么时候需要rename？<br>只有destination register才需要renaming</li><li>放入一次function unit status表，就rename一次destination register</li><li>不用考虑每条指令等待几个周期，只需要一个周期一个周期往下推就行，RAW hazard中，被依赖的指令完成后(第n个周期Write Result)，才可以执行下一条指令(第n+1个周期read operands)</li></ol><h1 id="Register-renaming-vs-ROB"><a href="#Register-renaming-vs-ROB" class="headerlink" title="Register renaming vs. ROB"></a>Register renaming vs. ROB</h1><p>前者指令commit更简单一些，但释放寄存器更为复杂</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec10:Hardware-Based Speculation</title>
      <link href="/2023/06/08/Lec10/"/>
      <url>/2023/06/08/Lec10/</url>
      
        <content type="html"><![CDATA[<h1 id="HW-based-speculation-main-idea"><a href="#HW-based-speculation-main-idea" class="headerlink" title="HW-based speculation main idea"></a>HW-based speculation main idea</h1><ol><li>Dynamic Branch Prediction<br>choose which instruction to execute</li><li>Dynamic Scheduling<br>out-of-order execution but inorder commit </li><li>Speculation<br>execute instructions before control dependences are resolved</li></ol><h2 id="The-key-idea-behind-speculation-is"><a href="#The-key-idea-behind-speculation-is" class="headerlink" title="The key idea behind speculation is"></a>The key idea behind speculation is</h2><ol><li>to <strong>issue and execute instructions dependent on a branch</strong> before the branch outcome is known;</li><li>to allow instructions to <strong>execute out-of-order</strong> but to force them to <strong>commit in-order</strong>;<br>to prevent any irrevocable action (such as updating state or taking an exception) until an instruction commits;</li></ol><h1 id="Reorder-Buffer"><a href="#Reorder-Buffer" class="headerlink" title="Reorder Buffer"></a>Reorder Buffer</h1><ol><li>Re-order buffer(ROB)保存未提交但已完成的寄存器的结果(从completion到commit)<br>指令什么时候提交？1. 完成execution 2. 前面的指令都提交<br>当指令提交后，结果就会从ROB转到register</li><li>Entries(条目)在decode的阶段按程序的顺序分配</li><li>已完成(completed)未提交(uncommited)的值可以被相关指令使用</li><li>load&#x2F;store指令的reordering需要特殊的数据结构</li></ol><h2 id="Speculative-Tomasulo-Algorithm"><a href="#Speculative-Tomasulo-Algorithm" class="headerlink" title="Speculative Tomasulo Algorithm"></a>Speculative Tomasulo Algorithm</h2><ol><li>Issue<br>如果Reservation Station和Reorder Buffer slot都有空，就issue instruction &amp;&amp; send operands &amp;&amp; reorder buffer no. for destination</li><li>Execution<br>当两个操作数都准备好，就开始execution，没准备好，就等CDB(common data bus)，当两个操作数都在 reservation station，执行</li><li>Write Result<br>写到CDB准备好传给等待的FU和ROB</li><li>Commit<br>3种：normal commit, Store commit, Instruction is a branch with incorrect prediction</li></ol><h2 id="Each-entry-in-ROB-contains-four-fields"><a href="#Each-entry-in-ROB-contains-four-fields" class="headerlink" title="Each entry in ROB contains four fields"></a>Each entry in ROB contains four fields</h2><ol><li><strong>Instruction type field</strong> – indicates whether instruction is a branch (no destination<br>result), a store (has memory address destination), or a load&#x2F;ALU (register<br>destination)</li><li><strong>Destination field</strong>: supplies register number (for loads and ALU instructions) or<br>memory address (for stores) where results should be written;</li><li><strong>Value field</strong> (used to hold value of result until instruction commits)</li><li><strong>Ready field</strong>: indicates that instruction has completed execution, value is ready</li></ol><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec9:Exception Handling</title>
      <link href="/2023/06/08/Lec9/"/>
      <url>/2023/06/08/Lec9/</url>
      
        <content type="html"><![CDATA[<h1 id="Classes-of-exceptions"><a href="#Classes-of-exceptions" class="headerlink" title="Classes of exceptions"></a>Classes of exceptions</h1><ol><li>Synchronous vs asynchronous</li><li>User requested vs coerced(被迫)</li><li>User maskable vs user nonmaskable</li><li>Within vs between instructions</li><li>Resume vs terminate</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec8:Dynamic Scheduling, Tomasulo</title>
      <link href="/2023/06/07/Lec8/"/>
      <url>/2023/06/07/Lec8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Tomasulo-algorithm"><a href="#1-Tomasulo-algorithm" class="headerlink" title="1. Tomasulo algorithm"></a>1. Tomasulo algorithm</h1><p>Reservation Stations(Operand buffers)<br>Each instruction is an entry of a reservation station<br>Its operands are replaced by values or pointers (Register Renaming)-&gt;<strong>避免WAR和WAW</strong></p><h2 id="3-stage-of-the-Tomasulo-Algorithm"><a href="#3-stage-of-the-Tomasulo-Algorithm" class="headerlink" title="3-stage of the Tomasulo Algorithm:"></a>3-stage of the Tomasulo Algorithm:</h2><p>ISSUE<br>EXECUTION<br>WRITE</p><p><strong>Reservation Station Components</strong></p><ul><li>Tag identifying the RS</li><li>OP &#x3D; the operation to perform on the component.</li><li>Vj, Vk &#x3D; Value of the source operands</li><li>Qj,Qk &#x3D; Pointers to RS that produce Vj,Vk<br>Zero value &#x3D; Source op. is already available in Vj or Vk</li><li>Busy &#x3D; Indicates RS Busy<br>Note: Only one of V-field or Q-field is valid for each operand<br><strong>其他component</strong></li><li>RF and the Store buffer have a Value (V) and a Pointer (Q) field.<br>Pointer (Q) field corresponds to number of reservation station producing the<br>result to be stored in RF or store buffer<br>If zero  no active instructions producing the result<br>(RF or store buffer content is the correct value).</li></ul><h1 id="2-Comparison-between-Scoreboard-and-Tomasulo"><a href="#2-Comparison-between-Scoreboard-and-Tomasulo" class="headerlink" title="2. Comparison between Scoreboard and Tomasulo"></a>2. Comparison between Scoreboard and Tomasulo</h1><p>• Control &amp; buffers distributed with Function Units (FU) vs.<br>centralized in scoreboard;<br>• FU buffers called “reservation stations”; have pending operands<br>• Registers in instructions replaced by values or pointers to<br>reservation stations(RS); called register renaming ;<br>• avoids WAR, WAW hazards<br>• More reservation stations than registers, so can do optimizations compilers can’t<br>• Results to FU from RS, not through registers, over Common Data<br>Bus that broadcasts results to all FUs<br>• Load and Stores treated as FUs with RSs as well<br>• Integer instructions can go past branches, allowing<br>FP ops beyond basic block in FP queue</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(24周)</title>
      <link href="/2023/06/06/words(week24)/"/>
      <url>/2023/06/06/words(week24)/</url>
      
        <content type="html"><![CDATA[<h1 id="Initiation-interval"><a href="#Initiation-interval" class="headerlink" title="Initiation interval"></a>Initiation interval</h1><p>在这个句子中，“interval”是一个名词，表示两个事件或时间之间的间隔。在“Initiation interval”的语境下，它指的是某个过程中开始和结束之间的时间段。</p><p>这个句子的意思是，在某个过程中，有一个特定的时间段用来启动该过程。</p><p>在英语中，“interval”还可以用于描述音乐、体育比赛等方面。例如：</p><ul><li>The orchestra took a short interval after the first movement. (管弦乐队在第一部分后休息了一会儿。)</li><li>There will be a 15-minute interval between the two halves of the football match. (足球比赛两半场之间将有15分钟的休息时间。)</li></ul><h1 id="pending"><a href="#pending" class="headerlink" title="pending"></a>pending</h1><p>在这个句子中，单词”pending”是一个形容词，用来描述指令的状态。它意味着有一些指令已经被下达但还没有完成或者等待执行。</p><p>整个句子的意思是：如果没有未决的指示，就会将该寄存器写入空白。</p><p>在这个句子中，并没有使用到任何习语。以下是几个例子：</p><ol><li>My pending workload is making me stressed out. (我的待处理工作量让我感到很压力)</li><li>The court case has been pending for months now. (这起法庭案件已经悬而未决数月了)</li></ol><h1 id="plain-old"><a href="#plain-old" class="headerlink" title="plain old"></a>plain old</h1><p>Plain Old”也可以用作习惯用语来表示“非常普通、平凡”的含义。例如，“plain old car”就表示“非常普通的汽车”</p><h1 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h1><p>[英]· &#x2F;ˌænəʊˈteɪʃən&#x2F; 或 &#x2F;ˌanəʊˈteɪʃ(ə)n&#x2F;<br>[n.] 注释；评注；批注<br>[v.] 给…作注解；加注释于…<br>例句：</p><ol><li>The book contains annotations by the author. (这本书包含了作者的注释。)</li><li>She spent hours annotating her research paper. (她花了几个小时给她的研究论文做标记。)</li><li>The software allows users to annotate PDF documents with comments and highlights. (该软件允许用户使用评论和高亮显示来对PDF文件进行标记。)</li></ol><p>词源：来自拉丁语“annotatio”，意为“解释，说明”。</p><h1 id="specification"><a href="#specification" class="headerlink" title="specification"></a>specification</h1><p>[英]· &#x2F;ˌspesɪfɪˈkeɪʃ(ə)n&#x2F;  美· &#x2F;ˌspɛsəfɪˈkeʃən&#x2F;<br>[n.] 规格；规范；说明书<br>例句：</p><ol><li>The product specification should be clearly stated in the contract. (产品规格应在合同中明确说明。)</li><li>The software developer needs to follow the project specification closely. (软件开发人员需要密切遵循项目规范。)</li><li>This job requires someone who can read and interpret technical specifications accurately. (这份工作需要一个能够准确阅读和解释技术规范的人。)<br>词源：来自拉丁语“specificatio”，意为“具体化，详述”。</li></ol><h1 id="vice-versa"><a href="#vice-versa" class="headerlink" title="vice versa"></a>vice versa</h1><p>反之亦然</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.6.6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec7:Dynamic Scheduling, Scoreboard</title>
      <link href="/2023/06/05/Lec7/"/>
      <url>/2023/06/05/Lec7/</url>
      
        <content type="html"><![CDATA[<h1 id="Dynamic-Scheduling"><a href="#Dynamic-Scheduling" class="headerlink" title="Dynamic Scheduling"></a>Dynamic Scheduling</h1><p>Enables out-of-order execution and completion (commit)<br><strong>一个表结构</strong><br>A Data Structure for Correct Issues<br>Keeps track of the status of Functional Units</p><h1 id="Scoreboard-Operation"><a href="#Scoreboard-Operation" class="headerlink" title="Scoreboard Operation"></a>Scoreboard Operation</h1><p>New pipeline</p><table><thead><tr><th align="center">ID</th><th align="center">ID</th><th align="center">EX</th><th align="center">WB</th></tr></thead><tbody><tr><td align="center">Issue</td><td align="center">Read regs</td><td align="center">Execution</td><td align="center">Write</td></tr></tbody></table><h2 id="Four-Stages-of-Scoreboard-Control"><a href="#Four-Stages-of-Scoreboard-Control" class="headerlink" title="Four Stages of Scoreboard Control"></a>Four Stages of Scoreboard Control</h2><ol><li>Issue(in-order)<br>structural harzard &amp;&amp; WAW(has the same destination)</li><li>Read Operands(out of order)<br>Wait until no data hazards(RAW hazard)</li><li>Execution<br>latency, Initiation interval </li><li>Write Result<br>Finish execution<br>Once the scoreboard is aware that the functional unit has completed execution, the scoreboard checks for <em>WAR hazards</em>.<br>If none, it writes results. If WAR, then it stalls the instruction.</li></ol><h2 id="Scoreboard-structure-three-parts"><a href="#Scoreboard-structure-three-parts" class="headerlink" title="Scoreboard structure: three parts"></a>Scoreboard structure: three parts</h2><ol><li><p>Instruction status</p></li><li><p>Functional Unit status<br>Indicates the state of the functional unit (FU):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Busy – Indicates whether the unit is busy or not</span><br><span class="line">Op - The operation to perform in the unit (+,-, etc.)</span><br><span class="line">Fi - Destination register</span><br><span class="line">Fj, Fk – Source register numbers</span><br><span class="line">Qj, Qk – Functional units producing source registers</span><br><span class="line">Rj, Rk – Flags indicating when Fj, Fk are ready</span><br></pre></td></tr></table></figure><p>Rj表示Fj(Fk)准备好了没有，Fj(Fk)表示源寄存器的数据准备好了没有<br>Fi是目标寄存器</p></li><li><p>Register result status<br>Indicates <strong>which functional unit</strong> will write each register.<br>Blank if no pending instructions will write that register.z</p></li></ol><h2 id="Execution-Process"><a href="#Execution-Process" class="headerlink" title="Execution Process"></a>Execution Process</h2><ol><li>Issue<br>• Functional unit is free (<strong>structural</strong>)<br>• Active instructions do not have same Rd (<strong>WAW</strong>)</li><li>Read Operands<br>• Checks availability of source operands<br>• Resolves <strong>RAW</strong> hazards dynamically (out-of-order execution)</li><li>Execution<br>• Functional unit begins execution when operands arrive<br>• Notifies the scoreboard when it has completed execution</li><li>Write result<br>• Scoreboard checks <strong>WAR</strong> hazards<br>• Stalls the completing instruction if necessary</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI各单元简记</title>
      <link href="/2023/06/05/CI/"/>
      <url>/2023/06/05/CI/</url>
      
        <content type="html"><![CDATA[<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><p><strong>A. HW Infrastructures:</strong><br>• System-level: Computing Infrastructures and Data Center<br>Architectures, Rack&#x2F;Structure;<br>• Node-level: Server (computation, HW accelerators), Storage<br>(Type, technology), Networking (architecture and technology);<br>• Building-level: Cooling systems, power supply, failure recovery<br><strong>B. SW Infrastructures:</strong><br>• Virtualization: Process&#x2F;System VM, Virtualization Mechanisms<br>(Hypervisor, Para&#x2F;Full virtualization)<br>• Computing Architectures: Cloud Computing (types,<br>characteristics), Edge&#x2F;Fog Computing, X-as-a service<br>• Machine and deep learning-as-a-service<br><strong>C. Methods:</strong><br>• Reliability and availability of datacenters (definition,<br>fundamental laws, RBDs)<br>• Disk performance (Type, Performance, RAID)<br>• Scalability and performance of datacenters (definitions,<br>fundamental laws, queuing network theory)</p><p>IoT<br>Embedded PCs&#x2F;Devices<br>PCs<br>Edge&#x2F;Fog Computing Systems<br>Embedded PCs</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>Quality Evaluation techniques: </p><ol><li>Measurement-based</li></ol><ul><li>Direct measurement</li><li>Benchmarking</li><li>Prototype</li></ul><ol start="2"><li>Model-based</li></ol><ul><li>Analytical and numerical</li><li>Simulation</li><li>Hybrid techniques<br>eg. Queueing Networks<br>• Arrival: average arrival rate \lambda  (req&#x2F;s)<br>• Service: the time a job spends being served,  average duration, maximum service rate<br>• Queue: Service discipline&#x2F;queuing policy: FCFS, LCFS, RSS, PRI<br>• Population: Service discipline&#x2F;queuing policy<br>• Routing: Probabilistic, Round robin, Join the shortest queue</li></ul><p>If we observed such an abstract system we might measure the following<br>quantities:<br>§ T, the length of <strong>time</strong> we observe the system<br>§ A, the number of <strong>request arrivals</strong> we observe<br>§ C, the number of <strong>request completions</strong> we observe<br>§ B, the total amount of time during which the system is <strong>busy</strong>(B&lt;&#x3D;T&gt;)<br>§ N, the <strong>average number of jobs</strong> in the system </p><p>§ λ &#x3D; A&#x2F;T , the arrival rate 到达率<br>§ X &#x3D; C &#x2F;T , the throughput or completion rate 完成率或吞吐量<br>§ U &#x3D; B&#x2F;T, the utilisation 利用率<br>§ S &#x3D; B&#x2F;C, the mean service time per completed job 每个job平均使用资源k的时间</p><p><strong>utilization law:</strong><br>Uk &#x3D; XkSk &#x3D; B&#x2F;T &#x3D; C&#x2F;T * B&#x2F;C 完成率<em>平均使用资源k的时间<br><strong>Little’s law:</strong><br>N &#x3D; XR  吞吐量</em>平均居留时间&#x3D;系统中的请求数<br>(N &#x3D; average number of requests in the system(在系统中同时存在的请求数)<br>If the system throughput is X requests&#x2F;sec, and each request remains in the system on average for R seconds)</p><p><strong>Response Time Law</strong><br>R &#x3D; N&#x2F;X - Z residence time - thinking time</p><p>T: 我们观察的总时间<br>Ak: 对于资源k，到达的请求的数量<br>Ck: 对于资源k，完成的请求的数量<br>Bk: 资源k忙的时间<br>Nk：资源k平均完成的工作数量<br><strong>N &#x3D; XR</strong><br>level1：N: busy time; X: average service time; R: rate of service<br>level2(考虑queue): N: 等待或正在享受服务的用户数量 X:系统的吞吐量 R&#x3D;N&#x2F;X:每个用户花费的时间<br>level3(考虑subsystem): N:在<strong>子系统</strong>中的用户数量  X: <strong>子系统</strong>中每个请求花费的时间 R: <strong>子系统</strong>的throughput<br>level4(考虑total system):</p><p>关于little’s law的一些理解：</p><ol><li>如果提到系统中有几个活跃的用户，那么N就等于几</li><li>告诉 U 和 S(service time)，怎么求X? U&#x3D;B&#x2F;T, X&#x3D;C&#x2F;T, S&#x3D;B&#x2F;C 所以S&#x3D;U&#x2F;X</li><li>题设告知think time, response time, residence time(N&#x2F;X)，N&#x3D;N(think)+N(response)</li><li>整个系统的吞吐量等于各个子系统的吞吐量</li><li>告知每个子系统的利用率(U)和demand(D), 则可求吞吐量(X):<br>这是用了Utilization Law(U&#x3D;XS): S是service time, 在有些题目里，表示成demand</li></ol><p>Xk &#x3D; Vk * X<br>Vk &#x3D; Ck &#x2F; C</p><h2 id="DataWareHouse"><a href="#DataWareHouse" class="headerlink" title="DataWareHouse"></a>DataWareHouse</h2><p>warehouse-scale computers (WSCs):</p><p>Multiple data centers：<br>Hierarchical approach: </p><ul><li>Geographic Areas and Regions</li><li>Availability Zones</li></ul><p>Architectural Overview of A Warehouse-scale Computer</p><ul><li>SERVERS: the main processing equipment</li><li>STORAGE: how and where to store the information</li><li>NETWORKING: providing internal and external connections</li><li>BUILDING AND INFRASTRUCTURE: power delivery, cooling, and building infrastructure</li></ul><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>Stages of enterprise infrastructures</p><ol><li>Monolithic app(单体式应用程序)</li></ol><ul><li>Minimal network demands</li><li>Proprietary protocols</li></ul><ol start="2"><li>Client server</li></ol><ul><li>High network demands inside the enterprise</li><li>Applications walled within the enterprise</li><li>TCP&#x2F;IP + Proprietary protocols</li></ul><ol start="3"><li>Web applications</li></ol><ul><li>Ubiquitous TCP&#x2F;IP</li><li>Access from anywhere</li><li>Servers are broken into multiple units</li></ul><ol start="4"><li>Microservices</li></ol><ul><li>Infrastructure moved to cloud providers</li><li>Servers broken into microservices</li><li>Increase of server-to-server traffic</li></ul><p>Classes of DCN<br>DCNs can be classified into three main categories:</p><ol><li>Switch-centric architectures<br>Uses switches to perform packet forwarding<br><strong>Three-Tier (or layer) “Classical” Network</strong>: Core, Aggregation(EOR), Access(TOR)<br><strong>Leaf-Spine architectures</strong></li><li>Server-centric architecture<br>Uses servers with multiple Network Interface Cards (NICs) to act as switches in addition to performing other computational functions</li></ol><p>Two stage interconnections<br>Leaf: ToR switch<br>Spine: dedicated switches (aggregation switches)<br>In practice: servers have two interfaces connected to two ToR switches</p><p>扩展到三层：Pod-based model, aka the Fat Tree<br>to provide fault-tolerance<br>3. Hybrid architectures<br>Combine switches and servers for packet forwarding</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/04/weekly2/"/>
      <url>/2023/06/04/weekly2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LP</title>
      <link href="/2023/06/01/FOR_LP/"/>
      <url>/2023/06/01/FOR_LP/</url>
      
        <content type="html"><![CDATA[<h1 id="Def"><a href="#Def" class="headerlink" title="Def"></a>Def</h1><p>min f(x)<br>s.t. x属于X<br>General form:<br>min z &#x3D; c1x1 + c2c2 +…+cnxn<br>s.t.<br>Matrix notation<br>min z &#x3D; [c1 … cn][]</p><p><strong>Standard form</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min z = cTx</span><br><span class="line">s.t. Ax = b</span><br><span class="line">     x&gt;=0   (only equality constraints and all nonnegative variables)</span><br></pre></td></tr></table></figure><p>方法：把小于0的x变成(xi-xj), 添加slack variable和surplus variable, 改变目标函数的符号</p><h1 id="Basic-feasible-solutions-and-vertices-of-polyhedra"><a href="#Basic-feasible-solutions-and-vertices-of-polyhedra" class="headerlink" title="Basic feasible solutions and vertices of polyhedra"></a>Basic feasible solutions and vertices of polyhedra</h1><p>Ax&#x3D;b<br>A&#x3D;&gt;m<em>n<br>rank&#x3D;m(A is full of rank)<br>m &#x3D; n unique solution<br>m &lt; n 无穷个solution<br>A&#x3D;[B|N]<br>B: a basis of such a matrix A——————m</em>m<br>N: m*(n-m)</p><p>XT &#x3D; [XBT|XNT]<br>A basic solution is a solution obtained by setting <strong>xN&#x3D;0</strong>，<br>A basic solution with <strong>XB&gt;&#x3D;0</strong> is a <strong>basic feasible solution</strong>.<br>The variable in XB——-basic variables, non basic variables</p><h1 id="单纯形算法（simplex-method）"><a href="#单纯形算法（simplex-method）" class="headerlink" title="单纯形算法（simplex method）"></a>单纯形算法（simplex method）</h1><p>算法的基本思想是通过在多维空间中移动一个特定形状的多面体，寻找目标函数取得最优值的顶点<br>上课时的思路：<br>什么是单纯形法：</p><ol><li>在<strong>不增加目标函数值</strong>的前提下检测一系列的基本可行解，直到找到最优解或者发现线性规划是无界的<br>在每次循环中，从一个基本可行解移至另一个基本可行解。</li><li>那我们该怎么做呢？</li></ol><ul><li>先找到一个初始的vertex(基本可行解)</li><li>确定当前的vertex是不是最优解</li><li>如果不是，就从当前的vertex一道一个更好的相邻的vertex(或者说名这个LP是无界的)</li></ul><ol start="3"><li>分别看这些步骤</li></ol><ul><li>初始的vertex很好看出来</li><li>怎么确定当前的vertex是不是最优解？————引出reduced cost!!!<br>通过计算cTx，可以看出cost是由一个固定的值和一个变化的值组成的，其中变化的那个部分就是reduced cost，reduced cost是由于non basic 变量引起的(NNBBN)。</li><li>如果cN&gt;0, 那么xB&#x3D;B-1b, xN&#x3D;0是最优解————由此可知单纯形法的终止条件。<br>所以要想判断是不是最优算法，可以观察cN是否小于0，如果小于，那么增大对应的xN，并保持其他的xN不变，那么cost会进一步缩小，所以不是最优解。</li><li>怎么移向相邻的基本可行解？<br>移出xB，移入xN。</li></ul><p>步骤：</p><ol><li>转化为标准形式</li><li>找到一个基本可行解</li><li>画tableau</li><li>找enter的变量和exit的变量，把enter的变量那一列通过变换变成单位向量</li><li>如果还有reduced cost是negative的，继续第3步</li><li>直到都是nonnegative，得到xB, xN, objective function value.</li></ol><p>basic feasible solution is such that xB&#x3D;B-1b, xN&#x3D;0<br>reduced cost<br>如果cN&gt;&#x3D;0 基本可行解就是全局最优解（对于最小化问题）<br>对于最大化问题，看是否&lt;&#x3D;0</p><p>Change of basis(for minimization LP): 通过矩阵变换，哪个进(第一行负的进)，哪个出(第一列&#x2F;进的那列对应的行的值)</p><p>Two-phase simplex method(Determine an initial basic feasible solution)看不出明显的基变量的情况下使用(找不到初始基本可行解)，引入人工变量<br>两阶段的第一阶段的目的是找到一个初始的基本可行解，就是用单纯形法消去人工变量，即把人工变量变成非基变量，第二阶段就是从基本可行解出发用单纯形法求线性规划最优解。</p><h1 id="对偶-Duality"><a href="#对偶-Duality" class="headerlink" title="对偶(Duality)"></a>对偶(Duality)</h1><p>如果线性规划（Ⅰ）中的第k个约束条件是等式，则它的对偶规划（Ⅱ）<br>中的第k个变量W无非负限制（W 为自由变量）。</p><p>反之，若原线性规划（Ⅰ）中的第k个变量无非负性要求，则对偶规划（Ⅱ）中的<br>第k个约束为等式。</p><blockquote><p>任一个线性规划得对偶规划都可以写出，其写法为：<br>（ⅰ）将目标函数转化为求最大<br>（ⅱ）将约束条件转化为“≤”型或“&#x3D;”型<br>（ⅲ）写出对偶关系表<br>（ⅳ）据对偶表的规定写出对偶规划</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exe4:Static BP + Complex, VLIM, Dynamic BP</title>
      <link href="/2023/06/01/Exe4/"/>
      <url>/2023/06/01/Exe4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>为什么不管两条指令离得有多远，都存在WAR冲突？</p></li><li><p>为什么WAR和WAW要推迟Decode，并在解决它们后才能提交？</p></li><li><p>在exe4，为什么I7的decode在C18？<br>有WAR冲突，要保证前面的指令读完了才能进行后面的指令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有两条顺序执行的指令：</span><br><span class="line">1. ld $f3, VA($r6)</span><br><span class="line">2. addi $r6,$r6,4</span><br><span class="line">第二条指令什么时候进入decode阶段才能解决WAR？</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">IF</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">Ds</th><th align="center">D</th><th align="center">IS</th><th align="center">E1</th><th align="center">E2</th><th align="center">E3</th><th align="center">W</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><strong>F</strong></td><td align="center"><strong>Ds</strong></td><td align="center"><strong>D</strong></td><td align="center"><strong>ISs</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>I9的decode不需要等吗？</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空中英语教室1：mental gymnastic</title>
      <link href="/2023/05/31/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BB%83%E4%B9%A0%E5%8F%A3%E8%AF%AD1/"/>
      <url>/2023/05/31/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BB%83%E4%B9%A0%E5%8F%A3%E8%AF%AD1/</url>
      
        <content type="html"><![CDATA[<p>concerntration<br>plaque 斑块<br>be aware 知道 意识到<br>beware 小心危险的</p><p>how do you like to exercise?<br>short-term memory<br>have whole brain strength<br>relexation<br>there are other benefits to exercising your mind<br>Phiscal exercise&#x2F;<br>the necessity of mental exercise<br>have been shown to benefit </p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> 沉练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec5:Dynamic Branch Predictors,Pipelining and Performance,Complex pipelining</title>
      <link href="/2023/05/30/Exe3/"/>
      <url>/2023/05/30/Exe3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec5:ILP,Complex pipelining,Intro to Scheduling</title>
      <link href="/2023/05/30/Lec5/"/>
      <url>/2023/05/30/Lec5/</url>
      
        <content type="html"><![CDATA[<p>Mixing integer and Floating point operations: Complex Pipelining<br>in-order<br>out-of-order<br>怎么样进一步提升性能？scheduling，分为Dynamic Scheduling(hardware) and Static Scheduling(software)</p><h1 id="1-为什么要加ISSUE阶段？"><a href="#1-为什么要加ISSUE阶段？" class="headerlink" title="1. 为什么要加ISSUE阶段？"></a>1. 为什么要加ISSUE阶段？</h1><p>在MIPS架构中，ISSUE阶段是指令流水线中的一个重要阶段，用于指令的调度和发射。ISSUE阶段的作用包括：</p><ol><li><p>指令调度：</p><ul><li>ISSUE阶段对已解码的指令进行调度，确定指令的执行顺序和优先级。它根据不同的调度算法和策略，将指令安排到适当的执行单元上，以最大程度地提高流水线的利用率和性能。</li></ul></li><li><p>数据相关检测：</p><ul><li>ISSUE阶段可以进行<strong>数据相关的检测</strong>，检查当前指令是否存在数据依赖性（例如RAW依赖）。通过检测数据相关性，可以判断指令是否可以立即发射，或者需要等待之前的指令完成。</li></ul></li><li><p>发射指令：</p><ul><li>在ISSUE阶段，经过调度和相关性检测后，合适的指令可以被发射到执行阶段（EX阶段）。发射意味着将指令送入下一阶段进行实际的操作和执行。</li></ul></li></ol><p>ISSUE阶段在流水线中起到关键的调度和控制作用。通过合理的调度和发射策略，可以优化指令的执行顺序，最大程度地避免数据冒险和资源竞争，提高流水线的吞吐量和效率。</p><h1 id="为什么decode执行的时机不一样"><a href="#为什么decode执行的时机不一样" class="headerlink" title="为什么decode执行的时机不一样"></a>为什么decode执行的时机不一样</h1>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec6:Static Scheduling and Very Long Instruction Words(VLIW)</title>
      <link href="/2023/05/30/Lec6/"/>
      <url>/2023/05/30/Lec6/</url>
      
        <content type="html"><![CDATA[<h1 id="VLIW-architecture"><a href="#VLIW-architecture" class="headerlink" title="VLIW architecture"></a>VLIW architecture</h1><p>指令内数据是并行的，没有RAW check</p><h1 id="Static-Scheduling"><a href="#Static-Scheduling" class="headerlink" title="Static Scheduling"></a>Static Scheduling</h1><ul><li>Basic Blocks</li><li>Trace scheduling</li></ul><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><ol><li>simple code motion</li><li>Loop unrolling &amp; loop peeling</li><li>Software pipeline</li><li>Global code scheduling(across basic block)</li></ol><ul><li>Trace scheduling</li><li>Superblock scheduling</li><li>Hyperblock scheduling</li><li>Speculative Trace scheduling</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>为什么P48页ld和add不存在冲突？</li><li>第70页为什么选择在下面？</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作地道化表达</title>
      <link href="/2023/05/30/Native%20speaker(work)/"/>
      <url>/2023/05/30/Native%20speaker(work)/</url>
      
        <content type="html"><![CDATA[<h1 id="job-security"><a href="#job-security" class="headerlink" title="job security"></a>job security</h1><h1 id="a-sense-of-fulfillment"><a href="#a-sense-of-fulfillment" class="headerlink" title="a sense of fulfillment"></a>a sense of fulfillment</h1>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> Native Speaker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
            <tag> Native Speaker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English Study Plan</title>
      <link href="/2023/05/30/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2023/05/30/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每天看一篇跟读训练课<br>每天背十个地道表达<br>看一个日常对话</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(23周)</title>
      <link href="/2023/05/29/words(week23)/"/>
      <url>/2023/05/29/words(week23)/</url>
      
        <content type="html"><![CDATA[<h1 id="blazer"><a href="#blazer" class="headerlink" title="blazer"></a>blazer</h1><p>[英] · &#x2F;ˈbleɪzə(r)&#x2F;<br>[n.] 西装外套；燃烧器；引线火药枪<br>例句：</p><ol><li>She wore a navy blazer over her white blouse.<br>（她在白衬衫上穿了一件海军蓝西装外套。）</li><li>The pilot lit the blazer to signal for help.<br>（飞行员点燃了引线火药枪以示求救。）</li><li>He fixed the broken blazer on his stove.<br>（他修好了灶具上的坏掉的燃烧器。）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Does it fit?</span><br><span class="line">I forget to mention we have discount at these shoes just today.</span><br><span class="line">I am afraid it&#x27;s not suitable for a birthday party.</span><br><span class="line">I will be right back</span><br><span class="line">old fashioned and faded</span><br><span class="line">It dosen&#x27;t suit you.</span><br><span class="line">be in style 时尚流行</span><br><span class="line">It goes well with your scarf and skirt.</span><br><span class="line">It really match your blue eyes.</span><br></pre></td></tr></table></figure></li></ol><h1 id="blouse"><a href="#blouse" class="headerlink" title="blouse"></a>blouse</h1><p>[英] · &#x2F;blaʊz&#x2F;<br>[n.] 女衬衫；女上衣<br>例句：</p><ol><li>She wore a white blouse and black skirt to the interview. (她穿了一件白色的女衬衫和黑色的裙子去面试。)</li><li>The new collection features a variety of blouses in different colors and patterns. (新系列中有各种颜色和图案的女上衣。)</li><li>I prefer wearing blouses to dresses in the summer because they are more comfortable. (夏天我更喜欢穿女式上装而不是连衣裙，因为它们更舒适。)<br>词源：来自法语blouse，最初指士兵穿的短外套或工作服。</li></ol><h1 id="classy"><a href="#classy" class="headerlink" title="classy"></a>classy</h1><p>[英] · &#x2F;ˈklɑːsi&#x2F;<br>[形容词] 有品位的；高雅的；上等的<br>例句：</p><ol><li>She always dresses so classy.<br>（她总是穿得很有品味。）</li><li>The restaurant has a very classy atmosphere.<br>（这家餐厅氛围非常高雅。）</li><li>He gave a really classy speech at the awards ceremony.<br>（他在颁奖典礼上发表了一篇非常高雅的演讲。）<br>词源：来自class，意为“阶级、等级”，加后缀-y构成形容词。</li></ol><h1 id="pirate"><a href="#pirate" class="headerlink" title="pirate"></a>pirate</h1><p>[英] · &#x2F;ˈpaɪrət&#x2F;<br>[n] 海盗；剽窃者<br>[v] 盗版；掠夺<br>例句：</p><ol><li>The pirates captured the ship and held the crew for ransom. (海盗抓住了那艘船，扣留了船员以勒索赎金。)</li><li>He was accused of pirating software from his company’s competitors. (他被指控从公司竞争对手处盗版软件。)</li><li>The movie studio lost millions due to piracy of their latest film. (电影制片厂因最新电影的盗版而损失数百万。)<br>词源：来自拉丁语pirata，意为“海上强盗”。</li></ol><h1 id="outfit"><a href="#outfit" class="headerlink" title="outfit"></a>outfit</h1><p>[英] · &#x2F;ˈaʊtfɪt&#x2F;<br>[n] 1. 全套装备；全套服装；2. （尤指）一家公司、组织或团体</p><p>例句：</p><ol><li>She wore a stylish outfit to the party.<br>（她穿了一身时髦的衣服去参加派对。）</li><li>The military outfit was well-equipped and highly trained.<br>（这支军队配备精良，训练有素。）</li><li>My sister works for a fashion outfit in New York City.<br>（我姐姐在纽约市的一个时尚公司工作。）</li></ol><p>词源：来自out + fit，意为“完整的设备”。</p><h1 id="bow-tie"><a href="#bow-tie" class="headerlink" title="bow tie"></a>bow tie</h1><p>领结</p><h1 id="flashy"><a href="#flashy" class="headerlink" title="flashy"></a>flashy</h1><p>[英] · &#x2F;ˈflæʃi&#x2F;<br>[形容词] 艳丽的；炫耀的；浮华的<br>例句：</p><ol><li>She wore a flashy dress to the party. (她穿了一件艳丽的裙子去参加派对。)</li><li>His car is too flashy for my taste. (他的车太过浮华，不符合我的口味。)</li><li>The singer’s performance was flashy but lacked substance. (歌手表演很炫耀，但缺乏实质内容。)<br>词源：来自flash（闪光）+ -y后缀</li></ol><h1 id="make-a-bet-on-our-prediction"><a href="#make-a-bet-on-our-prediction" class="headerlink" title="make a bet on our prediction"></a>make a bet on our prediction</h1><p>在这个句子中，“make a bet”意为“下注”。整个句子的意思是“在我们的预测上下注”。</p><p>这个短语也可以用于其他情境，例如：</p><ul><li>He made a bet on the horse race.（他在赛马比赛上下了一笔赌注。）</li><li>I’m not going to make a bet until I know more about the teams.（在我更多地了解队伍之前，我不会进行任何投注。）</li></ul><p>总之，“make a bet”就是指通过支付一定金额或物品来表达对某种结果的信心，并期望获得回报。</p><h1 id="descendant"><a href="#descendant" class="headerlink" title="descendant"></a>descendant</h1><p>[英] · &#x2F;dɪ’sendənt&#x2F;<br>[n] 后代；子孙<br>[adj] 下降的；衰落的<br>例句：</p><ol><li>He is a descendant of the royal family. (他是皇室的后裔。)</li><li>The number of descendants has been decreasing year by year. (后代数量逐年减少。)</li><li>The company’s profits have been on a descendant trend for the past few years. (公司利润在过去几年中一直呈下降趋势。)<br>词源：来自拉丁语“descendere”，意为“下降，传承”。</li></ol><h1 id="Pervasive"><a href="#Pervasive" class="headerlink" title="Pervasive"></a>Pervasive</h1><p>[英] · &#x2F;pəˈveɪsɪv&#x2F;<br>[形] 普遍存在的；无处不在的；渗透性强的<br>例句：</p><ol><li>The pervasive influence of social media is undeniable. (社交媒体的普及影响是不可否认的。)</li><li>The smell of smoke was pervasive throughout the building. (烟味弥漫整个建筑物。)</li><li>Ageism is a pervasive problem in our society. (年龄歧视是我们社会中普遍存在的问题。)<br>词源：来自拉丁语 pervasus，意为“穿过、渗透”。</li></ol><h1 id="undeniable"><a href="#undeniable" class="headerlink" title="undeniable"></a>undeniable</h1><p>[英] · &#x2F;ˌʌndɪˈnaɪəbl&#x2F;<br>[形容词] 不可否认的，无可争辩的<br>中文含义：不可否认的，无法抵赖的</p><p>例句：</p><ol><li>His talent is undeniable.<br>（他的才华是不可否认的。）</li><li>The evidence against him was undeniable.<br>（针对他的证据是无法抵赖的。）</li><li>It is undeniable that climate change is happening.<br>（气候变化正在发生这一点是毋庸置疑的。）</li></ol><p>词源：来自于deny这个单词加上un-前缀构成，意为“不能被否定”。</p><h1 id="negligible"><a href="#negligible" class="headerlink" title="negligible"></a>negligible</h1><p>[英] · &#x2F;ˈneɡlɪdʒəbl&#x2F;<br>[形] 可忽略的，微不足道的<br>例句：</p><ol><li>The difference in price is negligible.<br>（价格上的差异微不足道。）</li><li>The impact of the new policy on the economy is negligible.<br>（新政策对经济的影响微乎其微。）</li><li>The amount of dust in the air was negligible.<br>（空气中灰尘数量可以忽略不计。）<br>词源：<br>来自拉丁语“negligere”，意为“忽视”。</li></ol><h1 id="Ubiquity"><a href="#Ubiquity" class="headerlink" title="Ubiquity"></a>Ubiquity</h1><p>在这个句子中，“Ubiquity”指的是“无处不在”，表示某物或某种情况普遍存在，随处可见。整个句子的意思是“访问无处不在”，即可以随时随地访问。</p><p>这个词也可以用于习语中，例如：“Ubiquitous presence”，意为“到处都有的存在”。其他类似的例子包括：</p><ol><li>The ubiquity of smartphones has changed the way we communicate. (智能手机的普及改变了我们交流方式)</li><li>The ubiquity of fast food restaurants is a sign of our busy lifestyles. (快餐店无处不在反映了我们繁忙的生活方式)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.29 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec4：Dynamic Branch Prediction</title>
      <link href="/2023/05/24/Lec4/"/>
      <url>/2023/05/24/Lec4/</url>
      
        <content type="html"><![CDATA[<h1 id="Branch-History-Table"><a href="#Branch-History-Table" class="headerlink" title="Branch History Table"></a>Branch History Table</h1><p>Taken or not taken<br>为什么1-bit BHT 的错误率是80%? 因为第一次not taken，misprediction后改为taken，最后一次预测错误，所以是misprediction两次<br>为什么2-nested loop taken的错误次数是1+2*9？OK<br>1-bit和2-bit BHT的状态转换图<br>correlating branch predictors</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCS:Part 1</title>
      <link href="/2023/05/23/TCS_1/"/>
      <url>/2023/05/23/TCS_1/</url>
      
        <content type="html"><![CDATA[<h1 id="FSA"><a href="#FSA" class="headerlink" title="FSA"></a>FSA</h1><p> A finite state automaton is (made of):<br>– A finite state set: Q<br>– A finite input alphabet: I<br>– A transition function (partial, in general):</p><h1 id="PDA"><a href="#PDA" class="headerlink" title="PDA"></a>PDA</h1><p>“Finite state machine” + “a stack”: PDA可以记住无限量的信息<br>Input tape + Stack + Control unit<br>This means at state q1, if we encounter an input string ‘a’ and top symbol of the stack is ‘b’, then we pop ‘b’, push ‘c’ on top of the stack and move to state q2.</p><h1 id="TM"><a href="#TM" class="headerlink" title="TM"></a>TM</h1><p>有一个input head和一个memory head</p><h1 id="Nondeterministic-Models"><a href="#Nondeterministic-Models" class="headerlink" title="Nondeterministic Models"></a>Nondeterministic Models</h1><h2 id="Nondeterministic-Finite-state-Automata-NFA"><a href="#Nondeterministic-Finite-state-Automata-NFA" class="headerlink" title="Nondeterministic Finite-state Automata (NFA)"></a>Nondeterministic Finite-state Automata (NFA)</h2><p>“state” the <strong>set</strong> of possible states<br>先构建NFA，再以此构建DFA<br>终结符、非终结符、开始符号</p><p>RL正则语言<br>CFL上下文无关文法<br>GenL通用语言</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> TCS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> TCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/2023/05/22/FOR_Graph/"/>
      <url>/2023/05/22/FOR_Graph/</url>
      
        <content type="html"><![CDATA[<p>动态规划算法的概念</p><h1 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h1><p>G&#x3D;(N,E)<br>nodes and vertices<br>edges and arcs<br>Undirected graph: 边 {i,j}<br>Directed graph: 边 (i,j)<br>The degree of a node<br>The in-degree(out-degree) of a node<br>Nodes u and v are connected<br>A graph is connected(没有孤立点)<br>strongly connected (u and v are connected by a directed path for any u,v\inN)</p><p>Cycle<br>bipartite(no edges connects nodes in the same subset)<br>complete(完全图是一个简单的无向图，其中每对不同的顶点之间都恰连有一条边相连)</p><p>Given a directed graph G&#x3D;(N,A)<br>the outgoing cut&#x2F; incoming cut(出向割和入向割，都是一些边的集合)</p><h2 id="Graph-reachablility-problem"><a href="#Graph-reachablility-problem" class="headerlink" title="Graph reachablility problem"></a>Graph reachablility problem</h2><p>O(N+E)<br>breath-first search</p><p>G’&#x3D;(N’,E’): subgraph<br>GT&#x3D;(N’,T): connected and acyclic<br>spanning tree</p><h1 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h1><p>n nodes and n-1 edges<br>Any pair of nodes in a tree is connected via a unique path<br>By adding a new edge to a tree, we create a unique cycle<br>T\cup{e}{f} is also a spanning tree</p><h2 id="Optimal-cost-spanning-trees"><a href="#Optimal-cost-spanning-trees" class="headerlink" title="Optimal cost spanning trees"></a>Optimal cost spanning trees</h2><ol><li>connected subgraph containing all the nodes</li><li>subgraph with no cycles</li></ol><ul><li><p><strong>Theorem 1</strong><br>A complete graph with n(n&gt;1) nodes has n^(n-2) spanning trees</p></li><li><p><strong>Theorem 2</strong><br>A tree T is of minimum total cost if and only if no cost-decreasing edge exists</p></li><li><p>Prim’s Algorithm<br>Prim’s算法适用于连通无向图，且边的权重不能为负值。如果图不是连通的，则需要对每个连通分量分别应用Prim’s算法，或者在起始节点的选择上进行调整。</p></li><li><p>Kruskal’s Algorithm<br>给边排序，每次选出最小的边并且不生成循环</p></li></ul><h2 id="Optimal-paths"><a href="#Optimal-paths" class="headerlink" title="Optimal paths"></a>Optimal paths</h2><p><strong>Dijkstra’s Algorithm</strong><br>输出从s到图中各个点的最短路径<br>生成的树不是minimum cost sanning tree<br>不能解决有负边的问题<br><strong>Floyd-Warshall Algorithm</strong><br>Triangular operation<br>D矩阵：从i到j的最短路径<br>P矩阵：从i到j最短路径上j的前趋(predecessor)<br>s&#x3D;1,t&#x3D;4,(u&#x3D;2,u&#x3D;3)</p><p><strong>Optimal paths in DAG(directed acyclic graph)</strong><br>Topological ordering method</p><h3 id="Dynamic-programming-for-shortest-paths-in-DAGs"><a href="#Dynamic-programming-for-shortest-paths-in-DAGs" class="headerlink" title="Dynamic programming for shortest paths in DAGs"></a>Dynamic programming for shortest paths in DAGs</h3><p>\pi 是最短路径，Li是从s到i的最短路径的cost</p><p>The Dynamic programming algorithm for finding <strong>shortest(longest)</strong> paths in DAGs is exact.</p><h4 id="1-Project-planning"><a href="#1-Project-planning" class="headerlink" title="1. Project planning"></a>1. Project planning</h4><p><strong>Critical path method</strong><br>最短时间正着看，最长时间反着看</p><h2 id="Network-flows"><a href="#Network-flows" class="headerlink" title="Network flows"></a>Network flows</h2><p>Ford-Fulkerson’s algorithm is not greedy<br>overall complexity is O(m2kmax)<br>The value of a feasible <em>flow of maximum value</em> &#x3D; the capacity of <em>a cut of minimum capacity</em></p><p>最大流问题：把初始流量加入图中，并表示为反方向的箭头(residual network)</p><p>Minimum Cost Flow Problem: 满足容量约束的前提下，以最低的费用从源节点发送流量到汇节点。</p><p>Bipartite graph</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> FOR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> FOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本(22周)</title>
      <link href="/2023/05/22/words(week22)/"/>
      <url>/2023/05/22/words(week22)/</url>
      
        <content type="html"><![CDATA[<h1 id="competence"><a href="#competence" class="headerlink" title="competence"></a>competence</h1><p>[英] · &#x2F;ˈkɒmpɪt(ə)ns&#x2F;  美 · &#x2F;ˈkɑːmpətəns&#x2F;<br>[n.] 能力；胜任；资格<br>例句：</p><ol><li>She has demonstrated her competence in managing the team. (她已经证明了自己在团队管理方面的能力。)</li><li>The company is looking for someone with technical competence to fill the position. (公司正在寻找一位具备技术能力的人来填补这个职位。)</li><li>A high level of competence is required for this job. (这份工作需要高水平的能力。)</li></ol><h1 id="correspondence"><a href="#correspondence" class="headerlink" title="correspondence"></a>correspondence</h1><p>[英] · &#x2F;ˌkɒr.əˈspɒn.dəns&#x2F;  [美] · &#x2F;ˌkɔːr.əˈspɑːn.dəns&#x2F;<br>[n.] 1. 通信；信件；信函<br>    2. 相似之处；对应关系<br>    3. 符合，一致<br>例句：</p><ol><li>I have been in correspondence with him for several years.<br>（我和他有几年的书信往来。）</li><li>There is a close correspondence between the two accounts.<br>（这两个账户存在密切的对应关系。）</li><li>The results of the experiment are in correspondence with our expectations.<br>（实验结果与我们的预期相符。）</li></ol><h1 id="be-prone-to"><a href="#be-prone-to" class="headerlink" title="be prone to"></a>be prone to</h1><p>易于</p><h1 id="a-little-step-forward"><a href="#a-little-step-forward" class="headerlink" title="a little step forward"></a>a little step forward</h1><p>迈出一小步</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.22 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>口语表达</title>
      <link href="/2023/05/20/oral%20expression/"/>
      <url>/2023/05/20/oral%20expression/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.20 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phiscal Databases</title>
      <link href="/2023/05/16/DB_PhiscalDatabases/"/>
      <url>/2023/05/16/DB_PhiscalDatabases/</url>
      
        <content type="html"><![CDATA[<h1 id="DATA-ACCESS-and-COST-MODEL"><a href="#DATA-ACCESS-and-COST-MODEL" class="headerlink" title="DATA ACCESS and COST MODEL"></a>DATA ACCESS and COST MODEL</h1><p>Main memory: Page<br>Secondary memory: Block</p><p>Assumption: the size of a page &#x3D; the size of a a block</p><p>secondary memory access: seek time(track)+latency time(sector)+transfer time(data transfer)</p><p>File System<br>DBMS</p><p>Primary structure<br>Secondary structures</p><p><strong>3 main types of data access structures:</strong></p><ol><li>Sequential structures(primary typical):</li></ol><ul><li>Entry-sequenced organization(ordered according their order of entry不好找特定数据，不好增加元组的尺寸)</li><li>Sequentially-ordered organization(ordered by the value of a key)</li></ul><ol start="2"><li>Hash-based structures: bucket(of the size of 1 block): folding&#x2F;hashing</li></ol><ul><li>closed hashing(open addressing) eg. linear probing</li><li>open hashing(separate chaining): overflow chains</li></ul><ol start="3"><li>Tree-based structures(seconary typical)</li></ol><ul><li>Balanced trees(B trees)</li><li>B+ trees</li></ul><p>blocks and tuples</p><p>Block factor B&#x3D;SB&#x2F;SR</p><p><strong>Indexes</strong><br>Dense vs. sparse index<br>primary index<br>clustering index<br>secondary index: why the secondary index is necessarily dense次要索引是基于非主键列构建的索引，用于加速对表中数据的访问。<br>注意： A search key is not a primary key! A search key maybe unique or not unique!<br>Hash-based index</p><h1 id="INTRODUCTION-TO-OPTIMIZATION-COSTS-OF-DIFFERENT-ACCESS-MODES"><a href="#INTRODUCTION-TO-OPTIMIZATION-COSTS-OF-DIFFERENT-ACCESS-MODES" class="headerlink" title="INTRODUCTION TO OPTIMIZATION COSTS OF DIFFERENT ACCESS MODES"></a>INTRODUCTION TO OPTIMIZATION COSTS OF DIFFERENT ACCESS MODES</h1><ol><li>Query optimization<br>Optimizations<br><strong>Operations</strong><br>• Selection<br>• Projection<br>• Sort<br>• Join<br>• Grouping<br><strong>Access methods</strong><br>• Sequential<br>• Hash-based indexes<br>• Tree-based indexes</li></ol><p>Sequential scan<br>Cost of lookups: equality ( A&#x3D;v )<br>• Sequential structures with no index<br>  • Lookups are not supported (cost: a full scan)<br>    • Sequentially-ordered structures may have reduced cost<br>• Hash&#x2F;Tree structures<br>  • Supported if A is the search key attribute of the<br>structure<br>  • The cost depends on<br>    • the storage type (primary&#x2F;secondary)<br>    • the search key type (unique&#x2F;non-unique)</p><h2 id="Equality-lookup"><a href="#Equality-lookup" class="headerlink" title="Equality lookup"></a>Equality lookup</h2><ul><li><p>Equality lookup on a primary hash</p></li><li><p>Equality lookup on a secondary hash<br>eg.(non unique search key)为什么是1.3+2&#x3D;3.3？一共有75K个姓氏，有150K个元组，平均一个姓有两个元组，分别在不同的block上，找到这些block用1.3次，在不同的block上找到这两个元组用2次</p></li><li><p>Equality lookup on a primary B+<br>eg.<br>Query predicate on unique search key(3 intermediate levels + 1 leaf node &#x3D; 4)<br>Query predicate NOT on search key(3 intermediate levels + 2K leaf nodes)<br>Query predicate on non unique search key( 3 intermediate levels + 14 leaf blocks &#x3D; 17)</p></li><li><p>Equality lookup on a secondary B+<br>Query predicate on unique search key of STUDENT(3 intermediate levels + 1 leaf<br>node + 1 data block &#x3D; 5)<br>Query predicate not on search key of STUDENT(Index is not useful for this<br>query (full scan costs 1.7k))</p></li><li><p>Equality lookup on a secondary B+<br>Query predicate on non unique search key of STUDENT(Total cost &#x3D; 3 +1 + 2 &#x3D; 6)<br>Query predicate on non unique search key of EXAM(Total cost &#x3D; 3 + 5 + 3.6K ≈ 3.6K)</p></li></ul><h2 id="Interval-lookup"><a href="#Interval-lookup" class="headerlink" title="Interval lookup"></a>Interval lookup</h2><p>Interval lookups A&lt;v , v1&lt;&#x3D; A &lt;&#x3D; v2<br>Tree structures (primary&#x2F;secondary)<br>• Supported if A is the search key</p><ul><li>Interval lookup on primary B+<br>Cost: 1 block per intermediate level + as many leaf blocks as necessary to read all the tuples in the interval<br>(estimated with statistics)</li><li>Interval lookup on secondary B+<br>Cost: 1 block per intermediate level + as many leaf blocks as necessary to read all pointers in the interval + 1 block per each such pointer (to retrieve the tuples)</li></ul><h2 id="operations"><a href="#operations" class="headerlink" title="operations"></a>operations</h2><ol><li>Conjunction &#x2F; disjunction</li><li>sort</li></ol><ul><li>Sort in main memory</li><li>Sort of large files<br>(External Merge Sort)<br>To sort a file stored in N blocks using B buffer pages:<br>现在有N个block，B个buffer，从N个block里选择B个放入内存，对它们进行排序，把排序好的数据放入一个chunk里，这个chunk的长度是B个block，总共有N&#x2F;B个chunk，现在把B个buffer分成B-1个input buffer和1个output buffer，从每个chunk里取出一个block放进input buffer，进行归并排序，放入output buffer中，output buffer满了就写入磁盘，input buffer空了就读进新的block，最后就得到了一个更大的chunk，大小为(B-1)*B，以此类推，最后只剩下一个chunk。<br><strong>cost:</strong><br>Number of passes cost &#x3D; 1 (for initial step) + ⌈log B-1⌈N&#x2F;B⌉ ⌉ (for iterative merge of chunks)<br>Cost &#x3D; 2 (1 for reading + 1 for writing) * N * (# of passes)</li></ul><ol start="3"><li>Join<br>nested-loop</li></ol><ul><li>simple nested-loop 代价一般是平方(b*b)，如果有一个小的表可以放进buffer，那么cost是b+b</li><li>nested-loop join with cache 把特别小的table放进cache，cost是b+b，小表忽略不计，约等于大表</li><li>filtering by condition</li><li>scan and lookup</li></ul><p>merge-scan join</p><ul><li>sort + merge-scan join<br>c&#x3D;b+b<br>if not sorted, 2<em>b</em>(# of passes)<br>• The ordered full scan is possible for a table if the primary storage is <strong>sequentially ordered wrt the join attribute</strong> or a <strong>B+ on the join attribute is defined</strong></li></ul><p>为什么叶子的数量不同？primary index和second index</p><p>hashed join<br>cost&#x3D;b+b</p><h2 id="COST-BASED-OPTIMIZATION"><a href="#COST-BASED-OPTIMIZATION" class="headerlink" title="COST-BASED OPTIMIZATION"></a>COST-BASED OPTIMIZATION</h2>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trigger</title>
      <link href="/2023/05/16/DB_Trigger/"/>
      <url>/2023/05/16/DB_Trigger/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-Condition-Action"><a href="#Event-Condition-Action" class="headerlink" title="Event-Condition-Action"></a>Event-Condition-Action</h1><p>Execution mode: before or after</p><h1 id="Granularity-of-events"><a href="#Granularity-of-events" class="headerlink" title="Granularity of events:"></a>Granularity of events:</h1><p>Row-level granularity(for each row)—once for each tuple(less efficient)<br>Statement-level granularity(for each statement)—only once for each activating statement</p><h1 id="Transition-Variables"><a href="#Transition-Variables" class="headerlink" title="Transition Variables"></a>Transition Variables</h1><p>Row-level: tuple variables<br>Statement-level: table variables</p><blockquote><p>在数据库中，过渡变量（transition variable）是在触发器中使用的一种特殊变量类型。它们用于引用与触发器相关的行或数据。</p></blockquote><p>当触发器在数据库操作（如插入、更新、删除）发生时被触发时，过渡变量提供了对相关数据的访问。这些变量的值可以在触发器的动作部分使用，以执行特定的操作或进行其他处理。</p><p>过渡变量的名称和用法可能会根据具体的数据库系统和触发器定义而有所不同。在一些常见的数据库系统中，以下是几个常用的过渡变量：</p><p style="color: #33CC00;"><b>OLD：表示在更新或删除触发器中引用被修改或删除的旧数据。它可以用于访问操作之前存在的值。</b></p><p style="color: #33CC00;"><b>NEW：表示在插入或更新触发器中引用新插入或修改的数据。它可以用于访问操作之后的值。</b></p><h1 id="Triggers-in-SQL-1999-Syntax"><a href="#Triggers-in-SQL-1999-Syntax" class="headerlink" title="Triggers in SQL:1999, Syntax"></a>Triggers in SQL:1999, Syntax</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create trigger &lt;TriggerName&gt;</span><br><span class="line">&#123; before | after &#125;</span><br><span class="line">&#123; insert | delete | update [of &lt;Column&gt;] &#125; on &lt;Table&gt;</span><br><span class="line">referencing &#123; [ old table [as] &lt;OldTableAlias&gt; ]</span><br><span class="line">[ new table [as] &lt;NewTableAlias&gt; ] |</span><br><span class="line">[ old [row] [as] &lt;OldTupleName&gt; ]</span><br><span class="line">[ new [row] [as] &lt;NewTupleName&gt; ] &#125;</span><br><span class="line">[ for each &#123; row | statement &#125; ]</span><br><span class="line">[ when &lt;Condition&gt; ]</span><br><span class="line">&lt;SQLProceduralStatement&gt;</span><br></pre></td></tr></table></figure><h1 id="AFTER-trigger"><a href="#AFTER-trigger" class="headerlink" title="AFTER trigger"></a>AFTER trigger</h1><h2 id="Insertion-of-a-new-tuple-into-T1"><a href="#Insertion-of-a-new-tuple-into-T1" class="headerlink" title="Insertion of a new tuple into T1"></a>Insertion of a new tuple into T1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 创建T1表</span><br><span class="line">CREATE TABLE T1 (</span><br><span class="line">  ID INT PRIMARY KEY,</span><br><span class="line">  VALUE VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建T2表</span><br><span class="line">CREATE TABLE T2 (</span><br><span class="line">  ID INT PRIMARY KEY,</span><br><span class="line">  VALUE VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER insert_into_T2</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line"> ** INSERT INTO **T2 (ID, VALUE) VALUES (NEW.ID, NEW.VALUE);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>NEW就是transition variable</p><h2 id="Deletion-of-a-tuple-from-T1"><a href="#Deletion-of-a-tuple-from-T1" class="headerlink" title="Deletion of a tuple from T1"></a>Deletion of a tuple from T1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER delete_from_T2</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">  DELETE FROM T2 WHERE ID = OLD.ID;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建触发器</span><br><span class="line">CREATE TRIGGER update_T2</span><br><span class="line">**AFTER UPDATE OF VALUE ON** T1</span><br><span class="line">WHEN NEW.ID=OLD.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">  UPDATE T2 SET T2.VALUE = NEW.VALUE </span><br><span class="line">  WHERE ID = NEW.ID;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Conditional-replication"><a href="#Conditional-replication" class="headerlink" title="Conditional replication"></a>Conditional replication</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER COND_REPL_INS</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE&gt;=10)</span><br><span class="line">**INSERT INTO T2 VALUES**(new.ID,new.VALUE)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER COND_REPL_DEL</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN(old.VALUE&gt;=10)</span><br><span class="line">**DELETE FROM T2 WHERE** T2.ID=old.ID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER Cond_REPL_UPD_1 –- new relevant tuple, replicate</span><br><span class="line">**AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID**</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &lt; 10 AND new.VALUE &gt;= 10)</span><br><span class="line">**INSERT INTO T2 VALUES** (new.ID, new.VALUE);</span><br><span class="line">CREATE TRIGGER Cond_REPL_UPD_2 –- already replicated tuple changed, propagate</span><br><span class="line">AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &gt;= 10 AND new.VALUE &gt;= 10 AND old.VALUE != new.VALUE)</span><br><span class="line">**UPDATE T2 SET **T2.VALUE = new.VALUE WHERE T2.ID = new.ID</span><br><span class="line">CREATE TRIGGER Cond_REPL_UPD_3 –- replicated tuple no longer relevant: delete</span><br><span class="line">AFTER UPDATE OF VALUE ON T1 WHEN new.ID = old.ID</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (old.VALUE &gt;= 10 AND new.VALUE &lt; 10)</span><br><span class="line">**DELETE FROM T2 WHERE** T2.ID = new.ID; </span><br></pre></td></tr></table></figure><h1 id="BEFORE-x2F-AFTER-trigger"><a href="#BEFORE-x2F-AFTER-trigger" class="headerlink" title="BEFORE&#x2F;AFTER trigger"></a>BEFORE&#x2F;AFTER trigger</h1><p>具体来说，”before” 触发器通常与数据库中的表相关联。当特定的操作（如插入、更新或删除数据）被执行之前，触发器会自动触发。触发器可以在数据<strong>被提交到数据库之前</strong>进行额外的验证、转换或处理。</p><p>以下是一些常见的使用情况：</p><ol><li><p>数据验证：通过 “before” 触发器，可以在执行插入或更新操作之前对数据进行验证。例如，你可以检查某些字段是否满足特定的条件或约束，如果不满足，则阻止操作执行，并返回错误消息。</p></li><li><p>数据转换：触发器还可以用于在数据被插入或更新之前对其进行转换。例如，你可以在插入数据之前将其格式化为特定的方式，或者在更新数据之前对其进行计算或清理。</p></li><li><p>数据补全：有时，在插入或更新数据时，可能需要根据其他表中的值自动填充某些字段。通过使用 “before” 触发器，你可以查询其他表并根据需要补全数据。</p></li><li><p>审计跟踪：触发器还可以用于在执行数据库操作之前记录审计日志。你可以捕获正在进行的操作以及相关的元数据，例如时间戳、执行用户等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER NO_NEGATIVE_VALUES</span><br><span class="line">BEFORE UPDATE of VALUE ON T1</span><br><span class="line">FOR EACH ROW</span><br><span class="line">WHEN (new.VALUE &lt; 0)</span><br><span class="line">SET new.VALUE=0; -- this &quot;modifies the modification&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="row-vs-statement"><a href="#row-vs-statement" class="headerlink" title="row vs. statement"></a>row vs. statement</h1><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>• Statement:<br>DELETE FROM T1 WHERE VALUE &gt;&#x3D; 5;<br>• Trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER ST_REPL_DEL</span><br><span class="line">AFTER DELETE ON T1</span><br><span class="line">REFERENCING OLD TABLE AS OLD_T</span><br><span class="line">FOR EACH STATEMENT --all tuples considered at once</span><br><span class="line">DELETE FROM T2 WHERE T2.ID IN</span><br><span class="line">(SELECT ID FROM OLD_T); -- no need to add where OLD_T.value &gt;=10</span><br></pre></td></tr></table></figure><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>• Statement:<br>INSERT INTO T1 (Id, Value) VALUES (4, 5), (5, 10), (6, 20);<br>Trigger:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER ST_REPL_INS</span><br><span class="line">AFTER INSERT ON T1</span><br><span class="line">REFERENCING NEW TABLE AS NEW_T</span><br><span class="line">**FOR EACH STATEMENT** --all tuples considered at once</span><br><span class="line">INSERT INTO T2</span><br><span class="line">(SELECT ID, VALUE</span><br><span class="line">FROM NEW_T WHERE NEW_T.VALUE &gt;= 10);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER REPLIC_INS</span><br><span class="line">AFTER UPDATE ON T1</span><br><span class="line">REFERENCING OLD TABLE AS OLD_T NEW TABLE AS NEW_T</span><br><span class="line">FOR EACH STATEMENT</span><br><span class="line">DELETE FROM T2 --delete all updated rows</span><br><span class="line">WHERE T2.ID IN (SELECT ID FROM OLD_T);--删除所有更新过的行</span><br><span class="line">INSERT INTO T2 --reinsert only relevant rows</span><br><span class="line">(SELECT ID, VALUE FROM NEW_T</span><br><span class="line">WHERE NEW_T.VALUE &gt;= 10);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Concurrency Control</title>
      <link href="/2023/05/16/DB_Concurrency%20Control/"/>
      <url>/2023/05/16/DB_Concurrency%20Control/</url>
      
        <content type="html"><![CDATA[<h1 id="Anomalies"><a href="#Anomalies" class="headerlink" title="Anomalies"></a>Anomalies</h1><ol><li>Lost update</li><li>Dirty read</li><li>Nonrepeatable read</li><li>Phantom update</li><li>Phantom insert</li></ol><h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><ul><li>Serial-Serializable-ALL</li><li><strong>View-serializability</strong>(the same reads-from relationship and final writes)——判断起来时空复杂度太高</li><li><strong>Conflict-serializability</strong>(更高的要求，更简单的判断方法)——conflict graph(if there is no cycles in the graph)<blockquote><p>怎么找equivalent serial schedule？ 删节点</p></blockquote></li></ul><h1 id="approaches"><a href="#approaches" class="headerlink" title="approaches"></a>approaches</h1><h2 id="1-Lock"><a href="#1-Lock" class="headerlink" title="1. Lock"></a>1. Lock</h2><p><strong># pessimistic concurrency control</strong></p><ul><li><p><strong>r_lock(shared lock), w_lock(exclusive lock)</strong></p></li><li><p><strong>Two-Phase Locking (<em>short duration locks</em>)</strong><br>  解决non-repeatable read<br>  释放锁后不能申请任何别的锁 (growing phase-&gt;plateau-&gt;shrinking phase)<br>  VSR&lt;CSR&lt;2PL</p></li><li><p><strong>Strict 2PL (<em>long duration locks</em>)</strong><br>  解决dirty read<br>  commit&#x2F;rollback 后才能释放锁</p></li><li><p><strong>Predicate locks</strong><br>  the lock on all tuples satisfying the predicate</p></li><li><p><strong>Update lock</strong><br>  解决丢失更新的问题，事务T1在请求升级SL为UL时，必须保证没有别的事务的SL<br>  不能直接从SL升级到XL，必须经过UL<br>  可以直接获得XL,SL,UL,先读后写，先给UL<br>  Each transaction can commit right after its last operation.</p></li><li><p><strong>Hierarchical locking</strong><br>  自上而下请求资源<br>  自下而上释放锁<br>  schema, table, fragment, page, tuple, field</p></li><li><p><strong>Intention Locking Scheme</strong><br>  5 lock modes: SL, XL, ISL, IXL, SIXL<br>  Protocol:<br>  request: top-down<br>  release: bottom-up<br>  request <strong>SL or ISL</strong>——equally or more restrictive lock**(ISL or IXL)** on its “parent”<br>  request <strong>IXL,XL,SIXL</strong>——-equally or more restrictive lock(<strong>SIXL or IXL</strong>) on its “parent”</p></li></ul><h2 id="2-Timestamps"><a href="#2-Timestamps" class="headerlink" title="2. Timestamps"></a>2. Timestamps</h2><p><strong># optimistic concurrency control</strong></p><h1 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a>Deadlock</h1><ul><li>Lock graph</li><li>Wait-for graph(循环有死锁)</li></ul><h2 id="Deadlock-Resolution-Techniques"><a href="#Deadlock-Resolution-Techniques" class="headerlink" title="Deadlock Resolution Techniques"></a>Deadlock Resolution Techniques</h2><h3 id="1-Timeout"><a href="#1-Timeout" class="headerlink" title="1. Timeout"></a>1. Timeout</h3><h3 id="2-Deadlock-prevention"><a href="#2-Deadlock-prevention" class="headerlink" title="2. Deadlock prevention"></a>2. Deadlock prevention</h3><ul><li>resourse-based prevention<br>  事务必须一次请求所有资源<br>  但事务很难一下子明确所有需求</li><li>transaction-based prevention<br>  不要让老的等待年轻的<ul><li>Preemptive (杀掉占有资源的事务——wound-wait)<br>  老的抢（杀掉年轻的），年轻的等</li><li>Non-preemptive (杀掉请求资源的事务——wait-die)<br>  老年人申请年轻人的资源——wait<br>  年轻人申请老年人的资源——die(abort+restart)</li></ul></li></ul><h3 id="3-Deadlock-detection"><a href="#3-Deadlock-detection" class="headerlink" title="3. Deadlock detection"></a>3. Deadlock detection</h3><ul><li>Distributed Deadlock Detection<br><strong>Obermarck’s algorithm</strong></li></ul><h1 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h1><ol><li>Syntax: timestamp &#x3D; event-id.node-id</li></ol><ul><li>event-ids are unique <strong>at each node</strong></li><li>同一个node中的node-id都一样</li></ul><ol start="2"><li>Note that the notion of time is “<strong>lexical</strong>”: timestamp 5.1 “occurs before”<br>timestamp 5.2</li><li>算法（Lamport方法）：如果接收到来自“未来”的消息，则使用“碰撞规则”将<strong>接收事件</strong>的时间戳推迟到<strong>发送事件</strong>的时间戳之后，以避免出现此类情况。</li></ol><ul><li>如果我从你那里接收到一个时间戳大于我的最后一个发出的时间戳的消息，则更新当前时间戳以超过您的。</li><li><strong>rts只需要和WTM比，wts要和WTM和RTM比</strong><br>The scheduler receives read&#x2F;write requests tagged with<br>the timestamp of the requesting transaction:<br>• rts(x):<br>• If ts &lt; WTM(x) the request is rejected and the transaction is killed<br>• Else, access is granted and we set <strong>RTM(x) &#x3D; max(RTM(x), ts)</strong><br>• wts(x):<br>• If ts &lt; RTM(x) or ts &lt; WTM(x) the request is rejected and the<br>transaction is killed<br>• Else, access is granted and we set <strong>WTM(x) &#x3D; ts</strong></li></ul><ol start="4"><li>2PL vs. TS  incomparable</li><li>TS and CSR<br>• TS &#x3D;&gt; CSR</li><li>TS and dirty reads</li><li><strong>Thomas Rule</strong>：reduce kill rate</li></ol><p><strong>处理wts时</strong>，<br>ts &lt; RTM(x)：杀<br>ts &lt; WTM(x)：过时，跳过<br>else：授权访问</p><ul><li>TS with Thomas Rule maybe not in VSR</li></ul><h2 id="TS-mono"><a href="#TS-mono" class="headerlink" title="TS-mono"></a>TS-mono</h2><p>• rts(x):<br>• If ts &lt; WTM(x) the request is rejected and the transaction is killed<br>• Else, access is granted and we set RTM(x) &#x3D; max(RTM(x), ts)<br>• wts(x):<br>• If ts &lt; RTM(x) or ts &lt; WTM(x) the request is rejected and the<br>transaction is killed<br>• Else, access is granted and we set WTM(x) &#x3D; ts</p><h2 id="Multiversion-Concurrency-Control"><a href="#Multiversion-Concurrency-Control" class="headerlink" title="Multiversion Concurrency Control"></a>Multiversion Concurrency Control</h2><p>WTMi(x), RTM(x)</p><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism:"></a>Mechanism:</h3><p>• <strong>rts(x) is always accepted</strong>. A copy xk is selected for reading<br>such that:<br>• If ts &gt;&#x3D; WTMN(x), then k &#x3D; N<br>• Else take k such that WTMk(x) &lt;&#x3D; ts &lt; WTMk+1(x)<br>• <strong>wts(x):</strong><br>• If ts &lt; RTM(x) the request is rejected<br>• Else a new version is created for timestamp ts (N is incremented)<br>• WTM1(x), …, WTMN(x) are the new versions, kept sorted from<br>oldest to youngest<br>• NB: unlike here, in real systems based, e.g., on snapshot isolation<br>(see later) and, for simplicity, in the exercises, if ts &lt; WTMN(x),<br>the request is rejected</p><p>做题心得：</p><ol><li>lost update: 必须是interleaved的两个r-w，只有w不行</li><li>phantom update: 必须有一个全局的限制条件，update后全局条件没变，但因为某些事务不知道所有的update，所以它觉得全局条件不满足了(两个读，一个读改之前的，一个读已经被别的事务改过的)</li><li>属于VSR但不属于CSR的schedule都有一个共同的特点：他的冲突图中存在因为一对blind writes而产生的一对边导致的循环(w1,w2,w3)<br>什么是blind write？ 对于同一个资源，不是最后一个操作，后续还有写<br>找到blind write之后，调换它们的位置，看看能不能消除循环</li></ol><p>几个快速判断VSR的方法：</p><ul><li>if has the same reads-from and final writes(一般只有是VSR的时候这种方法才有效，因为需要和serial schedule比对)</li><li>找找有没有blind write，调换它们的位置，看看能不能消除循环</li><li>看看找到相互冲突的两对，如果不能调整任何一对的顺序，循环不能消除，说明不是VSR</li><li>找每个循环的共同部分，看看能不能打破循环</li></ul><hr><ol start="4"><li><p>2PL(全都锁上才能释放)<br>两个注意：<br>(1)Same resource: 只有当资源R空闲的时候才能上锁(UR &lt; LR)<br>(2)Same transaction: 所有的解锁必须在上锁之前(下面的锁&lt;上面的放锁)<br>怎么判断：画表，一个一个标，找到那些必须提前加锁的时机，找到加锁和放锁的交界<br>2PL属于CSR, 可以先判断CSR</p></li><li><p>Strict-2PL<br>commit&#x2F;rollback以后才能释放锁。<br>怎么判断：找到每个事务的最后一个操作，再看在那之前需不需要提前释放锁</p></li><li><p>Obermarck<br>把i&gt;j传送给对应的node</p></li><li><p>Update lock可以消除所有的死锁吗？<br>答：不能，<br>• Clearly deadlocks are possible in the presence of UL. Indeed, UL only makes deadlock less likely, by preventing one type of (very frequent) deadlock, due to update patterns, when two transactions compete for the same resource (e.g., r1(x) r2(x) w1(x) w2(x)). Consider two distinct resources X Y, and two transactions that want to access them in this order:<br>r1(X) r2(Y) w1(Y) w2(X).<br>• It is likely that they end up in deadlock, especially if the system on which they run applies 2PL. UL is totally irrelevant here, because there is no update pattern.</p></li></ol><hr><ol start="8"><li>怎么判断TS-mono？<br>找r-w, w-r, w-w对，看看有没有too late<br>TS(mono)属于CSR，可以以此判断</li><li>怎么判断TS-multi？<br>找晚的w, 小于RTM</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> DB2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周报1</title>
      <link href="/2023/05/15/weekly1/"/>
      <url>/2023/05/15/weekly1/</url>
      
        <content type="html"><![CDATA[<h1 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h1><ol><li>复习完MIDA1，看至少一半的exe课</li><li>复习完ACA(一天看两节课，十天看完) 每天五个小时</li><li>看FOR(2)和DB(3)的PPT，并做题</li><li>写周报，分享感受，The long season</li><li>第一轮考7门：TCS（12）,ACA（13）,CI（15）,FOR（16）, <del>CS（21）</del>, DB2（23）在ACA考试前只需要把理论和TA看完就行, MIDA1（24）, <del>MIDA2,</del>  </li><li>到12点做一个TCS，下午做完物理数据库和trigger，晚上做两个mida。睡前看两个for<br>是一个exe(3天看完)，<br>for做完 1，2单元的题</li></ol><h1 id="发现的一些有趣的频道"><a href="#发现的一些有趣的频道" class="headerlink" title="发现的一些有趣的频道"></a>发现的一些有趣的频道</h1><p><a href="https://www.xiaoyuzhoufm.com/podcast/640ee2438be5d40013fe4a87">硬地骇客</a></p><p><a href="https://www.xiaoyuzhoufm.com/podcast/640ee2438be5d40013fe4a87">豌豆花下猫（关于Python）</a></p><p><a href="https://brr.fyi/">被派到南极洲工作的程序员</a><br>作者作为 IT 工程师被派到南极洲工作，博客是记录他在南极生活的点点滴滴</p><h1 id="看到的一些推特好帖"><a href="#看到的一些推特好帖" class="headerlink" title="看到的一些推特好帖"></a>看到的一些推特好帖</h1><h2 id="1-如何提高专注度"><a href="#1-如何提高专注度" class="headerlink" title="1. 如何提高专注度"></a>1. 如何提高专注度</h2><p>**转自博主Dexter Yang(@dexteryy)**，<br><a href="https://twitter.com/dexteryy/status/1629491278886076416">方法</a><br>想要通过正念（mindfulness&#x2F;meditation）来恢复对当下的感知、减慢时间流逝、用内啡肽替代多巴胺、提升专注能力、降低压力的消极影响，我觉得骑车是最有效果的（图2），比那些冥想app里的付费课程（图1）强多了。<br>方法总结：</p><ol><li>不要听播客不要听播客不要听播客（凡是抢占注意力的都不要碰）。<br>(1&#x2F;4)</li><li>开降噪，听音乐。最好是 citypop、blues  那样积极向上的音乐（这两种本来就源自上班族和黑人奴工振奋情绪排解压力的需求）。</li><li>公路车和共享单车都可以。</li><li>把注意力放在自身感受和眼前情景上，只接受下意识的瞬间的发散和思考。</li><li>天气要好，一定要有阳光，推荐下午出发，去程有落日返程有夜景。</li><li>路线选择类似 city walk，尽量途径那些有河、有沿街生态、城市机理细密有机多样的地方。</li></ol>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本</title>
      <link href="/2023/05/15/words(week21)/"/>
      <url>/2023/05/15/words(week21)/</url>
      
        <content type="html"><![CDATA[<p>#1.  predicate<br>[英] · &#x2F;ˈprɛdɪkət&#x2F;<br>[n.] 谓语；断言<br>[v.] 断言；预示</p><p>例句：</p><ol><li>The predicate of this sentence is “is a teacher”. (这个句子的谓语是“是一名老师”。)</li><li>She predicates her success on hard work and determination. (她认为自己的成功取决于努力和决心。)</li><li>In logic, the predicate refers to the part of a proposition that expresses what is said about the subject. (在逻辑学中，谓词指表达主语所说内容的命题部分。)</li></ol><p>#2. sparingly<br>[英] · &#x2F;ˈspeərɪŋli&#x2F;<br>[副词] 节约地，保守地</p><p>例句：</p><ol><li>She uses water sparingly when she washes dishes. (她洗碗时很节水。)</li><li>He doles out praise sparingly, so when he compliments you, it really means something. (他不轻易夸赞别人，所以当他表扬你时，真的有意义。)</li><li>The company has been spending money more sparingly since the economic downturn began. (自从经济衰退开始以来，公司一直在更加节省开支。)</li></ol><p>#3. anticipate<br>[英] · &#x2F;ænˈtɪs.ɪ.peɪt&#x2F;  美 · &#x2F;ænˈtɪs.ə.peɪt&#x2F;<br>[v] 预期；预料；期望<br>例句：</p><ol><li>I anticipate a difficult exam tomorrow. (我预计明天会有一场难考试。)</li><li>The company is anticipating an increase in profits this year. (公司预计今年利润将增加。)</li><li>She anticipated his every move and was always one step ahead of him. (她能够预见他的每一个动作，总是比他先一步。)</li></ol><p>#4. mitigate<br>[英] · &#x2F;ˈmɪtɪɡeɪt&#x2F;  [美] · &#x2F;ˈmɪtəˌgeɪt&#x2F;<br>[v] 缓和，减轻；使缓和，使减轻<br>例句：</p><ol><li>The doctor prescribed some medicine to mitigate the pain. (医生开了一些药来缓解疼痛。)</li><li>We need to take measures to mitigate the impact of climate change. (我们需要采取措施来减轻气候变化的影响。)</li><li>The company implemented policies to mitigate risks in their investments. (公司实施了政策以降低其投资风险。)</li></ol><p>#5. replication<br>[英] · &#x2F;ˌrɛplɪˈkeɪʃən&#x2F;<br>[n.] 复制；复刻；重复<br>例句：</p><ol><li>DNA replication is a fundamental process in cell division. (DNA的复制是细胞分裂中的基本过程。)</li><li>The artist made a perfect replication of the famous painting. (艺术家完美地复制了那幅著名画作。)</li><li>The study aimed to investigate the replication of previous research findings. (这项研究旨在调查之前研究结果的重现性。)</li></ol><p>#6. magnitude<br>[英] · &#x2F;ˈmæɡnɪtjuːd&#x2F;  美 · &#x2F;ˈmæɡnətuːd&#x2F;<br>[n.] 大小；量级；重要性<br>[adj.] 巨大的，重要的<br>例句：</p><ol><li>The magnitude of the earthquake was measured at 7.0 on the Richter scale. (这次地震的大小被测定为里氏7.0级。)</li><li>We cannot underestimate the magnitude of this problem. (我们不能低估这个问题的重要性。)</li><li>The company has achieved a magnitude of success that no one could have predicted. (该公司已经取得了一个无人能够预料到的巨大成功。)</li></ol><p>#7. vice-versa<br>反之亦然</p><p>#8.  高出四个数量级<br>is 4 orders of magnitude higher than</p><p>#9. • In “I&#x2F;O bound” applications the cost exclusively depends on the number of accesses to secondary memory<br>在“I&#x2F;O bound”应用程序中，成本完全取决于对辅助存储器的访问次数。</p><p>在这个句子中，“exclusively”的意思是“仅仅、唯一地”。它强调了成本只与对辅助存储器的访问次数有关，而与其他因素无关。 </p><p>举例来说，如果一个人说他只喜欢吃巧克力蛋糕，那么他就是“exclusively”喜欢吃巧克力蛋糕。 </p><p>其他类似的表达方式包括：</p><ul><li>solely: 仅仅、单独地</li><li>purely: 纯粹地、完全地</li></ul><p>例如：她纯粹是为了钱才去做那份工作。（She did the job purely for money.）</p><p>#10. make limited use of<br>#11. distinctive<br>[英] · &#x2F;dɪˈstɪŋktɪv&#x2F;<br>[形容词] 独特的；有特色的；与众不同的<br>例句：</p><ol><li>Her distinctive voice made her stand out in the crowd. (她独特的声音使她在人群中脱颖而出。)</li><li>The building’s architecture is quite distinctive and easily recognizable. (这座建筑物的建筑风格非常独特，很容易辨认。)</li><li>The company has a distinctive approach to marketing that sets it apart from its competitors. (该公司具有一种独特的营销方式，使其与竞争对手区别开来。)</li></ol><p>#12. Obsolete<br>[英] · &#x2F;ˌɒbsəˈliːt&#x2F;  美 · &#x2F;ˌɑːbsəˈliːt&#x2F;<br>[形] 过时的；废弃的；淘汰的<br>例句：</p><ol><li>The old computer system is now obsolete and needs to be replaced. (这个旧电脑系统现在已经过时了，需要被替换。)</li><li>This law has become obsolete and no longer serves its intended purpose. (这项法律已经过时了，不再起到原本预期的作用。)</li><li>Many traditional skills have become obsolete in the age of automation and technology. (在自动化和技术发展的时代，许多传统技能已经变得过时了。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.15 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exe1</title>
      <link href="/2023/05/07/Exe1/"/>
      <url>/2023/05/07/Exe1/</url>
      
        <content type="html"><![CDATA[<h1 id="Performance-Amdhal’s-Law-Pipeline"><a href="#Performance-Amdhal’s-Law-Pipeline" class="headerlink" title="Performance, Amdhal’s Law, Pipeline"></a>Performance, Amdhal’s Law, Pipeline</h1><ol><li>为什么MIPS架构五级流水线的指令译码阶段和写回阶段可以被分成两部分？</li></ol><p>在MIPS架构中，指令译码阶段的指令解码和操作数寻址可以在同一个阶段中实现。这是因为在MIPS架构中，指令的格式是固定的，指令中的寄存器编号和偏移量等操作数地址相关信息都在指令的特定位置上。</p><p>在指令译码阶段，指令解码和操作数寻址这两个小部分的执行顺序是有先后关系的。</p><p>具体来说，指令解码必须在操作数寻址之前执行，因为指令解码需要识别指令的类型和需要访问的寄存器和存储器，这些信息是操作数寻址所必需的。如果操作数寻址在指令解码之前执行，那么CPU就无法确定需要访问的寄存器和存储器，无法进行有效的操作数寻址。</p><p>因此，在指令译码阶段，指令解码和操作数寻址必须按照指定的顺序依次执行。通常情况下，指令解码和操作数寻址可以在同一个时钟周期内完成，因此它们被视为一个阶段，但是在实际的设计中，也可以将它们分别实现为两个子阶段，以便更好地控制CPU的时序和性能。</p><ol start="2"><li>MIPS有哪些指令</li></ol><p>MIPS架构定义了多种指令，包括算术指令、逻辑指令、移位指令、条件分支指令、跳转指令、访存指令等等。以下是MIPS指令的一些常见分类：</p><p>算术指令：包括加、减、乘、除等指令。例如：add、addi、addu、addiu、sub、mult、div等。</p><p>逻辑指令：包括与、或、异或、非等指令。例如：and、or、xor、nor等。</p><p>移位指令：包括左移、右移等指令。例如：sll、srl、sra等。</p><p>条件分支指令：包括条件分支和条件跳转等指令。例如：beq、bne、blez、bgtz等。</p><p>跳转指令：包括无条件跳转指令和子程序调用指令等。例如：j、jal、jr等。</p><p>访存指令：包括从内存中读取数据和将数据写入内存等指令。例如：lw、lb、sw、sb等。</p><p>此外，MIPS还支持一些特殊的指令，如异常处理指令、协处理器指令等，这些指令可以用于特殊的计算需求，例如浮点运算等。</p><ol start="3"><li>lw和sw指令</li></ol><p>lw和sw指令是MIPS架构中的访存指令，用于从内存中读取数据和将数据写入内存。它们的具体功能和用法如下：</p><ul><li><p>lw指令：从内存中读取一个字（32位数据），并将其存储到指定的寄存器中。lw指令的语法如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lw $rt, offset($rs)</span><br></pre></td></tr></table></figure><p> 其中，$rt是目标寄存器，offset是偏移量，$rs是基地址寄存器。偏移量表示目标地址相对于基地址的偏移量，可以是一个立即数或者另一个寄存器的值。</p><p> 执行过程如下：首先，CPU将基地址寄存器的值加上偏移量，计算出目标地址；然后，CPU从目标地址中读取一个字（32位数据），并将其存储到目标寄存器中。如果读取过程中发生异常，如地址错误或者访问权限错误等，CPU将产生一个异常，需要进行异常处理。</p></li><li><p>sw指令：将一个字（32位数据）存储到指定的内存地址中。sw指令的语法如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sw $rt, offset($rs)</span><br></pre></td></tr></table></figure><p> 其中，$rt是源寄存器，offset是偏移量，$rs是基地址寄存器。偏移量表示目标地址相对于基地址的偏移量，可以是一个立即数或者另一个寄存器的值。</p><p> 执行过程如下：首先，CPU将基地址寄存器的值加上偏移量，计算出目标地址；然后，CPU将源寄存器中的值存储到目标地址中。如果存储过程中发生异常，如地址错误或者访问权限错误等，CPU将产生一个异常，需要进行异常处理。</p></li></ul><p>需要注意的是，偏移量可以是一个有符号的16位整数，因此，lw和sw指令最大可以访问的内存范围是从基地址加上-32768到基地址加上32767的区间。此外，MIPS是一个大端字节序的架构，因此，读取和存储的字节顺序是从高位到低位的。</p><ol start="4"><li>在MIPS处理器中，Forwarding path怎么工作？</li></ol><p>在MIPS处理器中，Forwarding path被广泛用于解决数据冒险（Data Hazard）的问题，提高指令的执行效率。具体地，Forwarding path通常在以下两个阶段被使用：</p><ul><li>执行阶段</li></ul><p>在执行阶段，Forwarding path被用于解决数据冒险。当一个指令需要使用另一个指令的执行结果时，通常会等待前一条指令的结果被写入寄存器后才能继续执行后续指令。但是，如果前一条指令的结果可以直接传递给后续指令，就可以通过Forwarding path来避免等待寄存器的写入。</p><p>在MIPS处理器中，执行阶段的指令通常会产生数据结果，并<strong>将其存储在执行阶段的寄存器中</strong>。如果后续指令需要使用这些结果，则需要在<strong>执行阶段的输出阶段中使用Forwarding path</strong>将数据结果传递给后续指令。</p><ul><li>访存阶段</li></ul><p>在MIPS处理器中，数据访问指令，如lw和sw指令，通常需要在访存阶段中执行。这些指令涉及访问内存或外部设备，因此需要在内存或外部设备中读取或写入数据。</p><p>在访存阶段，如果后续指令需要使用lw指令加载的数据，则需要使用Forwarding path将数据传递给后续指令。类似地，如果后续指令需要将数据存储到内存中，则需要在执行sw指令时使用Forwarding path，以便将数据直接传递给存储器，<strong>而不是等待其被写入寄存器。</strong></p><p>总之，Forwarding path是MIPS处理器中解决数据冒险的重要技术，可以在不需要等待寄存器写入的情况下加速指令的执行，并提高CPU的效率。</p><ol start="5"><li>具体讲一下指令译码阶段要完成哪些工作</li></ol><p>在MIPS五级流水线中，指令译码阶段是第二个阶段，也被称为ID（Instruction Decode）阶段。在这个阶段，处理器会执行以下操作：</p><p>从指令寄存器中取出当前指令，然后将其解码，确定指令类型和操作数。<br>读取寄存器文件中的操作数寄存器的值，并将其存储在指令中的寄存器操作数字段中。<br><em>执行分支和跳转指令的目标地址计算</em>。对于分支指令，需要判断分支是否应该被执行，即判断条件码寄存器中的标志位是否符合指令中的条件码要求；对于跳转指令，需要计算跳转目标地址，并将其存储在指令中的目标地址字段中。<br>为执行阶段准备数据，将指令中的操作数传递给执行阶段，以便执行阶段可以进行操作。<br>总之，<strong>指令译码阶段是将指令翻译成处理器可以理解的指令格式，并将操作数准备好</strong>，以便执行阶段能够使用它们。在这个阶段，处理器还会进行分支和跳转指令的处理，以便指令流能够正确地执行。</p><ol start="6"><li>sw的指令译码阶段要做什么</li></ol><p>在MIPS五级流水线中，sw指令是一种存储数据的指令，它将一个寄存器的值存储到内存中。在指令译码阶段，sw指令需要完成以下工作：</p><ul><li>解码指令，确定指令类型和操作数。对于sw指令，指令类型为存储型指令，其中操作数包括要存储的数据和内存地址。</li><li>读取源寄存器中的数据，即要存储的数据。这需要访问寄存器文件，并从指定的寄存器中读取数据。</li><li>计算内存地址，这需要访问寄存器文件，并从指定的寄存器中读取基地址，然后将偏移量添加到基地址上得到内存地址。偏移量存储在指令的立即数字段中。</li><li>将存储数据和内存地址传递给执行阶段，以便执行阶段能够将数据存储到内存中。<br>需要注意的是，由于存储操作需要访问内存，因此存储操作可能会发生数据冒险问题。如果前面的指令已经修改了要存储的数据，那么该值将不会正确地存储到内存中。为了解决这个问题，MIPS处理器使用了一些技术，如前向传递和暂停插入，以确保数据在正确的时间传递到存储阶段。</li></ul><ol start="7"><li>MIPS写回阶段要完成哪些工作</li></ol><p>在MIPS五级流水线中，写回阶段是最后一个阶段，也是整个指令执行过程的最后一步。在写回阶段，需要完成以下工作：</p><ul><li>读取执行阶段中计算得出的结果，即要写回的数据。这些数据可能来自寄存器或内存，具体取决于执行的指令类型。</li><li>将数据写回到寄存器文件中。要写回的寄存器编号和数据都来自执行阶段。写回操作通常是一个简单的操作，它只需要将数据写入寄存器文件中的指定位置即可。</li><li>如果存在异常，将异常信号传递到控制器中，以便控制器可以采取适当的措施，如中断执行流程或跳转到异常处理程序。</li></ul><ol start="8"><li>写回阶段不是要把数据写回内存吗</li></ol><p>在MIPS架构中，数据存储在寄存器文件或内存中。写回阶段主要是将计算得出的结果写回到<strong>寄存器文件</strong>中，而不是写回到内存中。写回到内存的指令是存储器访问指令，例如sw指令，它们的写回操作在执行阶段中完成。在执行阶段中，存储器访问指令需要计算内存地址、读取要存储的数据，并将它们写回到内存中。当这些操作完成后，执行阶段就结束了，接下来就是写回阶段。在写回阶段，执行阶段计算得出的结果会被写回到寄存器文件中，以便后续的指令可以使用这些结果。所以，写回阶段主要是负责将数据写回到寄存器文件中，而不是写回到内存中。</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec3</title>
      <link href="/2023/05/07/Lec3/"/>
      <url>/2023/05/07/Lec3/</url>
      
        <content type="html"><![CDATA[<h1 id="Branch-Hazards-and-Static-Branch-Prediction-Techniques"><a href="#Branch-Hazards-and-Static-Branch-Prediction-Techniques" class="headerlink" title="Branch Hazards and Static Branch Prediction Techniques"></a>Branch Hazards and Static Branch Prediction Techniques</h1><h2 id="Three-classes-of-hazards"><a href="#Three-classes-of-hazards" class="headerlink" title="Three classes of hazards"></a>Three classes of hazards</h2><p>现在来看Control Hazards</p><ol><li>Branch Target Address指向else地址</li><li>在EXE阶段末尾算出BTA<br> 在ME结段末更新PC，此时才能取回指令</li><li>Taken&#x2F;Not taken<br>If the branch is <strong>not taken</strong>, the pipeline execution is OK<br>If the branch is <strong>taken</strong>, it is necessary to flush the next <strong>3</strong> instructions<br>in the pipeline and fetched the lw instruction at the branch target<br>address (L1)</li><li><strong>Branch Stalls without Forwarding</strong> 等待3个cycle<br><strong>Branch Stalls with Forwarding</strong> 等待2个cycle</li><li>MIPS processor <code>compares registers</code>, <code>computes branch target address</code> and <code>updates PC</code> during <strong>ID stage</strong>. 只需要stall一个cycle</li></ol><h2 id="Branch-Prediction-Techniques"><a href="#Branch-Prediction-Techniques" class="headerlink" title="Branch Prediction Techniques"></a>Branch Prediction Techniques</h2><h3 id="Static-Branch-Prediction-Techniques-offline"><a href="#Static-Branch-Prediction-Techniques-offline" class="headerlink" title="Static Branch Prediction Techniques(offline)"></a>Static Branch Prediction Techniques(offline)</h3><p>Branch Always Not Taken (Predicted-Not-Taken)<br>Branch Always Taken (Predicted-Taken)<br>Backward Taken Forward Not Taken (BTFNT)<br>Profile-Driven Prediction</p><p><strong>Delayed Branch</strong> : </p><ol><li>From before</li><li>From target</li><li>From fall-through</li></ol><h3 id="Dynamic-Branch-Prediction-Techniques"><a href="#Dynamic-Branch-Prediction-Techniques" class="headerlink" title="Dynamic Branch Prediction Techniques"></a>Dynamic Branch Prediction Techniques</h3><p><strong>Branch Outcome and Branch Target Address are ready at the end of EX statge(3th stage). Conditional branches are solved when PC is updated at the end of the ME stage(4th Stage).The branch decision is taken during the MEM stage(Taken or Not Taken)</strong></p><hr><ol><li>beq和bne指令具体的结构是什么样的</li></ol><p>beq和bne指令的具体结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beq $rs, $rt, offset</span><br><span class="line">bne $rs, $rt, offset</span><br></pre></td></tr></table></figure><p>其中，$rs和$rt是两个要比较的寄存器，offset是要跳转的相对地址。</p><p>这两个指令的作用分别是比较$rs和$rt的值是否相等或不相等，如果相等或不相等则跳转到当前PC值加上offset后的地址。</p><p>例如，如果要比较寄存器$4和$5的值是否相等，如果相等则跳转到当前PC加上8个字节（即2条指令）后的地址，可以使用以下beq指令：</p><p>beq $4, $5, 8</p><p>如果要比较寄存器$6和$7的值是否不相等，如果不相等则跳转到当前PC加上16个字节（即4条指令）后的地址，可以使用以下bne指令：</p><p>bne $6, $7, 16</p><p>这两个指令在程序控制流程中应用广泛，可以用于实现if-else语句、while循环等程序控制结构。</p><ol start="2"><li>beq指令在MIPS处理器中的执行需要经过多个阶段。下面是beq指令在不同阶段的具体工作：</li></ol><ul><li><p>指令获取阶段（Instruction Fetch，IF）：<br>在这个阶段，处理器从指令存储器（Instruction Memory，IM）中读取指令。对于beq指令，处理器将PC（程序计数器）加上4得到当前指令的地址，然后从IM中读取该地址的指令。</p></li><li><p>指令译码阶段（Instruction Decode，ID）：<br>在这个阶段，处理器对指令进行解码，确定需要比较的两个寄存器（$rs和$rt）和跳转的偏移量（offset）。处理器从寄存器堆中读取$rs和$rt的值，将这两个值进行比较。</p></li><li><p>执行阶段（Execute，EX）：<br>在这个阶段，处理器执行比较操作。如果$rs和$rt的值相等，则将PC加上偏移量（offset）后的地址作为下一条指令的地址；否则，继续执行下一条指令。注意，在这个阶段可能会出现数据冒险，需要使用forwarding path来解决。</p></li><li><p>访存阶段（Memory Access，MEM）：<br>在这个阶段，处理器不需要进行任何操作。beq指令不涉及内存的读写操作，因此这个阶段可以省略。</p></li><li><p>写回阶段（Write Back，WB）：<br>在这个阶段，处理器不需要进行任何操作。beq指令不需要将结果写回到寄存器堆中，因此这个阶段也可以省略。</p></li></ul><p>需要注意的是，当beq指令的条件成立时，跳转目标是PC加上偏移量后的地址。因此，偏移量应该是一个相对地址，可以是一个负数。跳转目标的地址计算应该在执行阶段完成，同时需要注意指令地址应该按4字节对齐，因此偏移量需要乘以4。</p><ol start="3"><li>beq指令的执行阶段可以分成两个小阶段吗</li></ol><p>beq指令的执行阶段可以分成两个小阶段：执行和分支判断。具体来说：</p><ul><li><p>执行阶段：将第一个操作数和第二个操作数相减，得到运算结果。这个阶段与其他指令的执行阶段类似，不需要特别的处理。</p></li><li><p>分支判断阶段：在执行阶段得到的运算结果为0时，表示两个操作数相等，此时需要跳转。因此，在分支判断阶段，需要判断执行阶段得到的运算结果是否为0，如果是，就需要进行跳转。为了实现这个功能，需要在<strong>执行阶段</strong>将跳转地址保存在流水线寄存器中，并在<strong>分支判断阶段从流水线寄存器中取出跳转地址并判断是否需要跳转</strong>。如果需要跳转，就将取出的跳转地址送到PC（程序计数器）中，更新下一条指令的地址。如果不需要跳转，就继续执行下一条指令。</p></li></ul><ol start="4"><li>EXE2的PPT第19页为什么i5要阻塞一个周期？<br>为了等t0<br>那为什么$t2不需要等WB结束呢？<br>第17页为什么MEM&#x2F;ID是灰色的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> ACA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> ACA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/04/23/leetcode(%E9%93%BE%E8%A1%A8)/"/>
      <url>/2023/04/23/leetcode(%E9%93%BE%E8%A1%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>&#x2F;**</p><ul><li>Definition for singly-linked list.</li><li>public class ListNode {</li><li><pre><code>int val;</code></pre></li><li><pre><code>ListNode next;</code></pre></li><li><pre><code>ListNode() &#123;&#125;</code></pre></li><li><pre><code>ListNode(int val) &#123; this.val = val; &#125;</code></pre></li><li><pre><code>ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</code></pre></li><li>}<br> *&#x2F;</li></ul><ul><li>链表怎么遍历</li><li>怎么解决位数不同的问题。我好像知道了，从低位开始加。一开始没考虑到位数比较小的数后期指向空指针的问题，可能需要分类讨论。如果l1没空，l2空了，</li></ul><ol><li>链表要用 -&gt;</li><li>链表定义：ListNode *l3&#x3D;l1,*l4&#x3D;l2;</li><li>链表和数组不同，可以在函数体内定义新的指针并返回</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        int index=0;</span><br><span class="line">        int sum=0;</span><br><span class="line"></span><br><span class="line">        ListNode *l3=l1,*l4=l2;//遍历指针</span><br><span class="line">        ListNode *l5=l1;//用来存放准备输出的指针</span><br><span class="line"></span><br><span class="line">        while (l3!=NULL &amp;&amp; l4!=NULL) //l3和l4不为空，两数相加，存入l1中</span><br><span class="line">        &#123;</span><br><span class="line">            sum=l3-&gt;val+l4-&gt;val+index;</span><br><span class="line">            index=0;//想加完以后要把index即使设置成0</span><br><span class="line">            if(sum&lt;10) </span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125;//这个用取余</span><br><span class="line">            l1=l1-&gt;next;//准备l1的下一个结点赋值</span><br><span class="line">            l3=l3-&gt;next;//遍历l3和l4</span><br><span class="line">            l4=l4-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，肯定有一个链表已经被遍历完了(也就是说，l3或l4==NULL)</span><br><span class="line">        while(l3==NULL&amp;&amp;l4!=NULL)//l4没有遍历完，说明l2比l1长，说明l3和l1被遍历完了，说明我们需要添加新的节点给l3和l1</span><br><span class="line">        &#123; </span><br><span class="line">            sum=l4-&gt;val+index;</span><br><span class="line">            index=0; </span><br><span class="line">                    </span><br><span class="line">            if(sum&lt;10) l1-&gt;val=sum;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125; </span><br><span class="line">            ListNode *newNode1=new ListNode();</span><br><span class="line">            l1-&gt;next=l4-&gt;next=newNode1;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">            l4=l4-&gt;next; </span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，l4也被遍历完了，l4==NULL</span><br><span class="line">        while(l3!=NULL&amp;&amp;l4==NULL)//l3没有被遍历完</span><br><span class="line">        &#123;</span><br><span class="line">            sum=l3-&gt;val+index;</span><br><span class="line">            index=0;</span><br><span class="line"></span><br><span class="line">            if(sum&lt;10) </span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum;</span><br><span class="line">                //index=0;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l1-&gt;val=sum-10;</span><br><span class="line">                index=1;</span><br><span class="line">            &#125;  </span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">            l3=l3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        //到目前为止，l3和l4肯定都遍历完了</span><br><span class="line">        if(index)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode *newNode2=new ListNode(1);</span><br><span class="line">            l1-&gt;next=newNode2;</span><br><span class="line">        &#125;</span><br><span class="line">        return l5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="chatgpt分析"><a href="#chatgpt分析" class="headerlink" title="chatgpt分析"></a>chatgpt分析</h2><p>这段代码实现的是两个非负整数的链表相加，返回一个新的链表作为结果。代码有以下问题：</p><ol><li>在链表头节点没有值的情况下，需要创建一个新的节点来存储结果，但是代码中没有考虑这种情况。</li></ol><p>我们使用指针 l5 来指向第一个节点，指针 l1 用于遍历链表并修改节点的值。在链表头节点没有值的情况下，我们需要创建一个新的节点，让 l1 指向这个新的节点。这个新的节点就是链表的头节点，其实际上是存储结果的链表。</p><p>具体来说，在这段代码中，我们将 l1 初始化为 l5，即让 l1 指向第一个节点。当我们在循环中修改节点的值时，我们实际上是修改了 l1 所指向节点的值。如果 l1 所指向的节点是链表的头节点，即它没有值，那么我们需要先创建一个新的节点，让 l1 指向这个新的节点。这个新的节点就是存储结果的链表的头节点。这样，我们就可以在链表头节点没有值的情况下，通过创建新的节点来存储结果。</p><ol start="2"><li><p>在两个链表中，一个链表比另一个长的情况下，代码没有考虑添加新节点的情况，也没有正确处理进位。</p></li><li><p>当相加结果超过10的时候，代码使用的是sum-10来计算当前节点的值，但是应该使用sum%10来计算余数。</p></li><li><p>当最高位相加需要进位的时候，代码没有正确处理这种情况。</p></li><li><p>在返回结果之前，代码没有处理新创建的节点的内存释放，容易出现内存泄漏。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表(Linked list) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生词本</title>
      <link href="/2023/04/19/new%20words/"/>
      <url>/2023/04/19/new%20words/</url>
      
        <content type="html"><![CDATA[<h1 id="agnostic"><a href="#agnostic" class="headerlink" title="agnostic"></a>agnostic</h1><p>[英] · &#x2F;æɡˈnɒstɪk&#x2F;</p><p>[n.] 不可知论者，不可知论的</p><p>例句：</p><ul><li><p>He was raised in a religious family, but now considers himself an agnostic. (他在一个宗教家庭中长大，但现在认为自己是个不可知论者。)</p></li><li><p>The debate between the atheist and the agnostic became quite heated. (无神论者和不可知论者之间的辩论变得非常激烈。)</p></li><li><p>She has always been curious about different religions, but remains agnostic herself. (她一直对不同的宗教很好奇，但自己仍然是个不可知论者。)</p></li></ul><h1 id="improve-and-squeeze-the-performance"><a href="#improve-and-squeeze-the-performance" class="headerlink" title="improve and squeeze the performance"></a>improve and squeeze the performance</h1><p>“squeeze” 在这个句子中的意思是“挤压”，指通过紧缩或压缩来提高表现。整个句子的意思是“改善并挤压表现”。</p><p>这里的 “squeeze” 可以理解为一种习语，表示尽可能地利用资源或时间来达到最佳效果。类似的英文例句有：</p><ol><li>We need to squeeze every last drop of performance out of our team.</li></ol><p>（我们需要从团队中挤出每一滴性能）</p><ol start="2"><li>The coach is trying to squeeze more speed out of the athlete’s running technique.</li></ol><p>（教练正在试图从运动员跑步技术中挤出更多速度）</p><ol start="3"><li>I’m going to have to squeeze in a workout before my meeting this afternoon.</li></ol><p>（我得在今天下午开会前抽空做一次锻炼）</p><h1 id="go-beyond"><a href="#go-beyond" class="headerlink" title="go beyond"></a>go beyond</h1><p>Go beyond” 在这个句子中是一个动词短语，意思是“超越、突破”。整个句子的意思是“我们如何能够超越现有的限制或者达到更高的目标”。</p><p>举几个相同意思的例句：</p><ol><li><p>We need to go beyond our comfort zone if we want to achieve success.（如果想要成功，我们需要突破自己舒适区）</p></li><li><p>The company is trying to go beyond its competitors by offering better services.（公司正在通过提供更好的服务来超越竞争对手）</p></li><li><p>To truly understand a culture, you must go beyond the surface level and delve deeper into its history and traditions.（要真正理解一种文化，你必须深入了解其历史和传统）</p></li></ol><h1 id="arguerarchy"><a href="#arguerarchy" class="headerlink" title="arguerarchy"></a>arguerarchy</h1><p>[英语] · &#x2F;ˌɑːɡjuˈærki&#x2F;</p><p>[n.] 争论统治，以争辩为基础的领导方式</p><p>例句：</p><ol><li><p>The company’s decision-making process is often slowed down by the arguerarchy among its top executives. (公司的决策过程常常被高管之间的争论所拖延。)</p></li><li><p>Some people believe that democracy is just another form of arguerarchy, where those who are loudest and most persuasive get their way. (有些人认为民主只是另一种形式的争论统治，在这里最响亮和最有说服力的人能够得到他们想要的。)</p></li><li><p>In an arguerarchy, it can be difficult for new ideas or perspectives to gain traction if they don’t fit with the prevailing opinions of those in power. (在一个以争辩为基础的领导方式中，如果新思想或观点与当权者普遍持有的意见不符，它们很难获得支持。)</p></li></ol><h1 id="coarse-grained-multithreading"><a href="#coarse-grained-multithreading" class="headerlink" title="coarse grained multithreading"></a>coarse grained multithreading</h1><p>“coarse”的意思是“粗糙的”或者“粗略的”。整个句子指的是一种多线程技术，其中任务被分成较大、较粗糙的块来执行。</p><p>类似含义的tl例句有：</p><ul><li><p>Fine-grained multithreading（细粒度多线程）</p></li><li><p>Coarse-grained parallelism（粗略并行）</p></li></ul><p>简单解释一下这些例句：Fine-grained multithreading 指将任务划分为更小、更细致的块以实现多线程；Coarse-grained parallelism 则指使用相对较大和不太详细地定义任务来实现并行处理。</p><h1 id="salvation"><a href="#salvation" class="headerlink" title="salvation"></a>salvation</h1><p>[英] &#x2F;sælˈveɪʃən&#x2F;<br>[n.] 拯救，救赎<br>例句：</p><ol><li>The church teaches that salvation comes through faith in Jesus Christ. (教会认为拯救来自于对耶稣基督的信仰。)</li><li>He felt a sense of salvation after confessing his sins to the priest. (向神父忏悔后，他感到一种解脱感。)</li><li>Many people seek salvation from their problems through meditation or prayer. (许多人通过冥想或祷告寻求摆脱问题的拯救。)</li></ol><h1 id="utilization"><a href="#utilization" class="headerlink" title="utilization"></a>utilization</h1><p>[英] · &#x2F;juːtɪlaɪ’zeɪʃ(ə)n&#x2F;</p><p>[n.] 利用，使用</p><p>例句：</p><ol><li><p>The company aims to increase the utilization of its resources. (公司旨在提高其资源的利用率。)</p></li><li><p>Proper utilization of time is essential for success. (合理利用时间对于成功至关重要。)</p></li><li><p>The government is promoting the utilization of renewable energy sources. (政府正在推广可再生能源的利用。)</p></li></ol><h1 id="furious"><a href="#furious" class="headerlink" title="furious"></a>furious</h1><p>[英语] · &#x2F; ˈfjʊəriəs &#x2F;</p><p>[形容词] 狂怒的；暴怒的；猛烈的</p><p>例句：</p><ol><li>She was absolutely furious when she found out.</li></ol><p>（她发现后非常愤怒。）</p><ol start="2"><li>The fans were furious at the team’s performance.</li></ol><p>（球迷对队伍表现感到非常愤怒。）</p><ol start="3"><li>He slammed the door in a furious rage.</li></ol><p>（他勃然大怒，砰地一声关上了门。）</p><h1 id="taxonomy"><a href="#taxonomy" class="headerlink" title="taxonomy"></a>taxonomy</h1><p>[英] &#x2F;tækˈsɒnəmi&#x2F;</p><p>[n.] 分类学</p><p>例句：</p><ol><li><p>The taxonomy of this species is still under debate. (这个物种的分类学仍在争议中。)</p></li><li><p>She specializes in the taxonomy of marine organisms. (她专攻海洋生物的分类学。)</p></li><li><p>Taxonomy is an important field in biology and ecology. (分类学是生物和生态学中重要的领域。)</p></li></ol><h1 id="decrement"><a href="#decrement" class="headerlink" title="decrement"></a>decrement</h1><p>[英] &#x2F;ˈdɛkrɪmənt&#x2F;<br>[n.] 递减，减少<br>[v.] 减少，逐渐变小</p><p>例句：</p><ol><li><p>The company’s profits have been in a state of decrement for the past year. (公司的利润在过去一年里一直处于下降状态。)</p></li><li><p>We need to decrement our expenses if we want to save money. (如果我们想要省钱，就需要减少开支。)</p></li><li><p>The population of this town has been decrementing steadily over the years. (这个城镇的人口数量多年来一直在稳步下降。</p></li></ol><h1 id="elaborate"><a href="#elaborate" class="headerlink" title="elaborate"></a>elaborate</h1><p>[英] &#x2F;ɪˈlæbərət&#x2F;<br>[动词] 详细阐述；精心制作；详尽阐明<br>[形容词] 精心制作的；复杂的<br>例句：</p><ol><li>She elaborated on her plans for the future. (她详细阐述了自己未来的计划。)</li><li>The cake was beautifully elaborate. (这个蛋糕做得非常精美。)</li><li>He gave an elaborate explanation of his theory. (他对自己的理论进行了详尽的解释。)</li></ol><h1 id="chronologically"><a href="#chronologically" class="headerlink" title="chronologically"></a>chronologically</h1><p>[英] · &#x2F;ˌkrɒnəˈlɒdʒɪkli&#x2F;<br>[副词] 按时间顺序地<br>例句：</p><ol><li>The events were presented chronologically in the history book. (这本历史书按照时间顺序呈现了事件。)</li><li>Please arrange the documents chronologically before submitting them. (请在提交前按时间顺序排列文件。)</li><li>The professor explained the development of the theory chronologically during his lecture. (教授在讲座中按照时间顺序解释了理论的发展。)</li></ol><h1 id="ancestor"><a href="#ancestor" class="headerlink" title="ancestor"></a>ancestor</h1><p>[英] &#x2F;ˈæn.ses.tər&#x2F;<br>[n] 祖先，祖宗<br>例句：</p><ol><li>My ancestors came from Ireland. (我的祖先来自爱尔兰。)</li><li>We should respect our ancestors and their traditions. (我们应该尊重我们的祖先和他们的传统。)</li><li>The study of genealogy helps people trace their ancestors and family history. (家谱研究帮助人们追溯他们的祖先和家族历史。)</li></ol><h1 id="ellipse"><a href="#ellipse" class="headerlink" title="ellipse"></a>ellipse</h1><p>[英语] · &#x2F; ɪˈlɪps &#x2F;<br>[n.] 椭圆形<br>例句：</p><ol><li>The planet’s orbit is an ellipse.<br>（这颗行星的轨道是一个椭圆。）</li><li>The shape of the pool was an elongated ellipse.<br>（游泳池的形状是一个细长的椭圆形。）</li><li>She drew an ellipse on the paper to demonstrate its shape.<br>（她在纸上画了一个椭圆来展示它的形状。）</li></ol><h1 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate"></a>concatenate</h1><p>[英] &#x2F;kən’kætɪneɪt&#x2F;<br>[v] 连接，串联<br>例句：</p><ol><li>You can concatenate two strings using the “+” operator. (你可以使用“+”运算符连接两个字符串。)</li><li>The program will concatenate all the files in the folder into one document. (该程序将把文件夹中的所有文件连接成一个文档。)</li><li>In Excel, you can use the CONCATENATE function to combine text from different cells into one cell. (在Excel中，您可以使用CONCATENATE函数将来自不同单元格的文本组合到一个单元格中。)</li></ol><h1 id="compatible"><a href="#compatible" class="headerlink" title="compatible"></a>compatible</h1><p>[英] &#x2F;kəmˈpætəbl&#x2F;<br>[形] 兼容的；能共存的；和谐相处的<br>例句：</p><ol><li>The software is compatible with both Windows and Mac operating systems. (这个软件可以在Windows和Mac操作系统上运行。)</li><li>Their personalities are very compatible, which makes them great friends. (他们性格非常合得来，所以成为了好朋友。)</li><li>This printer is not compatible with older versions of the software. (这台打印机不兼容旧版本的软件。)</li></ol><h1 id="recast"><a href="#recast" class="headerlink" title="recast"></a>recast</h1><p>[英语] · &#x2F;riːˈkæst&#x2F;<br>[v.] 重新铸造；重塑；改写<br>例句：</p><ol><li>The director recast the lead role with a more experienced actor. (导演用更有经验的演员重新选角了主角。)</li><li>She decided to recast her novel as a screenplay. (她决定将自己的小说改编成剧本。)</li><li>The company had to recast their budget after unexpected expenses arose. (公司不得不在出现意外开支后重新制定预算。)</li></ol><h1 id="motif"><a href="#motif" class="headerlink" title="motif"></a>motif</h1><p>[英] · &#x2F;məʊˈtiːf&#x2F;<br>[n.] 主题；图案；动机<br>例句：</p><ol><li>The motif of the painting is a beautiful sunset over the ocean. (这幅画的主题是海洋上美丽的日落。)</li><li>The fabric has a floral motif that adds a touch of elegance to the dress. (这种面料有花卉图案，为裙子增添了一份优雅。)</li><li>The writer often uses the same motif in his novels, exploring different aspects of it each time. (这位作家经常在他的小说中使用相同的主题，在每次探索不同方面。)</li></ol><h1 id="usualization"><a href="#usualization" class="headerlink" title="usualization"></a>usualization</h1><p>[英] · &#x2F;ˌjuːʒʊəlaɪ’zeɪʃ(ə)n&#x2F;<br>[n.] 通常化，标准化<br>例句：</p><ol><li>The usualization of this process will greatly improve efficiency. (这个过程的标准化将极大地提高效率。)</li><li>Usualization is an important step in quality control. (通常化是质量控制中的重要步骤。)</li><li>The company has implemented a policy of usualization across all departments. (公司已在所有部门实施了通常化政策。)</li></ol><h1 id="divergent"><a href="#divergent" class="headerlink" title="divergent"></a>divergent</h1><p>[英] · &#x2F;daɪˈvɜːdʒənt&#x2F;<br>[形容词] 1. 分歧的；不同的 2. 发散的；分叉的<br>例句：</p><ol><li>The opinions of the two experts are divergent on this issue.<br>（这个问题上，两位专家意见不一。）</li><li>The rays of light are divergent after passing through the lens.<br>（光线通过透镜后会发散。）</li><li>Their paths in life were becoming increasingly divergent.<br>（他们人生道路越来越分岔了。）</li></ol><h1 id="priest"><a href="#priest" class="headerlink" title="priest"></a>priest</h1><p>[英] &#x2F;priːst&#x2F;  美 &#x2F;prist&#x2F;<br>[n] &lt;宗&gt;神父；牧师<br>例句：</p><ol><li>The priest led the congregation in prayer. (神父带领教众祷告。)</li><li>He was ordained as a Catholic priest last year. (他去年被任命为天主教神父。)</li><li>The young couple asked the priest to marry them in the church. (这对年轻夫妇请求牧师在教堂里为他们举行婚礼。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
          <category> New word </category>
          
          <category> 2023.5.7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STUDY </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIDA问题</title>
      <link href="/2023/04/18/MIDA/"/>
      <url>/2023/04/18/MIDA/</url>
      
        <content type="html"><![CDATA[<h2 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h2><ul><li><p>什么是steady_state output?</p></li><li><p>什么是POLES和ZEROS?</p></li><li><p>γ是什么?</p></li><li><p>什么是predictor?</p></li><li><p>y(t)&#x3D;w(z)e(t)是什么？</p></li><li><p>为什么过去的现在的sample相乘等于0</p></li><li><p>笔记第5页y(t+k|t,s)为什么是stochastic process？</p></li><li><p>为什么prediction error是stochastic process？</p></li><li><p>MA的Variance为什么是平方和？为什么会收敛？</p></li><li><p>笔记第6页为什么y(t+k|t)&#x3D;那个</p></li><li><p>为什么Non-zero mean arma是那样的格式？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> MIDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIDA复习</title>
      <link href="/2023/04/18/MIDA%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/04/18/MIDA%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>到明天下午三点应该能看完，之后就开始每天三个exe。明天开始。<br>DB把concurrency做了<br>.<br>stochastic process<br>相当于扔了一百次色子的实验<br>两个signal等价如果他们是同一个stochastic process的实现<br>怎么描述一个S.P.: 用mean和covariance<br>γ(t1,t2)&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
          <category> POLIMI </category>
          
          <category> MIDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POLIMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入renren-fast包</title>
      <link href="/2023/04/17/2.%20%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%B7%91%E4%B8%8D%E9%80%9A/"/>
      <url>/2023/04/17/2.%20%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%B7%91%E4%B8%8D%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个error"><a href="#第一个error" class="headerlink" title="第一个error"></a>第一个error</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\JDK\jdk-17\bin\java.exe -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always &quot;-javaagent:D:\IntelliJ IDEA 2021.3.1\lib\idea_rt.jar=7270:D:\IntelliJ IDEA 2021.3.1\bin&quot; -Dfile.encoding=UTF-8 com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line"></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.</span><br><span class="line">错误: 找不到或无法加载主类 com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line">原因: java.lang.ClassNotFoundException: com.shinwhy.freemall.coupon.FreemallCouponApplication</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>##chatgpt回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这个错误信息包含两个部分：</span><br><span class="line"></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release. 这个警告信息是在运行Java虚拟机时出现的，提示你使用的是已经被弃用的选项。这两个选项-Xverify:none和-noverify在JDK 13中已经被弃用，未来的版本可能会被移除。</span><br><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类 com.shinwhy.freemall.coupon.FreemallCouponApplication 原因: java.lang.ClassNotFoundException: com.shinwhy.freemall.coupon.FreemallCouponApplication。 这个错误是在运行Java应用程序时出现的。它表示Java虚拟机无法找到或加载名为com.shinwhy.freemall.coupon.FreemallCouponApplication的主类。这可能是由于类路径问题或者缺少依赖库等原因导致的。</span><br><span class="line"></span><br><span class="line">针对这个错误，你可以考虑以下几个方面：</span><br><span class="line"></span><br><span class="line">检查类路径是否正确。在运行Java应用程序时，Java虚拟机会按照类路径查找类文件。如果类路径设置不正确，那么Java虚拟机就无法找到对应的类文件。你可以通过检查类路径是否包含了com.shinwhy.freemall.coupon.FreemallCouponApplication类文件的目录或jar包来确认类路径是否正确。</span><br><span class="line"></span><br><span class="line">检查是否缺少依赖库。如果程序依赖于其他的库文件，那么需要将这些库文件加入到类路径中，否则Java虚拟机也无法找到对应的类文件。你可以检查应用程序的依赖库，确保依赖库已经正确安装，并且类路径中包含了这些依赖库。</span><br><span class="line"></span><br><span class="line">如果问题仍然存在，你可以尝试使用其他版本的Java虚拟机来运行程序，或者更新程序的依赖库版本。同时，你可以考虑升级到最新版本的JDK，以避免使用已经被弃用的选项。</span><br></pre></td></tr></table></figure><p>第一个问题我尝试装JDK8试试看能不能解决<br>今天突然想到去查一下renren-fast对应的JDK版本，官网上说只支持JDK8，所以我安装JDK8，并修改所有pom.xml文件，好像解决了。<br>##一些小error:</p><blockquote><p><code>找不到符号：.allowedOriginPatterns(&quot;*&quot;)</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/little___ant/article/details/126885567</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>找不到符号：&lt;fork&gt;true&lt;/fork&gt;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我遇到了几乎同样的问题。</span><br><span class="line"></span><br><span class="line">我使用的是 jdk 16、maven 编译器 3.8.1 和 IntelliJ 版本 2021.1.3。</span><br><span class="line"></span><br><span class="line">对 pom.xml 进行任何更改后，右侧会显示一个小图标（Load Maven Changes）。单击该按钮后，问题就解决了。</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>Error:(3, 29) java: 程序包org.junit.jupiter.api不存在</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/littlehaes/article/details/104088317</span><br></pre></td></tr></table></figure><blockquote><p><code>&#39;parent.relativePath&#39; of POM com.qianbao:hermes_account_service:1.0.0-SNAPSHOT (/Users/wangyonglin/company/blyl/codes/codespackage_foruse/hermes_account_service_v1/pom.xml) points at com.qianbao:hermes_account_service instead of org.springframework.boot:spring-boot-starter-parent, please verify your project structure</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/453547775</span><br></pre></td></tr></table></figure><h1 id="第二个error"><a href="#第二个error" class="headerlink" title="第二个error"></a>第二个error</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Web server failed to start. Port 8080 was already in use.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Identify and stop the process that&#x27;s listening on port 8080 or configure this application to listen on another port.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>第二个问题我给每个文件夹配置了不同的端口，暂时解决了<br>后来又尝试了另一种做法，结束占用8080端口的任务，也解决了，占用8080端口的是tomcat<br><code>https://blog.csdn.net/Coder_ljw/article/details/129332755</code></p><p>第一个问题好像是因为tomcat版本不对，我重新配置了tomcat，但目前端口不对，我先试一下改端口号，改端口号不行，仍然显示同样的错误。<br>我在StackOverflow上提交了问题，希望有用，没等到回答</p><blockquote><p>重新下载renren-fast并导入，跟着视频一步步做，终于解决了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Freemall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pictr</title>
      <link href="/2023/04/14/pictr/"/>
      <url>/2023/04/14/pictr/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.wallpapermaiden.com/image/2023/01/08/red-eyes-wink-pointy-ears-vampire-crescent-wings-anime-girl-anime-53264.jpeg" alt="图片加载失败" title="壁纸"></p><p><img src="https://www.google.com/imgres?imgurl=https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg/270px-Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg&tbnid=tiz4kC8bF4l3LM&vet=12ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ..i&imgrefurl=https://zh.wikipedia.org/wiki/%25E7%258F%25A0%25E7%25A9%2586%25E6%259C%2597%25E7%2591%25AA%25E5%25B3%25B0&docid=H7j-p9vjqtKRLM&w=270&h=180&q=%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0&ved=2ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ" alt="图片加载失败" title="壁纸"></p><img decoding="async" src="https://s1.wallpapermaiden.com/image/2023/01/08/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" width="20%"><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/pictr/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" alt="图片加载失败"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/source/_posts/pictr/futuristic-city-industrial-skyscrapers-sci-fi-53198.jpeg" alt="图片加载失败"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="/./pictr/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" alt="图片加载失败"></p><p><img src="https://t7.baidu.com/it/u=2168645659,3174029352&fm=193&f=GIF" alt="RUNOOB 图标"></p><p><img src="https://cdn.mos.cms.futurecdn.net/NddgAz7AfjNsbsPiM72Ek6-1600-80.jpg.webp" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="https://s1.wallpapermaiden.com/image/2023/01/01/demon-cityscape-wings-mountains-fantasy-53158-resized.jpeg" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><a href="https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg">https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg</a></p><p><img src="https://cdn.pixabay.com/photo/2018/01/14/23/12/nature-3082832_1280.jpg" alt="pipi"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大功告成</title>
      <link href="/2023/04/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90/"/>
      <url>/2023/04/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>《渡荆门送别》</p><p>渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。</p><p>渡远荆门外，来从楚国游。山随平野尽，江入大荒流。<br>月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。渡远荆门外，来从楚国游。山随平野尽，江入大荒流。月下飞天镜，云生结海楼。仍怜故乡水，万里送行舟。</p><p>山随平野尽，江入大荒流。</p><p>月下飞天镜，云生结海楼。</p><p>仍怜故乡水，万里送行舟。</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;调用构造函数&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~Person()//对象销毁前，自动调用</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;析构函数的调用&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">//创建对象</span><br><span class="line">Person  p;//这是一个局部变量，test执行完毕后会释放该对象 进而调用析构函数</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Person  p1;//如果在main函数创建对象，析构函数会在按任意键后再调用</span><br><span class="line">test();</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hello</code></p><p><code>he</code></p><p><img src="https://s1.wallpapermaiden.com/image/2023/01/08/red-eyes-wink-pointy-ears-vampire-crescent-wings-anime-girl-anime-53264.jpeg" alt="图片加载失败" title="壁纸"></p><p><img src="https://www.google.com/imgres?imgurl=https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg/270px-Everest_North_Face_toward_Base_Camp_Tibet_Luca_Galuzzi_2006.jpg&tbnid=tiz4kC8bF4l3LM&vet=12ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ..i&imgrefurl=https://zh.wikipedia.org/wiki/%25E7%258F%25A0%25E7%25A9%2586%25E6%259C%2597%25E7%2591%25AA%25E5%25B3%25B0&docid=H7j-p9vjqtKRLM&w=270&h=180&q=%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0&ved=2ahUKEwjR-YOszqn-AhWA8rsIHT1oAwAQMygAegUIARC-AQ" alt="图片加载失败" title="壁纸"></p><img decoding="async" src="https://s1.wallpapermaiden.com/image/2023/01/08/medicine-melancholy-touhou-lying-down-red-eyes-doll-anime-53262.jpeg" width="20%">]]></content>
      
      
      <categories>
          
          <category> 2019 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2013 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/14/hello-world/"/>
      <url>/2023/04/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/2023/04/14/Docker%E5%AE%89%E8%A3%85/"/>
      <url>/2023/04/14/Docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>#Docker容器文件挂载和端口映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line">参数说明</span><br><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</span><br></pre></td></tr></table></figure><p>这里有报错，使用<code>docker logs -f &lt;container ID&gt;</code>查看日志，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2023-04-15 13:31:09+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.41-1.el7 started.</span><br><span class="line">2023-04-15 13:31:09+00:00 [ERROR] [Entrypoint]: mysqld failed while attempting to check config</span><br><span class="line">command was: mysqld --verbose --help --log-bin-index=/tmp/tmp.F82QFTNxFF</span><br><span class="line">mysqld: Can&#x27;t read dir of &#x27;/etc/mysql/conf.d/&#x27; (Errcode: 2 - No such file or directory)</span><br><span class="line">mysqld: [ERROR] Fatal error in defaults handling. Program aborted!</span><br></pre></td></tr></table></figure><p>修改配置文件的docker容器目录解决问题解决问题</p><p><strong>容器和容器之间相互隔离，相当于一个独立的运行环境</strong></p><p>访问容器内部：<br><code>docker exec -it mysql /bin/bash</code><br>这里还有另一种直接进入的方法<br><code>docker exec -it redis redis-cli</code><br>查看运行的容器<br><code>docker ps</code></p><p>1.查看所有运行中的容器 <code>docker ps</code>；<br>2.停止容器运行 <code>docker stop &lt;container-id&gt;</code>；<br>3.删除这个容器 <code>docker rm &lt;container-id&gt;</code>；<br>4.删除这个镜像 <code>docker rmi &lt;image-id&gt;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Freemall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemall </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
